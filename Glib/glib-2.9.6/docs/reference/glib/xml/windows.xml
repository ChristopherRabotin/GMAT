<refentry id="glib-Windows-Compatibility-Functions">
<refmeta>
<refentrytitle id="top_of_page">Windows Compatibility Functions</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Windows Compatibility Functions</refname>
<refpurpose>UNIX emulation on Windows.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="synopsis">
<title id="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;glib.h&gt;


#define     <link linkend="MAXPATHLEN:CAPS">MAXPATHLEN</link>
#define     <link linkend="pipe">pipe</link>                            (phandles)
<link linkend="gchar">gchar</link>*      <link linkend="g-win32-error-message">g_win32_error_message</link>           (<link linkend="gint">gint</link> error);
<link linkend="gchar">gchar</link>*      <link linkend="g-win32-getlocale">g_win32_getlocale</link>               (void);
<link linkend="gchar">gchar</link>*      <link linkend="g-win32-get-package-installation-directory">g_win32_get_package_installation_directory</link>
                                            (<link linkend="gchar">gchar</link> *package,
                                             <link linkend="gchar">gchar</link> *dll_name);
<link linkend="gchar">gchar</link>*      <link linkend="g-win32-get-package-installation-subdirectory">g_win32_get_package_installation_subdirectory</link>
                                            (<link linkend="gchar">gchar</link> *package,
                                             <link linkend="gchar">gchar</link> *dll_name,
                                             <link linkend="gchar">gchar</link> *subdir);
<link linkend="guint">guint</link>       <link linkend="g-win32-get-windows-version">g_win32_get_windows_version</link>     (void);
<link linkend="gchar">gchar</link>*      <link linkend="g-win32-locale-filename-from-utf8">g_win32_locale_filename_from_utf8</link>
                                            (const <link linkend="gchar">gchar</link> *utf8filename);
#define     <link linkend="G-WIN32-DLLMAIN-FOR-DLL-NAME:CAPS">G_WIN32_DLLMAIN_FOR_DLL_NAME</link>    (static, dll_name)
#define     <link linkend="G-WIN32-HAVE-WIDECHAR-API:CAPS">G_WIN32_HAVE_WIDECHAR_API</link>       ()
#define     <link linkend="G-WIN32-IS-NT-BASED:CAPS">G_WIN32_IS_NT_BASED</link>             ()

</synopsis>
</refsynopsisdiv>









<refsect1 id="desc">
<title id="desc.title">Description</title>
<para>
These functions provide some level of UNIX emulation on the Windows platform.
If your application really needs the POSIX APIs, we suggest you try the Cygwin
project.
</para>
</refsect1>

<refsect1 id="details">
<title id="details.title">Details</title>
<refsect2>
<title><anchor id="MAXPATHLEN:CAPS" role="macro"/>MAXPATHLEN</title>
<indexterm><primary>MAXPATHLEN</primary></indexterm><programlisting>#define MAXPATHLEN 1024
</programlisting>
<para>
Provided for UNIX emulation on Windows; equivalent to UNIX 
macro <literal>MAXPATHLEN</literal>, which is the maximum length of a filename
(including full path).
</para></refsect2>
<refsect2>
<title><anchor id="pipe" role="macro"/>pipe()</title>
<indexterm><primary>pipe</primary></indexterm><programlisting>#define pipe(phandles)	_pipe (phandles, 4096, _O_BINARY)
</programlisting>
<para>
Provided for UNIX emulation on Windows; see documentation for <function><link linkend="pipe"><function>pipe()</function></link></function>
in any UNIX manual.
</para><variablelist role="params">
<varlistentry><term><parameter>phandles</parameter>&nbsp;:</term>
<listitem><simpara>file descriptors, the first one for reading, the second one for writing.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-win32-error-message" role="function"/>g_win32_error_message ()</title>
<indexterm><primary>g_win32_error_message</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      g_win32_error_message           (<link linkend="gint">gint</link> error);</programlisting>
<para>
Translate a Win32 error code (as returned by <link linkend="GetLastError"><function>GetLastError()</function></link>) into
the corresponding message. The message is either language neutral,
or in the thread's language, or the user's language, the system's
language, or US English (see docs for <link linkend="FormatMessage"><function>FormatMessage()</function></link>). The
returned string is in UTF-8. It should be deallocated with
<link linkend="g-free"><function>g_free()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> error code.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> newly-allocated error message
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-win32-getlocale" role="function"/>g_win32_getlocale ()</title>
<indexterm><primary>g_win32_getlocale</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      g_win32_getlocale               (void);</programlisting>
<para>
The <link linkend="setlocale"><function>setlocale()</function></link> function in the Microsoft C library uses locale
names of the form "English_United States.1252" etc. We want the
UNIXish standard form "en_US", "zh_TW" etc. This function gets the
current thread locale from Windows - without any encoding info -
and returns it as a string of the above form for use in forming
file names etc. The returned string should be deallocated with
<link linkend="g-free"><function>g_free()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> newly-allocated locale name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-win32-get-package-installation-directory" role="function"/>g_win32_get_package_installation_directory ()</title>
<indexterm><primary>g_win32_get_package_installation_directory</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      g_win32_get_package_installation_directory
                                            (<link linkend="gchar">gchar</link> *package,
                                             <link linkend="gchar">gchar</link> *dll_name);</programlisting>
<para>
Try to determine the installation directory for a software package.
Typically used by GNU software packages.
</para>
<para>
<parameter>package</parameter> should be a short identifier for the package. Typically it
is the same identifier as used for
<literal>GETTEXT_PACKAGE</literal> in software configured according
to GNU standards. The function first looks in the Windows Registry
for the value <literal>&num;InstallationDirectory</literal> in the key
<literal>&num;HKLM\Software\<parameter>package</parameter></literal>, and if that value
exists and is a string, returns that.
</para>
<para>
If <parameter>package</parameter> is <literal>NULL</literal>, or the above value isn't found in the
Registry, but <parameter>dll_name</parameter> is non-<literal>NULL</literal>, it should name a DLL loaded
into the current process. Typically that would be the name of the
DLL calling this function, looking for its installation
directory. The function then asks Windows what directory that DLL
was loaded from. If that directory's last component is "bin" or
"lib", the parent directory is returned, otherwise the directory
itself. If that DLL isn't loaded, the function proceeds as if
<parameter>dll_name</parameter> was <literal>NULL</literal>.
</para>
<para>
If both <parameter>package</parameter> and <parameter>dll_name</parameter> are <literal>NULL</literal>, the directory from where
the main executable of the process was loaded is used instead in
the same way as above.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>package</parameter>&nbsp;:</term>
<listitem><simpara> An identifier for a software package, or <literal>NULL</literal>, in UTF-8
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dll_name</parameter>&nbsp;:</term>
<listitem><simpara> The name of a DLL that a package provides, or <literal>NULL</literal>, in UTF-8
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a string containing the installation directory for
<parameter>package</parameter>. The string is in the GLib file name encoding, i.e. UTF-8
on Windows. The return value should be freed with <link linkend="g-free"><function>g_free()</function></link> when not
needed any longer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-win32-get-package-installation-subdirectory" role="function"/>g_win32_get_package_installation_subdirectory ()</title>
<indexterm><primary>g_win32_get_package_installation_subdirectory</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      g_win32_get_package_installation_subdirectory
                                            (<link linkend="gchar">gchar</link> *package,
                                             <link linkend="gchar">gchar</link> *dll_name,
                                             <link linkend="gchar">gchar</link> *subdir);</programlisting>
<para>
Returns a newly-allocated string containing the path of the
subdirectory <parameter>subdir</parameter> in the return value from calling
<link linkend="g-win32-get-package-installation-directory"><function>g_win32_get_package_installation_directory()</function></link> with the <parameter>package</parameter> and
<parameter>dll_name</parameter> parameters.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>package</parameter>&nbsp;:</term>
<listitem><simpara> An identifier for a software package, in UTF-8, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dll_name</parameter>&nbsp;:</term>
<listitem><simpara> The name of a DLL that a package provides, in UTF-8, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subdir</parameter>&nbsp;:</term>
<listitem><simpara> A subdirectory of the package installation directory, also in UTF-8
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a string containing the complete path to <parameter>subdir</parameter> inside
the installation directory of <parameter>package</parameter>. The returned string is in
the GLib file name encoding, i.e. UTF-8 on Windows. The return
value should be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer needed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-win32-get-windows-version" role="function" condition="since:2.6"/>g_win32_get_windows_version ()</title>
<indexterm role="2.6"><primary>g_win32_get_windows_version</primary></indexterm><programlisting><link linkend="guint">guint</link>       g_win32_get_windows_version     (void);</programlisting>
<para>
Returns version information for the Windows operating system the
code is running on. See MSDN documentation for the <link linkend="GetVersion"><function>GetVersion()</function></link>
function. To summarize, the most significant bit is one on Win9x,
and zero on NT-based systems. The least significant byte is 4 on
Windows NT 4, 5 on Windows XP. Software that needs really detailled
version and feature information should use Win32 API like
<link linkend="GetVersionEx"><function>GetVersionEx()</function></link> and <link linkend="VerifyVersionInfo"><function>VerifyVersionInfo()</function></link>.
</para>
<para>
If there is an environment variable <envar>G_WIN32_PRETEND_WIN9X</envar> 
defined (with any value), this function always returns a version 
code for Windows 9x. This is mainly an internal debugging aid for 
GTK+ and GLib developers, to be able to check the code paths for 
Windows 9x.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The version information.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.6
</para></refsect2>
<refsect2>
<title><anchor id="g-win32-locale-filename-from-utf8" role="function" condition="since:2.8"/>g_win32_locale_filename_from_utf8 ()</title>
<indexterm role="2.8"><primary>g_win32_locale_filename_from_utf8</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      g_win32_locale_filename_from_utf8
                                            (const <link linkend="gchar">gchar</link> *utf8filename);</programlisting>
<para>
Converts a filename from UTF-8 to the system codepage.
</para>
<para>
On NT-based Windows, on NTFS file systems, file names are in
Unicode. It is quite possible that Unicode file names contain
characters not representable in the system codepage. (For instance,
Greek or Cyrillic characters on Western European or US Windows
installations, or various less common CJK characters on CJK Windows
installations.)
</para>
<para>
In such a case, and if the filename refers to an existing file, and
the file system stores alternate short (8.3) names for directory
entries, the short form of the filename is returned. Note that the
"short" name might in fact be longer than the Unicode name if the
Unicode name has very short pathname components containing
non-ASCII characters. If no system codepage name for the file is
possible, <literal>NULL</literal> is returned.
</para>
<para>
The return value is dynamically allocated and should be freed with
<link linkend="g-free"><function>g_free()</function></link> when no longer needed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>utf8filename</parameter>&nbsp;:</term>
<listitem><simpara> a UTF-8 encoded filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The converted filename, or <literal>NULL</literal> on conversion
failure and lack of short names.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.8
</para></refsect2>
<refsect2>
<title><anchor id="G-WIN32-DLLMAIN-FOR-DLL-NAME:CAPS" role="macro"/>G_WIN32_DLLMAIN_FOR_DLL_NAME()</title>
<indexterm><primary>G_WIN32_DLLMAIN_FOR_DLL_NAME</primary></indexterm><programlisting>#define     G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)</programlisting>
<para>
On Windows, this macro defines a <function><link linkend="DllMain"><function>DllMain()</function></link></function> function 
that stores the actual DLL name that the code being compiled will be 
included in.
</para>
<para>
On non-Windows platforms, expands to nothing.
</para><variablelist role="params">
<varlistentry><term><parameter>static</parameter>&nbsp;:</term>
<listitem><simpara>empty or "static".
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dll_name</parameter>&nbsp;:</term>
<listitem><simpara>the name of the (pointer to the) char array where the DLL name 
   will be stored. If this is used, you must also include 
   <filename>windows.h</filename>. If you need a more complex DLL entry 
   point function, you cannot use this.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="G-WIN32-HAVE-WIDECHAR-API:CAPS" role="macro" condition="since:2.6"/>G_WIN32_HAVE_WIDECHAR_API()</title>
<indexterm role="2.6"><primary>G_WIN32_HAVE_WIDECHAR_API</primary></indexterm><programlisting>#define G_WIN32_HAVE_WIDECHAR_API() (G_WIN32_IS_NT_BASED ())
</programlisting>
<para>
On Windows, this macro defines an expression which evaluates to <literal>TRUE</literal>
if the code is running on a version of Windows where the wide
character versions of the Win32 API functions, and the wide chaacter
versions of the C library functions work. (They are always present in
the DLLs, but don't work on Windows 9x and Me.)
</para>
<para>
On non-Windows platforms, it is not defined.
</para><para>Since 2.6


</para></refsect2>
<refsect2>
<title><anchor id="G-WIN32-IS-NT-BASED:CAPS" role="macro" condition="since:2.6"/>G_WIN32_IS_NT_BASED()</title>
<indexterm role="2.6"><primary>G_WIN32_IS_NT_BASED</primary></indexterm><programlisting>#define G_WIN32_IS_NT_BASED() (g_win32_get_windows_version () &lt; 0x80000000)
</programlisting>
<para>
On Windows, this macro defines an expression which evaluates to <literal>TRUE</literal> 
if the code is running on an NT-based Windows operating system.
</para>
<para>
On non-Windows platforms, it is not defined.
</para><para>Since 2.6


</para></refsect2>

</refsect1>




</refentry>
