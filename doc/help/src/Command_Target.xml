<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0" xml:id="Target" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <indexterm>
    <primary>Target</primary>
  </indexterm>

  <indexterm>
    <primary>EndTarget</primary>
  </indexterm>

  <refmeta>
    <refentrytitle>Target</refentrytitle>

    <refmiscinfo class="source">GMAT</refmiscinfo>

    <refmiscinfo class="version">2011a</refmiscinfo>

    <refmiscinfo class="manual">Commands</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>Target</refname>

    <refpurpose>Solve for condition(s) by varying one or more
    parameters</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Script Syntax</title>

    <synopsis><literal>Target</literal> <replaceable>SolverName</replaceable> [<literal>{</literal>[<literal>SolveMode =</literal> <replaceable>value</replaceable>], [<literal>ExitMode =</literal> <replaceable>value</replaceable>]<literal>}</literal>]
   <replaceable>Vary command</replaceable> …
   <replaceable>script statement</replaceable> …
   <replaceable>Achieve command</replaceable> …
<literal>EndTarget</literal></synopsis>

    <note>
      <para xlink:href="Target_Remarks">See sections <xref
      linkend="Target_Remarks"/> and <xref linkend="Target_Description"/> for
      this complex command. Multiple <guilabel>Vary</guilabel> and
      <guilabel>Achieve</guilabel> commands are permitted. Script statements
      can appear anywhere in the <guilabel>Target</guilabel> sequence.</para>
    </note>
  </refsynopsisdiv>

  <refsection xml:id="Target_Description">
    <title>Description</title>

    <para>The <guilabel>Target</guilabel> and <guilabel>EndTarge</guilabel>t
    commands are used to define a “Target Sequence” - to determine, for
    example, the maneuver components required to raise the orbit apogee to
    42164 km. Another common targeting example is to determine the parking
    orbit orientation required to align a lunar transfer orbit with the moon.
    <guilabel>Target</guilabel> sequences in GMAT are general and these are
    just examples. Let’s define the quantities that you don’t know precisely
    but need to determine as the<firstterm> control variables</firstterm>.
    Define the conditions that must be satisfied as the
    <firstterm>constraints</firstterm>. A <guilabel>Target</guilabel> sequence
    numerically solves a boundary value problem to determine the value of the
    control variables required to satisfy the constraints. You define your
    control variables by using <guilabel>Vary</guilabel> commands and you
    define the problems constraints using <guilabel>Achieve</guilabel>
    commands. The <guilabel>Target/EndTarget </guilabel> sequence is an
    advanced command. The examples later in this section are useful for more
    detailed explanation.</para>

    <para>See also: <xref linkend="DifferentialCorrector"/>, <xref
    linkend="Optimize"/></para>
  </refsection>

  <refsection>
    <title>Options</title>

    <informaltable colsep="0" frame="topbot">
      <tgroup cols="2">
        <colspec colnum="1" colwidth=".5*"/>

        <colspec colnum="2" colwidth="3*"/>

        <thead>
          <row>
            <entry>Option</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><guilabel>ApplyCorrections</guilabel></entry>

            <entry><para>The <guilabel>ApplyCorrections</guilabel> button
            replaces the initial guess values specified in the <guilabel>Vary
            </guilabel>commands . If the <guilabel>Target</guilabel> sequence
            converged, the converged values are applied. If the<guilabel>
            Target</guilabel> sequence did not converge, the last calculated
            values are applied.</para><variablelist>
                <varlistentry>
                  <term>Accepted Data Types</term>

                  <listitem>
                    <para>N/A</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Allowed Values</term>

                  <listitem>
                    <para>N/A</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Default Value</term>

                  <listitem>
                    <para>N/A</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Required</term>

                  <listitem>
                    <para>no</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Interfaces</term>

                  <listitem>
                    <para>GUI</para>
                  </listitem>
                </varlistentry>
              </variablelist></entry>
          </row>

          <row>
            <entry><guilabel>ExitMode</guilabel></entry>

            <entry><para>The <guilabel>ExitMode</guilabel> parameter allows
            you to control the initial guess values for
            <guilabel>Target</guilabel> sequences nested in control flow. If
            <guilabel>ExitMode</guilabel> is set to
            <guilabel>SaveAndContinue</guilabel>, the solution of a
            <guilabel>Target</guilabel> sequence is saved and used as the
            initial guess for the next <guilabel>Target</guilabel> sequence
            execution. If <guilabel>ExitMode</guilabel> is set to
            <guilabel>DiscardAndContinue</guilabel>, then the solution is
            discarded and the initial guess values specified in the
            <guilabel>Vary</guilabel> commands are used for each target
            sequence execution.</para><variablelist>
                <varlistentry>
                  <term>Accepted Data Types</term>

                  <listitem>
                    <para>PredefinedString</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Allowed Values</term>

                  <listitem>
                    <para>DiscardAndContinue, SaveAndContinue, Stop</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Default Value</term>

                  <listitem>
                    <para>DiscardAndContinue</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Required</term>

                  <listitem>
                    <para>no</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Interfaces</term>

                  <listitem>
                    <para>GUI, script</para>
                  </listitem>
                </varlistentry>
              </variablelist></entry>
          </row>

          <row>
            <entry><guilabel>SolveMode</guilabel></entry>

            <entry><para>The <guilabel>SolveMode</guilabel> parameter allows
            you to specify how the <guilabel>Target</guilabel> loop behaves
            during mission execution. When <guilabel>SolveMode</guilabel> is
            set to <guilabel>Solve</guilabel>, the target loop executes and
            attempts to solve the boundary value problem satisfying the
            targeter goals. When <guilabel>SolveMode</guilabel> is set to
            <guilabel>RunInitialGuess</guilabel>, the targeter does not
            attempt to solve the boundary value problem, and the commands in
            the <guilabel>Target</guilabel> sequence execute with the initial
            guess values defined in the <guilabel>Vary</guilabel>
            command.</para><variablelist>
                <varlistentry>
                  <term>Accepted Data Types</term>

                  <listitem>
                    <para>PredefinedString</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Allowed Values</term>

                  <listitem>
                    <para>Solve, RunInitialGuess</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Default Value</term>

                  <listitem>
                    <para>Solve</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Required</term>

                  <listitem>
                    <para>no</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Interfaces</term>

                  <listitem>
                    <para>GUI, script</para>
                  </listitem>
                </varlistentry>
              </variablelist></entry>
          </row>

          <row>
            <entry><guilabel>SolverName</guilabel></entry>

            <entry><para>The <guilabel>SolverName</guilabel> parameter allows
            you to select the solver for a target
            sequence.</para><variablelist>
                <varlistentry>
                  <term>Accepted Data Types</term>

                  <listitem>
                    <para>DifferentialCorrector</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Allowed Values</term>

                  <listitem>
                    <para>N/A</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Default Value</term>

                  <listitem>
                    <para>N/A</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Required</term>

                  <listitem>
                    <para>yes</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Interfaces</term>

                  <listitem>
                    <para>GUI, script</para>
                  </listitem>
                </varlistentry>
              </variablelist></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </refsection>

  <refsection>
    <title>GUI</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_Target_Default.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>When you add a <guilabel>Target </guilabel>command to the mission
    sequence, an <guilabel>EndTarget </guilabel>command is automatically added
    as shown below.</para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_Target_MissionTree.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>
  </refsection>

  <refsection xml:id="Target_Remarks">
    <title>Remarks</title>

    <para>A <guilabel>Target/EndTarget</guilabel> sequence must contain at
    least one <guilabel>Vary</guilabel> command and at least one
    <guilabel>Achieve Command</guilabel>. See the <guilabel>Vary</guilabel>
    and <guilabel>Achieve</guilabel> command sections for details on the
    syntax for those commands. The first <guilabel>Vary</guilabel> command
    must occur before the first <guilabel>Achieve</guilabel> command. A
    <guilabel>Target </guilabel>command must be coupled with one and only one
    <guilabel>EndTarget</guilabel> command. Each <guilabel>Target</guilabel>
    command field in the curly braces is optional. You can omit the entire
    list and the curly braces and the default values will be used for
    <guilabel>Target</guilabel> configuration fields such as
    <guilabel>SolveMode</guilabel> and <guilabel>ExitMode</guilabel>. GMAT
    <guilabel>Target</guilabel> sequences can solve square problems (i.e. when
    the number of control variables equals the number of constraints),
    over-determined problems (the number of control variables is less than the
    number of constraints) and under-determined problems (the number of
    control variables is greater than the number of constraints). In any of
    these cases, there may not be a solution, and the type of solution found
    depends on the selection of the solver (currently, only differential
    correctors are supported). Assuming a solution to the problem exists,
    there is one solution for a square problem and many solutions for an
    under-determined problem. Problems with more goals than variables may not
    have a solution. If your problem is under-determined, consider using an
    <guilabel>Optimize</guilabel> sequence to find an optimal solution in the
    space of feasible solutions.</para>

    <caution>
      <para>If you configure a <guilabel>Target</guilabel> sequence and get
      the error “Rmatrix error: matrix is singular”, then your control
      variables defined in the <guilabel>Vary</guilabel> commands do not
      affect the constraints defined in the <guilabel>Achieve</guilabel>
      commands. A common mistake in this case is that you forgot to apply a
      maneuver.</para>
    </caution>
  </refsection>

  <refsection>
    <title>Examples</title>

    <informalexample>
      <para>Use a <guilabel>Target</guilabel> sequence to solve for a root of
      an algebraic equation. Here we provide an initial guess of 5 for the
      control variable (or independent variable) x, and solve for the value of
      <guilabel>x</guilabel> that satisfies the constraint <inlineequation>
          <mathphrase>y = 3*x^3 + 2*x^2 - 4*x + 6</mathphrase>
        </inlineequation>. After executing this example you can look in the
      message window to see the solution for the variable x.</para>

      <programlisting><code>Create Variable x y
Create DifferentialCorrector aDC

BeginMissionSequence

Target aDC
   Vary aDC(x = 5)
   y = 3*x^3 + 2*x^2 - 4*x + 6
   Achieve aDC(y = 0)
EndTarget</code></programlisting>
    </informalexample>

    <informalexample>
      <para>Use a <guilabel>Target</guilabel> sequence to raise orbit apogee.
      Here the control variable is the velocity component of an
      <guilabel>ImpulsiveBurn</guilabel> object. The constraint is that the
      position vector magnitude at orbit apogee is 42164 km.</para>

      <programlisting><code>Create Spacecraft aSat
Create Propagator aPropagator
Create Variable I
Create ImpulsiveBurn aBurn
Create DifferentialCorrector aDC

Create OrbitView EarthView
EarthView.Add = {Earth,aSat}
EarthView.ViewScaleFactor = 5

BeginMissionSequence

Target aDC
  Vary aDC(aBurn.Element1 = 1.0, {Upper = 3})
  Maneuver aBurn(aSat)
  Propagate aPropagator(aSat,{aSat.Apoapsis})
  Achieve aDC(aSat.RMAG = 42164)
EndTarget</code></programlisting>
    </informalexample>
  </refsection>
</refentry>
