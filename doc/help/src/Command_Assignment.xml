<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0" xml:id="Assignment"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <indexterm>
    <primary>Assignment</primary>
  </indexterm>

  <indexterm>
    <primary>Equation</primary>
  </indexterm>

  <refmeta>
    <refentrytitle>Assignment (<literal>=</literal>)</refentrytitle>

    <refmiscinfo class="source">GMAT</refmiscinfo>

    <refmiscinfo class="manual">Commands</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>Assignment (<literal>=</literal>)</refname>

    <refpurpose>Set a variable or resource field to a value, possibly using
    mathematical expressions</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Script Syntax</title>

    <synopsis><replaceable>settable_item = expression</replaceable></synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>The assignment command (in the GUI, the
    <guilabel>Equation</guilabel> command) allows you to set a resource field
    or parameter to a value, possibly using mathematical expressions. GMAT
    uses the assignment operator ('=') to indicate an assignment command. The
    assignment operator uses the following syntax, where LHS denotes the
    left-hand side of the operator, and RHS denotes the right-hand side of the
    operator:</para>

    <programlisting><code><replaceable>LHS</replaceable> = <replaceable>RHS</replaceable></code></programlisting>

    <para>In this expression, the left-hand side
    (<code><replaceable>LHS</replaceable></code>) is being set to the value of
    the right-hand side (<code><replaceable>RHS</replaceable></code>). The
    syntax of the <code><replaceable>LHS</replaceable></code> and
    <code><replaceable>RHS</replaceable></code> expressions vary, but both
    must evaluate to compatible data types for the command to succeed.</para>

    <refsection>
      <title>Left-hand side</title>

      <para>The left-hand side of the assignment command must be a single item
      of any of the following types:</para>

      <itemizedlist>
        <listitem>
          <para>allowed resource (e.g. <guilabel>Spacecraft</guilabel>,
          <guilabel>Variable</guilabel>, <guilabel>Array</guilabel>)</para>
        </listitem>

        <listitem>
          <para>resource field for allowed resources (e.g.
          <guilabel>Spacecraft</guilabel>.<guilabel>Epoch</guilabel>,
          <guilabel>Spacecraft</guilabel>.<guilabel>DateFormat</guilabel>)</para>
        </listitem>

        <listitem>
          <para>settable resource parameter (e.g.
          <guilabel>Spacecraft</guilabel>.<guilabel>X</guilabel>,
          <guilabel>ReportFile</guilabel>.<guilabel>Precision</guilabel>)</para>
        </listitem>

        <listitem>
          <para><guilabel>Array</guilabel> or <guilabel>Array</guilabel>
          element</para>
        </listitem>
      </itemizedlist>

      <para>See the documentation for a particular resource to determine which
      fields and parameters can be set.</para>
    </refsection>

    <refsection>
      <title>Right-hand side</title>

      <para>The right-hand side of the assignment command can consist of any
      of the following: <itemizedlist>
          <listitem>
            <para>literal value</para>
          </listitem>

          <listitem>
            <para>resource (e.g. <guilabel>Spacecraft</guilabel>,
            <guilabel>Variable</guilabel>, <guilabel>Array</guilabel>)</para>
          </listitem>

          <listitem>
            <para>resource field (e.g.
            <guilabel>Spacecraft</guilabel>.<guilabel>Epoch</guilabel>,
            <guilabel>Spacecraft</guilabel>.<guilabel>DateFormat</guilabel>)</para>
          </listitem>

          <listitem>
            <para>resource parameter (e.g.
            <guilabel>Spacecraft</guilabel>.<guilabel>X</guilabel>,
            <guilabel>ChemicalThruster</guilabel>.<guilabel>K1</guilabel>)</para>
          </listitem>

          <listitem>
            <para><guilabel>Array</guilabel> or <guilabel>Array</guilabel>
            element</para>
          </listitem>

          <listitem>
            <para>mathematical expression (see below)</para>
          </listitem>
        </itemizedlist>MATLAB function calls are considered distinct from the
      assignment command. See the reference pages for more information.</para>
    </refsection>
  </refsection>

  <refsection>
    <title>GUI</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_Assignment_GUI.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>The assignment command in the script language corresponds to the
    <guilabel>Equation</guilabel> command in the GUI. The
    <guilabel>Equation</guilabel> properties box allows you to input both
    sides of the expression into free-form text boxes. The default values on
    each side are “<literal>Not_Set</literal>”; these are placeholders only,
    and are not valid during the mission run. You can type into each box the
    same syntax described above for the script language. When you click
    <guilabel>OK</guilabel> or <guilabel>Apply</guilabel>, GMAT validates each
    side of the expression and provides feedback for any warnings or
    errors.</para>
  </refsection>

  <refsection>
    <title>Remarks</title>

    <refsection>
      <title>Data type compatibility</title>

      <para>In general, the data types of the left-hand side and the
      right-hand side must match after all expressions are evaluated. This
      means that a <guilabel>Spacecraft</guilabel> resource can only be set to
      another <guilabel>Spacecraft</guilabel> resource, numeric parameters can
      only be set to numeric values, and <guilabel>String</guilabel> resources
      can only be set to string values. Additionally, the dimension of
      <guilabel>Array</guilabel> instances must match for the command to
      succeed. For numeric quantities, the assignment command does not
      distinguish between integers and floating-point values.</para>
    </refsection>

    <refsection>
      <title>Parameters</title>

      <para>Parameters can be used on either side of an assignment command,
      but there may be certain restrictions.</para>

      <para>On the right-hand side of the command, any parameter can be used.
      If a parameter accepts a dependency (such as
      <guilabel>Spacecraft</guilabel>.<guilabel><replaceable>CoordinateSystem</replaceable></guilabel>.<guilabel>X</guilabel>)
      and the dependency is omitted, a default dependency value will be used.
      For coordinate-system-dependent parameters, the default is
      <guilabel>EarthMJ2000Eq</guilabel>. For central-body-dependent
      parameters, the default is <guilabel>Earth</guilabel>.</para>

      <para>On the left-hand side, only settable (writable) parameters can be
      used. Furthermore, no dependency can be specified, except in the special
      case that the dependencies on both sides of the assignment command are
      equivalent. On the left-hand side, the default values of omitted
      dependencies are automatically taken to be the current values of the
      <guilabel>CoordinateSystem</guilabel> field of the referenced
      <guilabel>Spacecraft</guilabel> and its origin.</para>

      <informalexample>
        <para>These examples show valid and invalid usage of
        parameters:</para>

        <programlisting><code>Create Spacecraft aSat1 aSat2
aSat2.CoordinateSystem = 'EarthFixed'
Create Variable x
BeginMissionSequence
x = aSat1.EarthFixed.X       % Valid: Parameter with dependency on RHS
x = aSat1.EarthMJ2000Eq.X    % Valid: This and next statement are equiv.
x = aSat1.X                  % Valid: Default dep. value is EarthMJ2000Eq.

x = aSat1.Mars.Altitude      % Valid: Parameter with dependency on RHS
x = aSat1.Earth.Altitude     % Valid: This and next statement are equiv.
x = aSat1.Altitude           % Valid: Default dependency value is Earth.

aSat2.X = 1e5                % Valid: Default parameter value is EarthFixed.
aSat2.EarthMJ2000Eq.X = 1e5  % INVALID: Dependencies not allowed on LHS.
aSat2.EarthFixed.X = 1e5     % Valid: Special case because value = default.

aSat2.EarthMJ2000Eq.X = aSat1.EarthFixed.X    % INVALID: Dependency on LHS
aSat2.EarthMJ2000Eq.X = aSat1.EarthMJ2000Eq.X % INVALID: Dependency on LHS
aSat2.EarthFixed.X = aSat1.EarthFixed.X       % Valid: Special case

% DANGEROUS! Valid, but sets EarthMJ2000Eq RHS values to EarthFixed LHS param.
aSat2.X = aSat1.EarthMJ2000Eq.X

% DANGEROUS! RHS default is EarthMJ2000Eq, LHS default is current setting on
% aSat2 (EarthFixed in this case).
aSat2.X = aSat1.X</code>        </programlisting>
      </informalexample>
    </refsection>

    <refsection>
      <title>Mathematical Expressions</title>

      <para>The assignment command supports the use of inline mathematical
      expressions on the right-hand side of the command. These expressions
      follow the general syntax rules of MATLAB expressions, and can use a
      variety of operators and built-in functions.</para>

      <refsection>
        <title>Parsing</title>

        <para>Mathematical expressions are recognized by the presence of any
        of the operators or built-in functions described below. Before
        execution, all white space (e.g. spaces and tabs) is removed from the
        expression.</para>
      </refsection>

      <refsection>
        <title>Data Types</title>

        <para>Mathematical expressions operate on numeric values (integers or
        floating-point numbers). This includes the following: <itemizedlist>
            <listitem>
              <para>literal values</para>
            </listitem>

            <listitem>
              <para>numeric resources (<guilabel>Variable</guilabel>,
              <guilabel>Array</guilabel>)</para>
            </listitem>

            <listitem>
              <para>gettable resource parameters (e.g.
              <guilabel>Spacecraft</guilabel>.<guilabel>X</guilabel>,
              <guilabel>ChemicalThruster</guilabel>.<guilabel>K1</guilabel>)</para>
            </listitem>

            <listitem>
              <para><guilabel>Array</guilabel> elements</para>
            </listitem>

            <listitem>
              <para>calculation parameters (e.g.
              <guilabel>Spacecraft</guilabel>.<guilabel>OrbitPeriod</guilabel>)</para>
            </listitem>

            <listitem>
              <para>nested mathematical expressions</para>
            </listitem>
          </itemizedlist> Several of GMAT’s operators and functions are
        vectorized, so they operate on full <guilabel>Array</guilabel>
        resources as well as scalar numeric values.</para>
      </refsection>

      <refsection>
        <title>Operators</title>

        <informaltable colsep="0" frame="topbot">
          <tgroup cols="2">
            <colspec colnum="1" colwidth=".5*"/>

            <colspec colnum="2" colwidth="3*"/>

            <tbody>
              <row>
                <entry><guilabel>Vectorized operators</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>+</literal></term>

                      <listitem>
                        <para>Addition or unary plus. <literal>X+Y</literal>
                        adds <literal>X</literal> and <literal>Y</literal>.
                        <literal>X</literal> and <literal>Y</literal> must
                        have the same dimensions unless either is a
                        scalar.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>-</literal></term>

                      <listitem>
                        <para>Subtraction or unary minus.
                        <literal>-X</literal> is the negative of
                        <literal>X</literal>, where <literal>X</literal> can
                        be any size. <literal>X-Y</literal> subtracts
                        <literal>Y</literal> from <literal>X</literal>.
                        <literal>X</literal> and <literal>Y</literal> must
                        have the same dimensions unless either is a
                        scalar.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>*</literal></term>

                      <listitem>
                        <para>Multiplication. <literal>X*Y</literal> is the
                        product of <literal>X</literal> and
                        <literal>Y</literal>. If both <literal>X</literal> and
                        <literal>Y</literal> are scalars, this is the simple
                        algebraic product. If <literal>X</literal> is a matrix
                        or vector and <literal>Y</literal> is a scalar, all
                        elements of <literal>X</literal> are multiplied by
                        <literal>Y</literal> (and vice versa). If both
                        <literal>X</literal> and <literal>Y</literal> are
                        non-scalar, <literal>X*Y</literal> performs matrix
                        multiplication and the number of columns in
                        <literal>X</literal> must equal the number of rows in
                        <literal>Y</literal>.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>'</literal></term>

                      <listitem>
                        <para>Transpose. <literal>X'</literal> is the
                        transpose of <literal>X</literal>. If
                        <literal>X</literal> is a scalar,
                        <literal>X'</literal> is equal to
                        <literal>X</literal>.</para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>

              <row>
                <entry><guilabel>Scalar operators</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>/</literal></term>

                      <listitem>
                        <para>Division. <literal>X/Y</literal> divides
                        <literal>X</literal> by <literal>Y</literal>. If both
                        <literal>X</literal> and <literal>Y</literal> are
                        scalars, this is the simple algebraic quotient. If
                        <literal>X</literal> is a matrix or vector, each
                        element is divided by <literal>Y</literal>.
                        <literal>Y</literal> must be a non-zero scalar
                        quantity.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>^</literal></term>

                      <listitem>
                        <para>Power. <literal>X^Y</literal> raises
                        <literal>X</literal> to the <literal>Y</literal>
                        power. <literal>X</literal> and <literal>Y</literal>
                        must be scalar quantities. A special case is
                        <literal>X^(-1)</literal>, which when applied to a
                        square matrix <literal>X</literal>, returns the
                        inverse of <literal>X</literal>.</para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>When multiple expressions are combined, GMAT uses the following
        order of operations. Operations begin with those operators at the top
        of the list and and continue downwards. Within each level, operations
        proceed left-to-right. <orderedlist>
            <listitem>
              <para>parentheses <literal>()</literal></para>
            </listitem>

            <listitem>
              <para>transpose (<literal>'</literal>), power
              (<literal>^</literal>)</para>
            </listitem>

            <listitem>
              <para>unary plus (<literal>+</literal>), unary minus
              (<literal>-</literal>)</para>
            </listitem>

            <listitem>
              <para>multiplication (<literal>*</literal>), division
              (<literal>/</literal>)</para>
            </listitem>

            <listitem>
              <para>addition (<literal>+</literal>), subtraction
              (<literal>-</literal>)</para>
            </listitem>
          </orderedlist></para>
      </refsection>

      <refsection>
        <title>Built-in Functions</title>

        <para>GMAT supports the following built-in functions in mathematical
        expressions. Supported functions include common scalar functions,
        meaning they accept a single value only, such as sin and cos, matrix
        functions that operate on an entire matrix or vector, and string
        functions.</para>

        <informaltable colsep="0" frame="topbot">
          <tgroup cols="2">
            <colspec colnum="1" colwidth=".5*"/>

            <colspec colnum="2" colwidth="3*"/>

            <tbody>
              <row>
                <entry><guilabel>Scalar Math Functions</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>sin</literal></term>

                      <listitem>
                        <para>Sine. In <literal>Y = sin(X)</literal>,
                        <literal>Y</literal> is the sine of the angle
                        <literal>X</literal>. <literal>X</literal> must be in
                        radians. <literal>Y</literal> will be in the range
                        [-1, 1].</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>cos</literal></term>

                      <listitem>
                        <para>Cosine. In <literal>Y = cos(X)</literal>,
                        <literal>Y</literal> is the cosine of the angle
                        <literal>X</literal>. <literal>X</literal> must be in
                        radians. <literal>Y</literal> will be in the range
                        [-1, 1].</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>tan</literal></term>

                      <listitem>
                        <para>Tangent. In <literal>Y = tan(X)</literal>,
                        <literal>Y</literal> is the tangent of the angle
                        <literal>X</literal>. <literal>X</literal> must be in
                        radians. The tangent function is undefined at angles
                        that normalize to p/2 or -p/2.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>asin</literal></term>

                      <listitem>
                        <para>Arcsine. In <literal>Y = asin(X)</literal>,
                        <literal>Y</literal> is the arcsine of
                        <literal>X</literal>. <literal>X</literal> must be in
                        the range [-1, 1], and <literal>Y</literal> will be in
                        the range [-p/2, p/2].</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>acos</literal></term>

                      <listitem>
                        <para>Arccosine. In <literal>Y = acos(X)</literal>,
                        <literal>Y</literal> is the arccosine of
                        <literal>X</literal>. <literal>X</literal> must be in
                        the range [-1, 1], and <literal>Y</literal> will be in
                        the range [0, p].</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>atan</literal></term>

                      <listitem>
                        <para>Arctangent. In <literal>Y = atan(X)</literal>,
                        <literal>Y</literal> is the arctangent of
                        <literal>X</literal>. <literal>Y</literal> will be in
                        the range (-p/2, p/2).</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>atan2</literal></term>

                      <listitem>
                        <para>Four-quadrant arctangent. In <literal>A =
                        atan2(Y, X)</literal>, <literal>A</literal> is the
                        arctangent of <literal>Y/X</literal>.
                        <literal>A</literal> will be in the range (-p, p].
                        <literal>atan2(Y, X)</literal> is equivalent to
                        <literal>atan(Y/X)</literal> except for the expanded
                        range.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>log</literal></term>

                      <listitem>
                        <para>Natural logarithm. In <literal>Y =
                        log(X)</literal>, <literal>Y</literal> is the natural
                        logarithm of <literal>X</literal>.
                        <literal>X</literal> must be non-zero positive.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>log10</literal></term>

                      <listitem>
                        <para>Common logarithm. In <literal>Y =
                        log10(X)</literal>, <literal>Y</literal> is the common
                        (base-10) logarithm of <literal>X</literal>.
                        <literal>X</literal> must be non-zero positive.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>exp</literal></term>

                      <listitem>
                        <para>Exponential. In <literal>Y = exp(X)</literal>,
                        <literal>Y</literal> is exponential of
                        <literal>X</literal>
                        (e<superscript>X</superscript>).</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>DegToRad</literal></term>

                      <listitem>
                        <para>Radian conversion. In <literal>Y =
                        DegToRad(X)</literal>, <literal>Y</literal> is the
                        angle <literal>X</literal> in units of radians.
                        <literal>X</literal> must be an angle in
                        degrees.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>RadToDeg</literal></term>

                      <listitem>
                        <para>Degree conversion. In <literal>Y =
                        RadToDeg(X)</literal>, <literal>Y</literal> is the
                        angle <literal>X</literal> in units of degrees.
                        <literal>X</literal> must be an angle in
                        radians.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>abs</literal></term>

                      <listitem>
                        <para>Absolute value. In <literal>Y =
                        abs(X)</literal>, <literal>Y</literal> is the absolute
                        value of <literal>X</literal>.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>sqrt</literal></term>

                      <listitem>
                        <para>Square root. In <literal>Y = sqrt(X)</literal>,
                        <literal>Y</literal> is the square root of
                        <literal>X</literal>. <literal>X</literal> must be
                        non-negative.</para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <informaltable colsep="0" frame="topbot">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="1.0*"/>

            <colspec colnum="2" colwidth="3*"/>

            <tbody>
              <row>
                <entry><guilabel>Numeric Manipulation
                Functions</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>mod</literal></term>

                      <listitem>
                        <para>Modulus after division. <literal>
                        mod(x,y)</literal> returns <literal>x - n*y</literal>,
                        where <literal>n = floor(x/y)</literal> if <literal>y
                        ~= 0</literal>. By convention,
                        <literal>mod(x,x)</literal> is
                        <literal>x</literal>.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>ceil</literal></term>

                      <listitem>
                        <para>Round towards plus infinity. <literal>
                        ceil(X)</literal> rounds <literal>X</literal> to the
                        nearest integer towards plus infinity.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>floor</literal></term>

                      <listitem>
                        <para>Round towards minus infinity. <literal>
                        floor(X)</literal> rounds <literal>X</literal> to the
                        nearest integer towards minus infinity.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>fix</literal></term>

                      <listitem>
                        <para>Round towards zero. <literal> fix(X)</literal>
                        rounds <literal>X</literal> to the nearest integer
                        towards zero.</para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <informaltable colsep="0" frame="topbot">
          <tgroup cols="2">
            <colspec colnum="1" colwidth=".5*"/>

            <colspec colnum="2" colwidth="3*"/>

            <tbody>
              <row>
                <entry><guilabel>Random Number Functions</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>randn</literal></term>

                      <listitem>
                        <para>Normally distributed pseudorandom numbers.
                        <literal> R = randn(N)</literal> returns an
                        <literal>N</literal>-by-<literal>N</literal> matrix
                        containing pseudorandom values drawn from the standard
                        normal distribution. <literal> R = randn()</literal>
                        returns a single random number.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>rand</literal></term>

                      <listitem>
                        <para>Uniformly distributed pseudorandom numbers.
                        <literal> R = rand(N)</literal> returns an
                        <literal>N</literal>-by-<literal>N</literal> matrix
                        containing pseudorandom values drawn from the standard
                        uniform distribution on the open interval
                        <literal>(0,1)</literal>. <literal>R =
                        rand()</literal> returns a single random
                        number.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>SetSeed</literal></term>

                      <listitem>
                        <para>Set seed for random number generation. <literal>
                        SetSeed(X)</literal>sets the seed for the random
                        number generator where <literal>X</literal> must b a
                        postive real number. Note: <literal>SetSeed</literal>
                        calls through to the C++ 11 random number generator
                        seed algorithm that requires an unsigned integer.
                        Since the GMAT script language only supports real
                        numbers, casting is performed by the compiler which
                        rounds the real number down to the nearest integer. We
                        recommend passing in real numbers with zero mantissa
                        (i.e "1.0" or "198.0").</para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <informaltable colsep="0" frame="topbot">
          <tgroup cols="2">
            <colspec colnum="1" colwidth=".5*"/>

            <colspec colnum="2" colwidth="3*"/>

            <tbody>
              <row>
                <entry><guilabel>Matrix Functions</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>norm</literal></term>

                      <listitem>
                        <para>2-norm. In <literal>Y = norm(X)</literal>,
                        <literal>Y</literal> is the 2-norm of
                        <literal>X</literal>, where <literal>X</literal> must
                        be a vector (i.e. one dimension must be 1). If
                        <literal>X</literal> is a scalar, <literal>Y</literal>
                        is equal to <literal>X</literal>.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>det</literal></term>

                      <listitem>
                        <para>Determinant. In <literal>Y = det(X)</literal>,
                        <literal>Y</literal> is tthe cross product of the
                        vectors <literal>A</literal> and <literal>B</literal>.
                        If <literal>X</literal> is a matrix, the number of
                        rows must equal the number of columns. If
                        <literal>X</literal> is a scalar, <literal>Y</literal>
                        is equal to <literal>X</literal>. For efficiency,
                        GMAT’s implementation of the determinant is currently
                        limited to matrices 9×9 or smaller.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>cross</literal></term>

                      <listitem>
                        <para>Vector cross product. In <literal>C =
                        cross(A,B)</literal>, <literal>C</literal> is the
                        vector cross product of <literal>A</literal> and
                        <literal>B</literal> . <literal>A</literal> and
                        <literal>B</literal> must be 3 element arrays.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>inv</literal></term>

                      <listitem>
                        <para>Inverse. In <literal>Y = inv(X)</literal>,
                        <literal>Y</literal> is the inverse of
                        <literal>X</literal>. <literal>X</literal> must be a
                        matrix or a scalar. If <literal>X</literal> is a
                        matrix, the number of rows must equal the number of
                        columns. <literal>X^(-1)</literal> is an alternate
                        syntax.</para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <informaltable colsep="0" frame="topbot">
          <tgroup cols="2">
            <colspec colnum="1" colwidth="1.0*"/>

            <colspec colnum="2" colwidth="3*"/>

            <tbody>
              <row>
                <entry><guilabel>String Manipulation
                Functions</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>strcat</literal></term>

                      <listitem>
                        <para>String concatenation. <literal>STROUT =
                        strcat(S1, S2, ..., SN)</literal>concatenates strings.
                        Inputs can be combinations of string variables and
                        string literals.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>strfind</literal></term>

                      <listitem>
                        <para>String find. <literal>INDEX =
                        strfind(TEXT,PATTERN)</literal> returns the starting
                        index of the first instance of
                        <literal>PATTERN</literal> in <literal>TEXT</literal>.
                        If <literal>PATTERN</literal> is not found,
                        <literal>INDEX = -1</literal>.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>strrep</literal></term>

                      <listitem>
                        <para>String replace. <literal>NEWSTR =
                        strrep(OLDSTR,OLDSUBSTR,NEWSUBSTR)</literal> replaces
                        all occurrences of the string
                        <literal>OLDSUBSTR</literal> within string
                        <literal>OLDSTR</literal> with the string
                        <literal>NEWSUBSTR</literal>.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>strcmp</literal></term>

                      <listitem>
                        <para>String compare. <literal>FLAG =
                        strcmp(S1,S2)</literal> compares the strings
                        <literal>S1</literal> and <literal>S2</literal> and
                        returns logical 1 (true) if they are identical, and
                        returns logical 0 (false) otherwise.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>sprintf</literal></term>

                      <listitem>
                        <para>Write formatted data to a string.
                        <literal>STRING = sprintf(FORMATSPEC, A,
                        ...)</literal> formats data in
                        <literal>A,...</literal> according to
                        <literal>FORMATSPEC</literal> which is a C-style
                        format spec.</para>

                        <para>Note: The GMAT <code>sprintf</code> function
                        calls through to the sprintf function in the c-library
                        <code>iostream</code>. Additionally, the GMAT script
                        language does not support an integer data type, only
                        doubles.</para>

                        <para>A format spec follows this prototype:</para>

                        <para><literal>%[flags][width][.precision][length]specifier</literal></para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <informaltable colsep="0" frame="topbot">
          <tgroup cols="2">
            <colspec colnum="1" colwidth=".5*"/>

            <colspec colnum="2" colwidth="3*"/>

            <tbody>
              <row>
                <entry><guilabel>Specifiers</guilabel></entry>

                <entry><variablelist>
                    <varlistentry>
                      <term><literal>a</literal></term>

                      <listitem>
                        <para>Hexadecimal floating point, lowercase.</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>A</literal></term>

                      <listitem>
                        <para>Hexadecimal floating point, uppercase</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>e</literal></term>

                      <listitem>
                        <para>Scientific notation (mantissa/exponent),
                        lowercase</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>E</literal></term>

                      <listitem>
                        <para>Scientific notation (mantissa/exponent),
                        uppercase</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>f</literal></term>

                      <listitem>
                        <para>Decimal floating point, lowercase</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>F</literal></term>

                      <listitem>
                        <para>Decimal floating point, uppercase</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>g</literal></term>

                      <listitem>
                        <para>Use the shortest representation: %e or %f</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>G</literal></term>

                      <listitem>
                        <para>Use the shortest representation: %E or %F</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>o</literal></term>

                      <listitem>
                        <para>Unsigned octal</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>x</literal></term>

                      <listitem>
                        <para>Unsigned hexadecimal integer, lowercase</para>
                      </listitem>
                    </varlistentry>

                    <varlistentry>
                      <term><literal>X</literal></term>

                      <listitem>
                        <para>Unsigned hexadecimal integer, uppercase</para>
                      </listitem>
                    </varlistentry>
                  </variablelist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para><informaltable colsep="0" frame="topbot">
            <tgroup cols="2">
              <colspec colnum="1" colwidth=".5*"/>

              <colspec colnum="2" colwidth="3*"/>

              <tbody>
                <row>
                  <entry><guilabel>Flags</guilabel></entry>

                  <entry><variablelist>
                      <varlistentry>
                        <term><literal>+</literal></term>

                        <listitem>
                          <para>Forces to preceed the result with a plus or
                          minus sign (+ or -) even for positive numbers. By
                          default, only negative numbers are preceded with a -
                          sign.</para>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><literal>-</literal></term>

                        <listitem>
                          <para>Left-justify within the given field width;
                          Right justification is the default (see width
                          sub-specifier).</para>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><literal>#</literal></term>

                        <listitem>
                          <para>Used with o, x or X specifiers the value is
                          preceeded with 0, 0x or 0X respectively for values
                          different than zero. Used with a, A, e, E, f, F, g
                          or G it forces the written output to contain a
                          decimal point even if no more digits follow. By
                          default, if no digits follow, no decimal point is
                          written.</para>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><literal>0</literal></term>

                        <listitem>
                          <para>Left-pads the number with zeroes (0) instead
                          of spaces when padding is specified (see width
                          sub-specifier).</para>
                        </listitem>
                      </varlistentry>

                      <varlistentry>
                        <term><literal>(space)</literal></term>

                        <listitem>
                          <para>If no sign is going to be written, a blank
                          space is inserted before the value.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist></entry>
                </row>

                <row>
                  <entry><guilabel>Width</guilabel></entry>

                  <entry><variablelist>
                      <varlistentry>
                        <term><literal/></term>

                        <listitem>
                          <para>Minimum number of characters to be printed. If
                          the value to be printed is shorter than this number,
                          the result is padded with blank spaces. The value is
                          not truncated even if the result is larger.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist></entry>
                </row>

                <row>
                  <entry><guilabel>Precision</guilabel></entry>

                  <entry><variablelist>
                      <varlistentry>
                        <term><literal/></term>

                        <listitem>
                          <para>For a, A, e, E, f and F specifiers: this is
                          the number of digits to be printed after the decimal
                          point (by default, this is 6).</para>

                          <para>For g and G specifiers: This is the maximum
                          number of significant digits to be printed.</para>

                          <para>For s: this is the maximum number of
                          characters to be printed. By default all characters
                          are printed until the ending null character is
                          encountered. If the period is specified without an
                          explicit value for precision, 0 is assumed.</para>

                          <para>Integer specifiers are not supported as GMAT
                          does not have an integer data type in the script
                          language.</para>
                        </listitem>
                      </varlistentry>
                    </variablelist></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>
      </refsection>
    </refsection>
  </refsection>

  <refsection>
    <title>Examples</title>

    <informalexample>
      <para>Evaluate a basic algebraic equation:</para>

      <programlisting><code>Create Variable A B C x y
x = 1
Create ReportFile aReport

BeginMissionSequence

A = 10
B = 20
C = 2

y = A*x^2 + B*x + C
Report aReport y</code></programlisting>
    </informalexample>

    <informalexample>
      <para>Matrix manipulation:</para>

      <programlisting><code>Create Array A[2,2] B[2,2] C[2,2] x[2,1] y[2,1]
Create ReportFile aReport

A(1,1) = 10
A(2,1) = 5
A(1,2) = .10
A(2,2) = 1

x(1,1) = 2
x(2,1) = 3

BeginMissionSequence

B = inv(A)
C = B'
y = C*x
Report aReport A B C x y</code></programlisting>
    </informalexample>

    <informalexample>
      <para>Cloning a resource:</para>

      <programlisting><code>Create Spacecraft Sat1 Sat2
Sat1.Cd = 1.87
Sat1.DryMass = 123.456

Create ReportFile aReport

BeginMissionSequence

Sat2 = Sat1
Report aReport Sat2.Cd Sat2.DryMass</code></programlisting>
    </informalexample>

    <informalexample>
      <para>Using built-in functions:</para>

      <programlisting><code>Create Variable pi x y1 y2 y3
Create Array A[3,3]
Create Spacecraft aSat
Create ReportFile aReport

BeginMissionSequence

pi = acos(-1)

aSat.TA = pi/4
x = pi/4
A(1,1) = pi/4

y1 = sin(x)
y2 = sin(aSat.TA)
y3 = sin(A(1,1))

Report aReport y1 y2 y3</code></programlisting>
    </informalexample>
  </refsection>
</refentry>
