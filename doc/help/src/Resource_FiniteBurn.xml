<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0" xml:id="FiniteBurn"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <indexterm>
    <primary>FiniteBurn</primary>
  </indexterm>

  <refmeta>
    <refentrytitle>FiniteBurn</refentrytitle>

    <refmiscinfo class="source">GMAT</refmiscinfo>

    <refmiscinfo class="manual">Resources</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>FiniteBurn</refname>

    <refpurpose>A finite burn</refpurpose>
  </refnamediv>

  <refsection>
    <title>Description</title>

    <para>The <guilabel>FiniteBurn</guilabel> resource is used when continuous
    propulsion is desired. Impulsive burns happen instantaneously through the
    use of the <guilabel>Maneuver</guilabel> command, while finite burns occur
    continuously starting at the <guilabel>BeginFiniteBurn</guilabel> command
    and lasting until the <guilabel>EndFiniteBurn</guilabel> command is
    reached in the mission sequence. In order to apply a non-zero
    <guilabel>Finite Burn</guilabel>, there must be a
    <guilabel>Propagate</guilabel> command between the
    <guilabel>BeginFiniteBurn</guilabel> and
    <guilabel>EndFiniteBurn</guilabel> commands.</para>

    <para><phrase role="ref_seealso">See Also</phrase>: <xref
    linkend="FuelTank"/>, <xref linkend="Thruster"/>, <xref
    linkend="Spacecraft"/>, <xref linkend="BeginFiniteBurn"/>, <xref
    linkend="EndFiniteBurn"/>, <xref linkend="CalculationParameters"/></para>
  </refsection>

  <refsection>
    <title>Fields</title>

    <informaltable colsep="0" frame="topbot">
      <tgroup cols="2">
        <colspec colnum="1" colwidth="1.0*"/>

        <colspec colnum="2" colwidth="3*"/>

        <thead>
          <row>
            <entry>Field</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><guilabel>Thrusters</guilabel></entry>

            <entry><para>The <guilabel>Thruster</guilabel> field allows the
            selection of which <guilabel>Thruster</guilabel>, from a list of
            previously created thrusters, to use when applying a finite burn.
            Currently, using the GUI, you can only selectÂ  one
            <guilabel>Thruster</guilabel> to attach to a
            <guilabel>FiniteBurn</guilabel> resource. Using the scripting
            interface, you may attach multiple thrusters to a
            <guilabel>FiniteBurn</guilabel> resource. Using the scripting
            interface, you may attach multiple thrusters to a
            <guilabel>FiniteBurn</guilabel> resource. In a script command, an
            empty list, e.g., <literal>FiniteBurn1.Thruster={}</literal>, is
            allowed but is of limited utility since the GUI will automatically
            associate a <guilabel>ChemicalThruster</guilabel>, if one has been
            created, with the <guilabel>FiniteBurn</guilabel>. This field
            cannot be modified in the Mission Sequence. </para> <variablelist>
                <varlistentry>
                  <term>Data Type</term>

                  <listitem>
                    <para>Reference Array</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Allowed Values</term>

                  <listitem>
                    <para>A list of <guilabel>Thrusters</guilabel> created by
                    user. Can be a list of
                    <guibutton>ChemicalThruster</guibutton><guibutton>s</guibutton>
                    or <guibutton>ElectricThrusters</guibutton> but you cannot
                    mix chemical and electric thrusters.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Access</term>

                  <listitem>
                    <para>set</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Default Value</term>

                  <listitem>
                    <para>No Default</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Units</term>

                  <listitem>
                    <para>N/A</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Interfaces</term>

                  <listitem>
                    <para>GUI, script, or only one</para>
                  </listitem>
                </varlistentry>
              </variablelist></entry>
          </row>

          <row>
            <entry><guilabel>VectorFormat</guilabel></entry>

            <entry><para>Deprecated. Allows you to define the format of the
            finite burn thrust direction. This field has no affect. The finite
            burn thrust direction, as specified in the
            <guilabel>Thruster</guilabel> resource, is always given in
            <literal>Cartesian</literal> format. Note: You can use GMAT
            scripting to covert from other representations to Cartesian and
            then set the Cartesian format.</para> <variablelist>
                <varlistentry>
                  <term>Data Type</term>

                  <listitem>
                    <para>Enumeration</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Allowed Values</term>

                  <listitem>
                    <para><literal>Cartesian</literal>,
                    <literal>Spherical</literal></para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Access</term>

                  <listitem>
                    <para>set</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Default Value</term>

                  <listitem>
                    <para>
                      <literal>Cartesian</literal>
                    </para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Units</term>

                  <listitem>
                    <para>N/A</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Interfaces</term>

                  <listitem>
                    <para>script</para>
                  </listitem>
                </varlistentry>
              </variablelist></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </refsection>

  <refsection>
    <title>GUI</title>

    <para>The <guilabel>FiniteBurn</guilabel> dialog box allows you to specify
    which thruster to use for the finite burn. The layout of the
    <guilabel>FiniteBurn</guilabel> dialog box is shown below.</para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Resource_FiniteBurn_GUI.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>
  </refsection>

  <refsection>
    <title>Remarks</title>

    <refsection>
      <title>Configuring a FiniteBurn</title>

      <para>To perform a finite burn, the <guilabel>FiniteBurn</guilabel>
      resource itself and a number of related resources and commands must be
      properly configured. You must associate a specific
      <guilabel>ChemicalThruster</guilabel> hardware resource with a created
      <guilabel>FiniteBurn</guilabel>. You must associate a specific
      <guilabel>ChemicalTank</guilabel> hardware resource with the chosen
      <guilabel>ChemicalThruster</guilabel>. Finally, you must attach both the
      chosen <guilabel>Thruster</guilabel>s and <guilabel>Tanks</guilabel> to
      the desired <guilabel>Spacecraft</guilabel>. See the example below for
      additional details.</para>
    </refsection>

    <refsection>
      <title>FiniteBurn Using Multiple Thrusters</title>

      <para>Using the GUI, a <guilabel>FiniteBurn</guilabel> resource must be
      associated with exactly one <guilabel>Thruster</guilabel>.</para>

      <para>Using the scripting interface, one can assign multiple thrusters
      to a single <guilabel>FiniteBurn</guilabel> resource.</para>
    </refsection>
  </refsection>

  <refsection>
    <title>Interactions</title>

    <informaltable colsep="0" frame="topbot">
      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="4*"/>

        <thead>
          <row>
            <entry>Field</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><guilabel>Spacecraft resource</guilabel></entry>

            <entry><para> Must be created in order to apply any
            burn.</para></entry>
          </row>

          <row>
            <entry><guilabel>Thruster resource</guilabel></entry>

            <entry><para> As discussed in the <guilabel>Remarks</guilabel>,
            every <guilabel>FiniteBurn</guilabel> resource must be associated
            with at least one <guilabel>ChemicalThruster</guilabel> or
            <guilabel>ElectricThruster</guilabel>. Any thruster created in the
            resource tree can be incorporated into a
            <guilabel>FiniteBurn</guilabel> but thruster types cannot be
            mixed.</para></entry>
          </row>

          <row>
            <entry><guilabel>ChemicalTank resource</guilabel></entry>

            <entry><para> To perform a finite burn, a
            <guilabel>Tank</guilabel> must be attached to the
            <guilabel>Spacecraft</guilabel>. (A
            <guilabel>ChemicalTank</guilabel> is needed to provide pressure
            and temperature data used when modeling the thrust and specific
            impulse. A <guilabel>Tank</guilabel> is also needed if you want to
            model mass depletion.) </para></entry>
          </row>

          <row>
            <entry><guilabel>BeginFiniteBurn and EndFiniteBurn
            command</guilabel></entry>

            <entry><para> After a <guilabel>FiniteBurn</guilabel> is created,
            to apply it in the mission sequence, a
            <guilabel>BeginFiniteBurn</guilabel> and
            <guilabel>EndFiniteBurn</guilabel> command must be appended to the
            mission tree. </para></entry>
          </row>

          <row>
            <entry><guilabel>Propagate command</guilabel></entry>

            <entry><para> In order to apply a non-zero finite burn, there must
            be a <guilabel>Propagate</guilabel> command between the
            <guilabel>BeginFiniteBurn</guilabel> and
            <guilabel>EndFiniteBurn</guilabel> commands. </para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <refsection>
      <title>Reporting FiniteBurn Parameters</title>

      <para>GMAT now supports finite burn parameters that report the thrust
      component data for a finite burn. The parameters include total thrust
      from all thrusters in the three coordinate directions, the total
      acceleration from all thrusters in the three coordinate directions, and
      the total mass flow rate from all thrusters. Currently, by default the
      total thrust and total acceleration parameters in the three coordinate
      directions are reported only in the J2000 system and do not support any
      other coordinate system dependency. Furthermore, you can now also report
      out any thruster's individual parameters such as thrust magnitude, Isp
      and mass flow rate. See the <xref linkend="CalculationParameters"/>
      reference for definitions of these finite burn and thruster specific
      parameters. Also see the <xref linkend="FiniteBurn_Examples"
      xrefstyle="select:title"/> section for an example that shows how to
      report the finite burn and individual thruster specific parameters to a
      report file.</para>
    </refsection>
  </refsection>

  <refsection xml:id="FiniteBurn_Examples">
    <title>Examples</title>

    <informalexample>
      <para>Configure a chemical finite burn. Create a default
      <guilabel>Spacecraft</guilabel> and <guilabel>ChemicalTank</guilabel>
      Resource; Create a default <guilabel>ChemicalThruster</guilabel> that
      allows for fuel depletion from the default
      <guilabel>ChemicalTank</guilabel>; Attach
      <guilabel>ChemicalTank</guilabel> and
      <guilabel>ChemicalThruster</guilabel> to the
      <guilabel>Spacecraft</guilabel>; Create default
      <guilabel>ForceModel</guilabel> and <guilabel>Propagator</guilabel>;
      Create a <guilabel>Finite Burn</guilabel> that uses the default thruster
      and apply a 30 minute finite burn to the spacecraft.</para>

      <programlisting>% Create a default Spacecraft and ChemicalTank Resource
Create Spacecraft DefaultSC
Create ChemicalTank FuelTank1

% Create a default ChemicalThruster.  Allow for fuel depletion from 
% the default ChemicalTank.
Create ChemicalThruster Thruster1
Thruster1.DecrementMass = true
Thruster1.Tank = {FuelTank1}

%  Attach ChemicalTank and ChemicalThruster to the spacecraft
DefaultSC.Thrusters = {Thruster1}
DefaultSC.Tanks = {FuelTank1}

%  Create default ForceModel and Propagator
Create ForceModel DefaultProp_ForceModel
Create Propagator DefaultProp
DefaultProp.FM = DefaultProp_ForceModel

%  Create a Finite Burn that uses the default thruster
Create FiniteBurn FiniteBurn1
FiniteBurn1.Thrusters = {Thruster1}

BeginMissionSequence

%  Implement 30 minute finite burn
BeginFiniteBurn FiniteBurn1(DefaultSC)
Propagate DefaultProp(DefaultSC) {DefaultSC.ElapsedSecs = 1800}
EndFiniteBurn FiniteBurn1(DefaultSC)  </programlisting>
    </informalexample>

    <informalexample>
      <para>This example shows how to report finite burn parameters such as
      total acceleration (from all thrusters), total thrust (from all
      thrusters) in the three coordinate directions. We also report total mass
      flow rate from all thrusters. Additionally, individual thruster specific
      parameters such as thruster mass flow rate, thrust magnitude and
      thruster Isp are also reported. Note that in the generated report, all
      finite burn and thruster parameters are reported as zeros when thrusters
      are not turned on.</para>

      <programlisting>Create Spacecraft aSat

Create ChemicalTank aFuelTank

Create ChemicalThruster aThruster
aThruster.DecrementMass = true
aThruster.Tank = {aFuelTank}
aThruster.C1 = 1000  % Constant Thrust
aThruster.K1 = 300 % Constant Isp

aSat.Thrusters = {aThruster}
aSat.Tanks = {aFuelTank}

Create ForceModel aFM
aFM.CentralBody = Earth
aFM.PointMasses = {Earth}

Create Propagator aProp
aProp.FM = aFM

Create FiniteBurn aFB
aFB.Thrusters = {aThruster}

Create ReportFile rf
rf.Add = {aSat.UTCGregorian, aFB.TotalAcceleration1, aFB.TotalAcceleration2, ...
aFB.TotalAcceleration3, aFB.TotalMassFlowRate, aFB.TotalThrust1, ...
aFB.TotalThrust2, aFB.TotalThrust3, aSat.aThruster.MassFlowRate, ...
aSat.aThruster.ThrustMagnitude, aSat.aThruster.Isp}

BeginMissionSequence

Propagate aProp(aSat) {aSat.ElapsedSecs = 1000}

% Do a Finite-Burn for 1800 Secs
BeginFiniteBurn aFB(aSat)
Propagate aProp(aSat) {aSat.ElapsedSecs = 1800}
EndFiniteBurn aFB(aSat)

Propagate aProp(aSat) {aSat.ElapsedSecs = 1000}</programlisting>
    </informalexample>
  </refsection>
</refentry>
