<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0" xml:id="ScriptLanguage"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <indexterm>
    <primary>Script Language</primary>
  </indexterm>

  <refmeta>
    <refentrytitle>Script Language</refentrytitle>

    <refmiscinfo class="source">GMAT</refmiscinfo>

    <refmiscinfo class="version">2012a</refmiscinfo>

    <refmiscinfo class="manual">Resources</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>Script Language</refname>

    <refpurpose>The GMAT script language</refpurpose>
  </refnamediv>

  <refsection>
    <title>Script Structure</title>

    <para>A GMAT script is a text file consisting of valid script syntax
    elements, such as initialization statements, Mission Sequence commands,
    and comments. These syntax elements are described later in this
    specification.</para>

    <para>At the highest level, a GMAT script is made up of two sections:
    Initialization and the Mission Sequence. These sections each contain
    statements, but they have different rules about which sorts of statements
    are valid. The <guilabel>BeginMissionSequence</guilabel> command defines
    the beginning of the Mission Sequence section.</para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Resource_ScriptLanguage_GUI_1.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <refsection>
      <title>Initialization</title>

      <para>The first section in a script file, referred to as Initialization,
      is responsible for creating resources and setting their initial state.
      The Initialization section can contain the following types of
      statements:</para>

      <itemizedlist>
        <listitem>
          <para>resource creation statements (the <guilabel>Create</guilabel>
          statement)</para>
        </listitem>

        <listitem>
          <para>initialization statements</para>
        </listitem>
      </itemizedlist>

      <para>Only literal assignments are allowed in this section; no execution
      of commands or evaluation of parameters is done. In the GUI, the
      Initialization section maps directly to the Resources tree. All
      resources created, and all fields set, in this section appear as
      resources in the GUI when the script is loaded.</para>
    </refsection>

    <refsection>
      <title>Mission Sequence</title>

      <para>The Mission Sequence section contains the Mission Sequence, or the
      list of GMAT commands that are executed sequentially when the mission is
      run. The Mission Sequence section can contain the following types of
      statements:</para>

      <itemizedlist>
        <listitem>
          <para>command statements</para>
        </listitem>
      </itemizedlist>

      <para>The Mission Sequence begins at the first instance of the
      <guilabel>BeginMissionSequence</guilabel> command; therefore, this must
      be the first command statement in the script file. For backwards
      compatibility, if the <guilabel>BeginMissionSequence</guilabel> command
      is missing, the Mission Sequence begins with the first command
      encountered.</para>

      <para>In the GUI, the Mission Sequence section maps directly to the
      Mission tree. Each statement in the script (with the exception of the
      <guilabel>BeginScript</guilabel>/<guilabel>EndScript</guilabel> compound
      command) is displayed as a single element in the tree.</para>
    </refsection>
  </refsection>

  <refsection>
    <title>Basic Syntax</title>

    <refsection>
      <title>Source Text</title>

      <para>A GMAT script consists of a single file containing characters from
      the 7-bit US-ASCII character set. The script language is case-sensitive,
      so this line creates four different Variable resources:</para>

      <para><code>Create Variable x X y Y</code></para>

      <para>The script language is made up of lines. A line can be:</para>

      <itemizedlist>
        <listitem>
          <para>empty</para>
        </listitem>

        <listitem>
          <para>a comment (see <xref linkend="ScriptLanguage_Comments"
          xrefstyle="select:title"/>, below)</para>
        </listitem>

        <listitem>
          <para>a statement (see <xref linkend="ScriptLanguage_Statements"
          xrefstyle="select:title"/>)</para>
        </listitem>
      </itemizedlist>

      <para>Statement lines can be split over multiple physical lines with the
      continuation marker (“<literal>...</literal>”).</para>
    </refsection>

    <refsection>
      <title>Line Termination</title>

      <para>Script lines are terminated by any of the following ASCII
      character sequences:</para>

      <itemizedlist>
        <listitem>
          <para>line feed (hex: 0A)</para>
        </listitem>

        <listitem>
          <para>carriage return (hex: 0D)</para>
        </listitem>

        <listitem>
          <para>carriage return followed by line feed (hex: 0D0A)</para>
        </listitem>
      </itemizedlist>
    </refsection>

    <refsection>
      <title>White Space</title>

      <para>White space can appear above or below any line, before or after
      any statement within a line, and many other places in a script. The
      following characters are recognized as white space:</para>

      <itemizedlist>
        <listitem>
          <para>space (hex: 20)</para>
        </listitem>

        <listitem>
          <para>horizontal tab (hex: 09)</para>
        </listitem>
      </itemizedlist>

      <para>When loading a script with tab characters into the GUI, all tabs
      are converted to spaces internally.</para>
    </refsection>

    <refsection xml:id="ScriptLanguage_Comments">
      <title>Comments</title>

      <para>Comments begin with the percent symbol (“<literal>%</literal>”,
      hex: 25) and extend to the end of the line. There is no multi-line or
      embedded comment in the script language.</para>
    </refsection>

    <refsection>
      <title>File Paths</title>

      <para>Several resource types have fields that accept file paths as
      input. The general syntax of such paths is common to the language, but
      some specific behavior is specified by each resource.</para>

      <para>Forward slashes and backslashes can be used interchangeably within
      GMAT, and can be mixed in a single path. The following three paths are
      considered identical:</para>

      <programlisting><code>data/planetary_ephem/spk/de421.bsp
data\planetary_ephem\spk\de421.bsp
data\planetary_ephem/spk\de421.bsp</code></programlisting>

      <para>Absolute paths are passed to the underlying operating system
      as-is, aside from normalizing the slashes.</para>

      <para>Relative paths are considered relative to a location defined by
      each resource type separately, and usually defined in the GMAT startup
      file. For details, see the reference documentation for each resource
      type.</para>

      <para>File paths are written as string literals (see <xref
      linkend="ScriptLanguage_Strings" xrefstyle="select:title"/> under <xref
      linkend="ScriptLanguage_DataTypes" xrefstyle="select:title"/>). Quotes
      are mandatory if the path contains spaces, but are optional
      otherwise.</para>
    </refsection>
  </refsection>

  <refsection xml:id="ScriptLanguage_DataTypes">
    <title>Data Types</title>

    <refsection>
      <title>Literals</title>

      <refsection>
        <title>Integers</title>

        <para>Integers are written as a sequence of literal digits, with no
        decimal. Preceding zeros and prepended signs (<literal>+</literal> or
        <literal>-</literal>) are allowed. Scientific notation is not
        permitted.</para>
      </refsection>

      <refsection>
        <title>Real Numbers</title>

        <para>Real numbers can be written in any of the following
        formats:</para>

        <itemizedlist>
          <listitem>
            <para><literal>12</literal> (whole number)</para>
          </listitem>

          <listitem>
            <para><literal>12.5</literal> (decimal)</para>
          </listitem>

          <listitem>
            <para><literal>1.25e1</literal> or <literal>1.25e-1</literal>
            (scientific notation)</para>
          </listitem>
        </itemizedlist>

        <para>In all formats, the base can contain preceding or trailing
        zeros. In scientific notation, the exponent can be prepended by a sign
        (<literal>+</literal> or <literal>-</literal>) and can contain
        preceding zeros, but cannot contain a decimal. The exponent delimiter
        is case-insensitive (e.g. "<literal>e</literal>" or
        "<literal>E</literal>").</para>
      </refsection>

      <refsection xml:id="ScriptLanguage_Strings">
        <title>Strings</title>

        <para>String literals are delimited by single-quote characters
        (“<literal>'</literal>”, hex: 27).</para>

        <para>All language-supported characters are allowed in strings, with
        the exceptions below. There are no escape characters or character
        substitute sequences (such as “<literal>\n</literal>” for line
        feed).</para>

        <para>In Initialization, the following characters are not allowed in
        string literals:</para>

        <itemizedlist>
          <listitem>
            <para>some non-printable characters (NUL, SUB) (hex: 00,
            1A)</para>
          </listitem>

          <listitem>
            <para>line termination characters (LF, CR) (hex: 0A, 0D)</para>
          </listitem>

          <listitem>
            <para>percent character (“<literal>%</literal>”) (hex: 25)</para>
          </listitem>
        </itemizedlist>

        <para>In the Mission Sequence, the following characters are not
        allowed in string literals:</para>

        <itemizedlist>
          <listitem>
            <para>some non-printable characters (NUL, SUB) (hex: 00,
            1A)</para>
          </listitem>

          <listitem>
            <para>line termination characters (LF, CR) (hex: 0A, 0D)</para>
          </listitem>

          <listitem>
            <para>percent character (“<literal>%</literal>”) (hex: 25)</para>
          </listitem>

          <listitem>
            <para>brackets (“<literal>(</literal>“, “<literal>)</literal>”,
            “<literal>[</literal>“, “<literal>]</literal>”,
            “<literal>{</literal>“, “<literal>}</literal>”) (hex: 28, 29, 5B,
            5D, 7B, 7D)</para>
          </listitem>

          <listitem>
            <para>semicolon (“<literal>;</literal>”) (hex: 3B)</para>
          </listitem>
        </itemizedlist>

        <para>Quotes are generally optional, but are mandatory in
        Initialization if the string contains whitespace, any script language
        symbols, or any GMAT-recognized elements (e.g. keywords, resource
        names). They are mandatory in the Mission Sequence in the same
        instances, and additionally if the string contains mathematical
        operators and certain non-printable characters. We recommend quoting
        all string literals.</para>
      </refsection>

      <refsection>
        <title>Booleans</title>

        <para>The following boolean values are supported:</para>

        <itemizedlist>
          <listitem>
            <para><literal>true</literal> (alias:
            <literal>on</literal>)</para>
          </listitem>

          <listitem>
            <para><literal>false</literal> (alias:
            <literal>off</literal>)</para>
          </listitem>
        </itemizedlist>

        <para>Boolean literals are case-insensitive.</para>
      </refsection>

      <refsection>
        <title>Enumerated Values</title>

        <para>Many resource fields accept enumerated values. For example,
        <guilabel>Spacecraft</guilabel>.<guilabel>DateFormat</guilabel>
        accepts one of 10 values (<guilabel>A1ModJulian</guilabel>,
        <guilabel>A1Gregorian</guilabel>, etc.). Enumerated values are written
        as string literals. Quotes are always optional, as none contain spaces
        or special characters.</para>
      </refsection>

      <refsection>
        <title>References</title>

        <para>References to resources and resource parameters are indicated by
        the name of the resource or resource parameter. References are written
        as string literals. Quotes are always optional, as resource names and
        parameters cannot contain spaces or special characters.</para>
      </refsection>
    </refsection>

    <refsection>
      <title>Resources</title>

      <refsection>
        <title>Resource Types</title>

        <para>Resources in GMAT are instances of a base resource type that are
        given user-defined names and store data independently of other
        resources of the same type. Resource types include
        <guilabel>Spacecraft</guilabel>, <guilabel>GroundStation</guilabel>,
        and <guilabel>Variable</guilabel>. They cannot be used directly; they
        must first be instantiated with the <guilabel>Create</guilabel>
        statement. For example:</para>

        <para><code>Create Spacecraft aSat</code></para>

        <para>In the example, <code>Spacecraft</code> is the resource type and
        <code>aSat</code> is the resource. This is similar to the concept of
        classes and objects in object-oriented programming, where GMAT’s
        resource types are analogous to classes and its resources are
        analogous to objects.</para>
      </refsection>

      <refsection>
        <title>Naming Rules</title>

        <para>Resources must be named according to these rules:</para>

        <itemizedlist>
          <listitem>
            <para>Name must be made up of ASCII letters, numbers, or the
            underscore character (“<literal>_</literal>”). This corresponds to
            hex values 30–39, 41–5A, 5F, and 61–7A.</para>
          </listitem>

          <listitem>
            <para>Name must begin with a letter
            (<literal>A</literal>–<literal>Z</literal> or
            <literal>a</literal>–<literal>z</literal>, hex: 41–5A or
            61–7A)</para>
          </listitem>

          <listitem>
            <para>Name cannot be a reserved keyword or command name</para>
          </listitem>
        </itemizedlist>
      </refsection>

      <refsection>
        <title>Shadowing</title>

        <para>When the same name is used for multiple purposes in a script,
        the shadowing rules apply to determine how a reference to the name is
        interpreted.</para>

        <para>Resource names must be unique within a script. If a script
        attempts to create multiple resources that have the same
        case-sensitive name, the first <guilabel>Create</guilabel> statement
        in the script with that name is executed and all subsequent ones are
        ignored. The conflict is noted in a warning message.</para>

        <para>Command names and keywords are reserved. They cannot be used as
        resource names. See the <xref linkend="ScriptLanguage_Keywords"
        xrefstyle="select:title"/> section for a list of keywords.</para>

        <para>Built-in function names (like <literal>sin</literal> or
        <literal>cos</literal>) can be used as resource names with one
        exception: a reference to, for example, “<literal>sin(1)</literal>” on
        the right-hand side of an equal sign will be interpreted as a call to
        the <literal>sin</literal> built-in function, not element 1 of an
        <guilabel>Array</guilabel> resource named <guilabel>sin</guilabel>.
        The same is true for the other built-in functions.</para>

        <para>Resource type names (like “<guilabel>Spacecraft</guilabel>”) can
        be used as resource names. In such an instance, the conflict is
        resolved by the context. For example:</para>

        <programlisting><code>Create Spacecraft Spacecraft
Create Spacecraft aSat</code></programlisting>

        <para>In the example, GMAT knows by context that in the second
        <guilabel>Create</guilabel> statement, the argument
        “<code>Spacecraft</code>” refers to the resource type, not the
        resource instance created in the first statement.</para>
      </refsection>
    </refsection>

    <refsection>
      <title>Compound Types</title>

      <refsection>
        <title>Array of Literals</title>

        <para>Arrays of literals are accepted as input by some resources.
        Arrays of booleans, integers, and real numbers are surrounded by
        square brackets (“[“ and “]”, hex: 5B and 5D). Arrays of strings are
        surrounded by curly brackets (“{“ and “}”, hex: 7B and 7D). In all
        cases, the values are separated by whitespace or commas. Only
        one-dimensional arrays of literals are supported. See the following
        examples.</para>

        <programlisting><code>anOrbitView.DrawObject = [true true]             % boolean array
anOrbitView.OrbitColor = [255 32768]             % integer array
anOrbitView.ViewPointVector = [3e4, 1.2, -14]    % real array
aSpacecraft.OrbitSpiceKernelName = ...
    {'file1.bsp', 'file2.bsp'}                   % string array</code></programlisting>
      </refsection>

      <refsection>
        <title>Arrays of References</title>

        <para>Some resources accept arrays of references to other resources or
        resource fields. These reference arrays are surrounded by curly
        brackets (“{“ and “}”, hex: 7B and 7D) and the values are separated by
        whitespace or commas. Only one-dimensional arrays of references are
        supported. The values can optionally be surrounded by single quotes.
        See the following example.</para>

        <programlisting><code>aForceModel.PointMasses = {'Luna', Mars}  % array of resource references
aReport.Add = {Sat1.X, 'Sat1.Y', Sat1.Z}  % array of parameter references</code></programlisting>
      </refsection>

      <refsection>
        <title>Conversion</title>

        <para>In contexts that accept a real number, integer literals (those
        with no fractional value) are automatically converted to the
        equivalent floating-point value upon execution.</para>

        <para>There is no built-in conversion between string values and
        numeric values, though such a conversion may be implemented by
        individual commands.</para>
      </refsection>

      <refsection xml:id="ScriptLanguage_Keywords">
        <title>Keywords</title>

        <para>The script language recognized these reserved keywords:</para>

        <itemizedlist>
          <listitem>
            <para><literal>Create</literal></para>
          </listitem>

          <listitem>
            <para><literal>GMAT</literal></para>
          </listitem>

          <listitem>
            <para><literal>function</literal></para>
          </listitem>
        </itemizedlist>

        <para>In addition, all command names are reserved, including commands
        created by active plugins.</para>
      </refsection>
    </refsection>
  </refsection>

  <refsection>
    <title>Expressions</title>

    <para>The only types of expressions common to multiple commands are
    logical expressions, which are used by the
    <guilabel>If</guilabel>/<guilabel>Else</guilabel> and
    <guilabel>While</guilabel> commands. They are documented here instead of
    in both command references.</para>

    <refsection>
      <title>Relational Operators</title>

      <para>The following relational operators are supported in logical
      expressions:</para>

      <informaltable colsep="0" frame="topbot">
        <tgroup cols="2">
          <colspec colnum="1" colwidth=".5*"/>

          <colspec colnum="2" colwidth="3*"/>

          <tbody>
            <row>
              <entry><literal>&lt;</literal></entry>

              <entry><para> less than </para></entry>
            </row>

            <row>
              <entry><literal>&lt;=</literal></entry>

              <entry><para> less than or equal to </para></entry>
            </row>

            <row>
              <entry><literal>&gt;</literal></entry>

              <entry><para> greater than </para></entry>
            </row>

            <row>
              <entry><literal>&gt;</literal></entry>

              <entry><para> greater than or equal to </para></entry>
            </row>

            <row>
              <entry><literal>==</literal></entry>

              <entry><para> equal to </para></entry>
            </row>

            <row>
              <entry><literal>~=</literal></entry>

              <entry><para> not equal to </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The relational operators are scalar operators; they do not operate
      on <guilabel>Array</guilabel> resources (only individual
      elements).</para>

      <para>Each relational operator operates on the values of its arguments,
      not on their identity. Consider the example:</para>

      <programlisting><code>Create Variable x y
x = 5
y = 5

BeginMissionSequence

If x == y
    % body
EndIf</code> </programlisting>
    </refsection>

    <refsection>
      <title>Logical Operators</title>

      <para>The following logical operators are supported in logical
      expressions:</para>

      <informaltable colsep="0" frame="topbot">
        <tgroup cols="2">
          <colspec colnum="1" colwidth=".5*"/>

          <colspec colnum="2" colwidth="3*"/>

          <tbody>
            <row>
              <entry><literal>&amp;</literal></entry>

              <entry><para> logical AND (short-circuit operator)
              </para></entry>
            </row>

            <row>
              <entry><literal>|</literal></entry>

              <entry><para> logical OR </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The logical AND operator exhibits short-circuit behavior. That is,
      if the left-hand side of the operator evaluates to false, the right-hand
      side is not evaluated, though it is still parsed for syntactic
      validity.</para>
    </refsection>

    <refsection>
      <title>Logical Expressions</title>

      <para>Logical expressions are composed of relational expressions
      combined with logical operators.</para>

      <para>Relational expressions must contain one relational operator and
      two valid arguments. Literal boolean values are not supported, and
      numeric values are not interpreted as truth or falsehood. See the
      following examples:</para>

      <programlisting><code>1 == 5          % false
1 ~= 5          % true
true            % error
1               % error
A               % where "A" is an Array resource; error
1 == 5 &lt;= 3     % error</code></programlisting>

      <para>Logical expressions must contain at least one relational
      expression. Multiple relational expressions are combined using logical
      operators. All relational expressions are evaluated first, from left to
      right, then the full logical expression is evaluated from left to right,
      though the short-circuit AND operator (“<literal>&amp;</literal>”) may
      terminate the full evaluation. Parentheses are not allowed. See the
      following examples:</para>

      <programlisting><code>1 == 1                   % true
2 ~= 4 | 3 == 3          % true
8 &gt;= 3 &amp; 3 &lt; 4           % true
2 &lt; 4 &amp; 1 &gt; 3 | 5 == 5   % true
2 &lt; 4 &amp; (1 &gt; 3 | 5 == 5) % error
1 &amp; 1                    % error
true | false             % error</code>      </programlisting>
    </refsection>
  </refsection>

  <refsection xml:id="ScriptLanguage_Statements">
    <title>Statements</title>

    <refsection>
      <title>Statement Structure</title>

      <para>Script statements consist of (in order):</para>

      <orderedlist>
        <listitem>
          <para>Optional "<literal>GMAT </literal>" prefix</para>
        </listitem>

        <listitem>
          <para>Valid statement syntax (with optional line
          continuation)</para>
        </listitem>

        <listitem>
          <para>Optional semicolon</para>
        </listitem>

        <listitem>
          <para>Line termination sequence</para>
        </listitem>
      </orderedlist>

      <para>Any statement in the script may be prefixed by the characters
      “<literal>GMAT </literal>“. This prefix is optional and has no effect,
      but is supported for backward compatibility.</para>

      <para>A statement can be split over multiple physical lines by using the
      line continuation marker, three sequential period characters
      (“<literal>...</literal>”, hex: 2E2E2E), before each line break within
      the statement.</para>

      <para>Any statement may be terminated with a semicolon character
      (“<literal>;</literal>”, hex: 3B). The semicolon is optional and has no
      effect, but is supported for backward compatibility. Multiple statements
      cannot be combined on a line.</para>

      <para>White space may occur before or after a statement, or between any
      of the components listed above. It is also generally allowed anywhere
      inside of a statement, and any exceptions are noted in the documentation
      specific to that statement.</para>
    </refsection>

    <refsection>
      <title>The Create Statement</title>

      <para>The <guilabel>Create</guilabel> statement is a special statement
      that creates resources and assigns them names. It is only valid in the
      Initialization section of the script. It has the following
      components:</para>

      <orderedlist>
        <listitem>
          <para><literal>Create</literal> keyword</para>
        </listitem>

        <listitem>
          <para>Resource type</para>
        </listitem>

        <listitem>
          <para>Resource name(s)</para>
        </listitem>
      </orderedlist>

      <para>The <literal>Create</literal> keyword indicates the start of the
      statement. It is followed by the resource type, which indicates the type
      of resource to create. This is followed by a resource name, a
      user-defined name that is then used to refer to that particular
      resource. This name must follow the resource naming rules, listed
      previously.</para>

      <para>The only exception to this syntax is when creating an
      <guilabel>Array</guilabel> resource, in which case the dimension of the
      resource must also be specified</para>

      <para>Multiple resource names are allowed, in which case multiple
      resources of the same type will be created. Multiple names are separated
      by white space or by commas (“<literal>,</literal>”, hex: 2C).</para>

      <para>See the following examples:</para>

      <programlisting><code>Create Spacecraft aSat  % creates a resource "aSat" of type Spacecraft
Create ForceModel aFM
Create Propagator aProp
Create Variable x y     % creates two Variable resources: "x" and "y"
Create String s1, s2    % creates two String resources: "s1" and "s2"
Create Array A[2,2]     % creates a 2x2 Array resource named "A"</code></programlisting>
    </refsection>

    <refsection>
      <title>Initialization Statements</title>

      <para>Initialization statements are special statements that assign
      initial values to resource fields. They are only valid in the
      Initialization section of the script, and generally take the following
      form:</para>

      <programlisting><code><replaceable>resource</replaceable>.<replaceable>field</replaceable> = <replaceable>value</replaceable></code></programlisting>

      <para>Some fields, like those on ForceModel resources, have a
      multiple-dotted form:</para>

      <programlisting><code><replaceable>ForceModel</replaceable>.GravityField.<replaceable>PrimaryBody</replaceable>.Degree = <replaceable>value</replaceable></code></programlisting>

      <para>All initialization statements are composed of the following
      elements:</para>

      <orderedlist>
        <listitem>
          <para>Resource name</para>
        </listitem>

        <listitem>
          <para>Period character (“<literal>.</literal>”, hex: 2E)</para>
        </listitem>

        <listitem>
          <para>Field name, potentially in multiple-dotted form</para>
        </listitem>

        <listitem>
          <para>Equal character (“<literal>=</literal>”, hex: 3D)</para>
        </listitem>

        <listitem>
          <para>Initial field value</para>
        </listitem>
      </orderedlist>

      <para>The resource name must refer to a resource created previously in
      same script.</para>

      <para>The field name must refer to a valid field that exists for the
      associated resource type. Parameters cannot be set with an
      initialization statement, though it is valid to set a dual-mode field
      (one that can also be a parameter). Fields and parameters are listed in
      the documentation for each resource type.</para>

      <para>All values are taken literally; no evaluation is performed.
      Therefore, numeric and string values must be specified as literals, and
      resource names and parameters are stored as references. See the
      following example:</para>

      <programlisting><code>Create Spacecraft aSat
Create XYPlot aPlot
Create Variable x y z

x = 7100                   % valid
aSat.X = 7100              % valid
aSat.X = 7100 + 2          % error (mathematical expression)

aSat.X = x                 % error (field accepts literal, and variable
                           % evaluation does not occur)
aPlot.XVariable = x        % valid (field accepts reference to Variable x)
aPlot.YVariables = {y, z}  % valid (field accepts array of references to
                           % Variables y and z)</code></programlisting>

      <para>For backwards compatibility, there is one exception to the
      literal-value rule: <guilabel>Spacecraft</guilabel> resources can copied
      with an initialization statement like:</para>

      <programlisting>Create Spacecraft aSat1 aSat2
aSat2 = aSat1                   % Valid only for Spacecraft resources</programlisting>

      <para>Fields that have no assigned value in the Initialization section
      of the script remain at their default values, as specified in the
      documentation for each resource type.</para>
    </refsection>

    <refsection>
      <title>Command Statements</title>

      <para>Command statements invoke GMAT commands. They must appear in the
      Mission Sequence section of the script. One special command,
      <guilabel>BeginMissionSequence</guilabel>, initiates the Mission
      Sequence.</para>

      <para>Command statements are displayed by the GUI as individual line
      items in the Mission tree. The only exception is the
      <guilabel>BeginScript</guilabel>/<guilabel>EndScript</guilabel> compound
      command; this is displayed as a single <guilabel>ScriptEvent</guilabel>
      item by the GUI.</para>

      <para>Command statements are composed of the following elements:</para>

      <orderedlist>
        <listitem>
          <para>Command name (except assignment commands)</para>
        </listitem>

        <listitem>
          <para>Optional label</para>
        </listitem>

        <listitem>
          <para>Command arguments</para>
        </listitem>
      </orderedlist>

      <para>The command name is the name of the command being invoked (e.g.
      <guilabel>Propagate</guilabel> or <guilabel>BeginFiniteBurn</guilabel>).
      The command name is mandatory with one exception: the assignment command
      is indicated by its structure (“<code><replaceable>LHS</replaceable> =
      <replaceable>RHS</replaceable></code>”) instead of its name.</para>

      <para>A command label is an optional string literal that can be added
      immediately after the command name. This label is used by the GUI to
      “name” the statement in the Mission tree, and is intended for a short
      text description to aid the user. It must be single-quoted, whether or
      not it contains spaces. The command label may contain any ASCII
      character except certain non-printable characters (NUL, SUB), line
      termination characters (LF, CR), the percent sign
      (“<literal>%</literal>”), and the single quote (“<literal>'</literal>“).
      If the command label is omitted, the Mission tree statement is given a
      default label made up of the command name and an ID number. For example,
      if the third <guilabel>Propagate</guilabel> command in the script is
      unlabeled, it will be given the default label
      “<guilabel>Propagate3</guilabel>”.</para>

      <para>The command arguments control the behavior of the command. The
      syntax of the arguments is specified by each command individually, and
      is documented separately. Some commands, such as
      <guilabel>Stop</guilabel>, have no arguments.</para>

      <para>See the following example:</para>

      <programlisting><code>Propagate 'Prop to periapsis' aProp(aSat) {aSat.Periapsis}</code></programlisting>

      <para>In the example, “<code>Propagate</code>” is the command name,
      “<code>'Prop to periapsis'</code>” is the command label, and
      “<code>aProp(aSat) {aSat.Periapsis}</code>” is the argument
      string.</para>
    </refsection>

    <refsection>
      <title>Compound Statements</title>

      <para>Compound statements are command statements that control the
      execution of other command statements. Compound statements are composed
      of three elements:</para>

      <orderedlist>
        <listitem>
          <para>Begin statement</para>
        </listitem>

        <listitem>
          <para>Body</para>
        </listitem>

        <listitem>
          <para>End statement</para>
        </listitem>
      </orderedlist>

      <para>The begin statement carries the name of the command itself, while
      the end statement begins with the string “End”. For example, the
      <guilabel>While</guilabel> command is a compound command composed of two
      statements:</para>

      <programlisting><code>While ['<replaceable>label</replaceable>'] <replaceable>arguments</replaceable>
    [<replaceable>body</replaceable>]
EndWhile</code></programlisting>

      <para>The <guilabel>If</guilabel>/<guilabel>Else</guilabel> compound
      command is composed of three statements:</para>

      <programlisting><code>If ['<replaceable>label</replaceable>'] <replaceable>arguments</replaceable>
    [<replaceable>body</replaceable>]
Else
    [<replaceable>body</replaceable>]
EndIf</code> </programlisting>

      <para>The body of a compound command may consist of independent command
      statements, possibly including other compound statements. Certain
      compound commands may limit the commands that can be present in the
      body, while other commands may only be contained within certain compound
      commands. These limitations are documented separately for each
      command.</para>
    </refsection>
  </refsection>

  <refsection>
    <title>Processing</title>

    <para>GMAT processes a script in two phases: interpretation and execution.
    This section gives an overview of the processing sequence; low-level
    details are documented in Chapter 17 of the GMAT Architectural
    Specification.</para>

    <refsection>
      <title>Interpretation</title>

      <para>GMAT interprets a script in two stages: a parsing stage and a
      validation stage. In the parsing stage, GMAT reads and interprets each
      line of the script sequentially. As it interprets a line, it checks it
      for syntactic correctness and performs any initialization needed by the
      line. For example, if the line being interpreted is a
      <guilabel>Create</guilabel> statement, the related resource is created.
      If GMAT encounters an initialization line, it assigns the appropriate
      value to the indicated resource field. And if it encounters a command
      statement, it creates the command structure and interprets its
      arguments. All language, resource initialization, and command syntax
      errors are caught during this parsing stage.</para>

      <para>In the validation stage, GMAT checks that all references between
      resources are valid. For example, if the script indicates that a
      <guilabel>Spacecraft</guilabel> resource should be defined in relation
      to a specific <guilabel>CoordinateSystem</guilabel> resource, the
      reference is validated during this stage. The validation checks that all
      referenced resources exist and are of the correct type.</para>

      <para>The two-stage interpretation method affects the order of
      statements in the script. For example, <guilabel>Create</guilabel>
      statements must appear in the script above any initialization statements
      that reference the resource being created. But because validation is
      performed separately, the <guilabel>Create</guilabel> statement for a
      <guilabel>CoordinateSystem</guilabel> resource can appear in the script
      below an initialization line that references this resource. See the
      following examples:</para>

      <programlisting><code>Create Spacecraft aSat

% This is valid; the aSat resource has been created by the line above.
aSat.DateFormat = TAIGregorian

% This is invalid; the aReport resource has not yet been created.
aReport.Filename = 'report.txt'
Create ReportFile aReport</code></programlisting>

      <programlisting><code>Create XYPlot aPlot

% This is valid; the reference to aSat is validated
% after all resources are created.
aPlot.XVariable = aSat.A1ModJulian

Create Spacecraft aSat</code></programlisting>

      <para>Once both stages have completed, the script has been loaded into
      GMAT. In the GUI, if any, the Resources tree is populated with the
      resources created in the Initialization section of the script, and the
      Mission tree is populated with the command statements in the Mission
      Sequence.</para>

      <para>The interpretation phase is also sometimes called the “build”
      phase or the “load” phase.</para>
    </refsection>

    <refsection>
      <title>Execution</title>

      <para>When a mission is run, GMAT first builds interconnections between
      resources, then performs command execution. In this phase, all commands
      in the Mission Sequence are executed sequentially, in the order of
      definition in the script. When a command statement is executed, its
      arguments are fully processed by the command, and any remaining errors
      are reported. Examples of execution-phase errors include mismatched data
      types, out-of-bounds array references, and divide-by-zero errors.</para>
    </refsection>

    <refsection>
      <title>Processing Errors</title>

      <para>If GMAT encounters an error during the interpretation stage
      (parsing or validation), the mission is not loaded. Instead, GMAT
      reverts to a minimum mission consisting of:</para>

      <itemizedlist>
        <listitem>
          <para><guilabel>SolarSystem</guilabel></para>
        </listitem>

        <listitem>
          <para>Default <guilabel>CoordinateSystem</guilabel> resources:
          <guilabel>EarthMJ2000Eq</guilabel>,
          <guilabel>EarthMJ2000Ec</guilabel>, <guilabel>EarthFixed</guilabel>,
          <guilabel>EarthICRF</guilabel></para>
        </listitem>
      </itemizedlist>

      <para>If an error is encountered during the execution stage (linking or
      command execution), execution of the mission stops at the point of the
      error.</para>
    </refsection>
  </refsection>
</refentry>
