<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0" xml:id="For" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <indexterm>
    <primary>For</primary>
  </indexterm>

  <refmeta>
    <refentrytitle>For</refentrytitle>

    <refmiscinfo class="source">GMAT</refmiscinfo>

    <refmiscinfo class="version">2011a</refmiscinfo>

    <refmiscinfo class="manual">Commands</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname><guilabel>For</guilabel></refname>

    <refpurpose>Can we remove this section or only disply the text in the
    TOC?? It looks bad.</refpurpose>
  </refnamediv>

  <refsection>
    <title>For</title>

    <para>The <guilabel>For</guilabel> command is a control logic statement
    that executes a nested set of script statements a specified number of
    times.</para>
  </refsection>

  <refsection>
    <title>Script Syntax</title>

    <programlisting><code>For <replaceable>Index = values</replaceable>
   <replaceable>script statements</replaceable>
         :
EndFor</code></programlisting>
  </refsection>

  <refsection>
    <title>Description</title>

    <para><replaceable>values</replaceable> must have one of the following
    forms:</para>

    <para><replaceable>Start:End</replaceable></para>

    <para>Increments Index from Start to End in steps of 1, repeating the
    script statements until index is greater than End. If Start is greater
    than End, then the script statements do not execute.</para>

    <para><replaceable>Start:Increment:End</replaceable></para>

    <para>Increments Index from <guilabel>Start</guilabel> to
    <guilabel>End</guilabel> in steps of Increment, repeating the script
    statements until Index is greater than End if Increment is positive and
    less than End if Increment is negative. If Start is less than End and
    Increment is negative, then the script statements do not execute.</para>
  </refsection>

  <refsection>
    <title>GUI</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_For_Default.bmp"
                     scalefit="1" width="100%"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>The <guilabel>For</guilabel> command dialog box allows you to set
    the following <guilabel>For</guilabel> command parameters: Index, Start,
    Increment, and End. You can click in any text box and type a value, for
    example the number 1, or you can type any existing variable name, or an
    array element such as myArray(1,1). If you right-click in any textbox, or
    click the button next to any text box, then the ParameterSelectDialog box
    will open and you can select from objects to set the For command
    parameters.</para>
  </refsection>

  <refsection>
    <title>Options</title>

    <para><table colsep="0" frame="topbot" >
	
        <title><guilabel>For</guilabel> Command settings</title>

        <tgroup cols="2">
		<colspec colnum="1" colwidth=".5*"/>
        <colspec colnum="2" colwidth="3*"/>
          <thead>
            <row>
              <entry>Field</entry>

              <entry>Accepted Data Types</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><guilabel>Index</guilabel></entry>

              <entry><para>Index is the independent variable in a for loop and
              it is computed according to the arithmetic progression defined
              by the values for Start, Increment, and End. </para>
              <variablelist>
                  <varlistentry>
                    <term>Accepted Data Types</term>

                    <listitem>
                      <para>Variable</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>Limits</term>

                    <listitem>
                      <para>-Inf &lt; Index &lt; Inf</para>
                    </listitem>
                  </varlistentry>
                </variablelist></entry>
            </row>

            <row>
              <entry><guilabel>Start</guilabel></entry>

              <entry><para>The Start parameter is the initial value for the
              Index parameter. </para> <variablelist>
                  <varlistentry>
                    <term>Accepted Data Types</term>

                    <listitem>
                      <para>Real Number, Variable, Array Element, or Scalar
                      Real Object Parameter</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>Limits</term>

                    <listitem>
                      <para>-Inf &lt; Index &lt; Inf</para>
                    </listitem>
                  </varlistentry>
                </variablelist></entry>
            </row>

            <row>
              <entry><guilabel>Increment</guilabel></entry>

              <entry><para>The Increment parameter is used to compute the
              arithmetic progression of the loop Index such that the Ith pass
              through the loop is Start + I*Increment if the resulting value
              satisfies the constraint defined by End. </para> <variablelist>
                  <varlistentry>
                    <term>Accepted Data Types</term>

                    <listitem>
                      <para>Real Number, Variable, Array Element, or Scalar
                      Real Object Parameter</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>Limits</term>

                    <listitem>
                      <para>-Inf &lt; Index &lt; Inf</para>
                    </listitem>
                  </varlistentry>
                </variablelist></entry>
            </row>

            <row>
              <entry><guilabel>End</guilabel></entry>

              <entry><para>The End parameter is the upper (or lower if
              Increment is negative) bound for the Index parameter . </para>
              <variablelist>
                  <varlistentry>
                    <term>Accepted Data Types</term>

                    <listitem>
                      <para>Real Number, Variable, Array Element, or Scalar
                      Real Object Parameter</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>Limits</term>

                    <listitem>
                      <para>-Inf &lt; Index &lt; Inf</para>
                    </listitem>
                  </varlistentry>
                </variablelist></entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </refsection>

  <refsection>
    <title>Remarks</title>

    <para>If the loop executes, after execution of the loop, the value of
    Index remains the same as the last pass through the loop. If the loop does
    not execute, the value of Index is equal to the value before the
    loop.</para>

    <para>Changes made to the index variable inside of a for loop are
    overwritten by the for loop statement. For example, the output from the
    following snippet</para>

    <programlisting><code>For I = 1:1:3;
  I = 100
  Report DefaultReportFile I;
EndFor;

is

100
100
100</code></programlisting>

    <para>Changes made to the the Start, Increment, and End parameters made
    inside of a loop do not effect the behavior of the loop. For example, the
    output from the following snippet</para>

    <programlisting><code>Start = 2;
Increment = 2;
End = 8;
For I = Start:Increment:End
  Start = 1;
  Increment = 5;
  End = 100;
  Report rf I;
EndFor

is

2                      
4                      
6                      
8</code></programlisting>
  </refsection>

  <refsection>
    <title>Examples</title>

    <para>Propagate a spacecraft to apogee 3 times:</para>

    <programlisting><code>Create Spacecraft aSat
Create Propagator aPropagator
Create Variable I

BeginMissionSequence

For I = 1:3
  Propagate aPropagator(aSat,{aSat.Apoapsis})
EndFor</code></programlisting>

    <para>Index into an array:</para>

    <programlisting><code>Create Variable I J
Create Array myArray[10,5]
BeginMissionSequence

For I = 1:10
  For J = 1:5
      myArray(I,J) = I*J;
  EndFor
EndFor</code></programlisting>
  </refsection>
</refentry>
