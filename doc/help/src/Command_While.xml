<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0" xml:id="While"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <indexterm>
    <primary>While</primary>
  </indexterm>
  <indexterm>
    <primary>EndWhile</primary>
  </indexterm>

  <refmeta>
    <refentrytitle>While</refentrytitle>

    <refmiscinfo class="source">GMAT</refmiscinfo>

    <refmiscinfo class="version">R2012a</refmiscinfo>

    <refmiscinfo class="manual">Commands</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>While</refname>

    <refpurpose>Execute a series of commands repeatedly while a condition is met</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Script Syntax</title>

    <synopsis>
      <literal>While</literal> <replaceable>conditional statement</replaceable>
      [<replaceable>script statement</replaceable>]
      …
      <literal>EndWhile</literal>
    </synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>
      The <guilabel>While</guilabel> command is a control logic statement that executes a series of commands 
      repeatedly as long as the value of the provided conditional statement is true. The 
      conditional statement is evaluated before every iteration of the loop. If the conditional 
      statement is initially false, the loop is never executed. The syntax of the conditional 
      statement is described in the script language reference.
    </para>

    <para>
      <phrase role="ref_seealso">See Also</phrase>: 
      <!--<xref linkend="ScriptLanguage"/>,-->
      <xref linkend="If"/>
      <xref linkend="Else"/>, 
      <xref linkend="For"/>, 
    </para>
  </refsection>

  <refsection>
    <title>GUI</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_While_GUI.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>
      The <guilabel>While</guilabel> command GUI panel features a table in which you can build a complex 
      conditional statement. The rows of the table correspond to individual statements 
      in a compound conditional statement, and the columns correspond to individual 
      elements of those statements. The first line automatically contains a default statement:
    </para>

    <programlisting>
      <code>
  While DefaultSC.ElapsedDays &lt; 1.0
      </code>
    </programlisting>

    <para>
      The first column of the first row contains a placeholder for the <guilabel>While</guilabel> command name. This cannot be changed.
      The first column of each additional row contains the logical operator (<guilabel>&amp;</guilabel>, <guilabel>|</guilabel>) joins the statement in that
      row with the one above it. To select a logical operator, right-click in the appropriate box in the table, and a
      selection window will appear. Click the correct operator and click <guilabel>OK</guilabel> to select it.
    </para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_While_GUI_2.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>
      The <guilabel>Left Hand Side</guilabel> column contains the left-hand side of each individual conditional statement.
      Double-click the cell to type a parameter name. To set this value from a parameter selection list
      instead, either click “…” to the left of the cell you want to set, or right-click the cell itself.
      A <guilabel>ParameterSelectDialog</guilabel> window will appear that allows you to choose a parameter.
    </para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_While_GUI_3.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>
      The <guilabel>Condition</guilabel> column contains the conditional operator
      (<guilabel>==</guilabel>, <guilabel>~=</guilabel>, <guilabel>&lt;</guilabel>, etc.)
      that joins the left-hand and right-hand sides of the statement. To select a
      relational operator, right-click in the appropriate box in the table, and a
      selection window will appear. Click the correct operator and click <guilabel>OK</guilabel> to select it.
    </para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="files/images/Command_While_GUI_4.png"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>
      Finally, the <guilabel>Right Hand Side</guilabel> column contains the right-hand side of the statement.
      This value can be modified the same way as the <guilabel>Left Hand Side</guilabel> column.
    </para>

    <para>
      When you are finished, click <guilabel>Apply</guilabel> to save your changes, or
      click <guilabel>OK</guilabel> to save your changes and close the window. The conditional
      statement will be validated when either button is clicked.
    </para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <informalexample>
      <para>
        Propagate a spacecraft until it reaches a predefined altitude, 
        reporting data at 60-second increments:
      </para>

      <programlisting>
        <code>
  Create Spacecraft aSat
  Create ForceModel aForceModel
  Create ReportFile aReport

  Create Propagator aProp
  aProp.FM = aForceModel

  BeginMissionSequence

  While aSat.Altitude > 300
    Propagate aProp(aSat) {aSat.ElapsedSecs = 60}
    Report aReport aSat.TAIGregorian aSat.X aSat.Y aSat.Z
  EndWhile
        </code>
      </programlisting>
    </informalexample>
  </refsection>
</refentry>
