<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0"
          xml:id="CalculationParameters"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <indexterm>
    <primary>CalculationParameters</primary>
  </indexterm>

  <refmeta>
    <refentrytitle>CalculationParameters</refentrytitle>

    <refmiscinfo class="source">GMAT</refmiscinfo>

    <refmiscinfo class="version">2012a</refmiscinfo>

    <refmiscinfo class="manual">Resources</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>CalculationParameters</refname>

    <refpurpose>
      Data property available for use by commands
    </refpurpose>
  </refnamediv>

  <refsection>
    <title>Description</title>

    <para>
      Parameters are named resource properties that can be used to obtain data for use 
      by Mission Sequence commands or by output resources. Some parameters, such as the 
      <guilabel>Altitude</guilabel> parameter of <guilabel>Spacecraft</guilabel>, are calculated values that can only be used to retrieve 
      data. They cannot be set directly. Others, such as the <guilabel>Element1</guilabel> parameter of <guilabel>ImpulsiveBurn</guilabel>, 
      share the same name as a resource field and can be used both to set data and retrieve it. Parameters 
      are distinguished from resource fields by their extra functionality: fields are static resource properties
      that are usually set in initialization (or in the GUI Resources tree), while parameters can be calculated on 
      the fly and used in plots, reports, and mathematical expressions.
    </para>

    <para>
      Parameters are classified as one of four types: central-body-dependent parameters, 
      coordinate-system-dependent parameters, attached-hardware parameters, and standalone 
      parameters. Standalone parameters are the simplest type, in that they have no dependencies. 
      The <guilabel>ElapsedSecs</guilabel> parameter of <guilabel>Spacecraft</guilabel> is an example of this; it is simply referenced as 
      <replaceable>Spacecraft.ElapsedSecs</replaceable>.
    </para>

    <para>
      Central-body-dependent parameters, as the name suggests, have a value 
      that is dependent on the chosen celestial body. The <guilabel>Altitude</guilabel> parameter of 
      <guilabel>Spacecraft</guilabel> is an example of this. To reference this parameter, you must specify a 
      central body, such as <replaceable>Spacecraft.Mars.Altitude</replaceable>. Any built-in central body or user-defined 
      <guilabel>Asteroid</guilabel>, <guilabel>Comet</guilabel>, <guilabel>Moon</guilabel>, or <guilabel>Planet</guilabel> 
      is valid as a dependency. If the dependency is omitted, Earth is assumed.
    </para>

    <para>
      Likewise, coordinate-system-dependent parameters have a value that is dependent on the chosen coordinate system. 
      The <guilabel>DEC</guilabel> parameter of <guilabel>Spacecraft</guilabel> is an example of this. To reference this parameter, you must specify the name of a 
      <guilabel>CoordinateSystem</guilabel> resource, such as <replaceable>Spacecraft.EarthFixed.DEC</replaceable>. Any default or user-defined <guilabel>CoordinateSystem</guilabel> resource 
      is valid as a dependency. If the dependency is omitted, <guilabel>EarthMJ2000Eq</guilabel> is assumed.
    </para>

    <para>
      Attached-hardware parameters have no dependencies, but are themselves dependent on being 
      attached to a <guilabel>Spacecraft</guilabel>. <guilabel>FuelTank</guilabel> and <guilabel>Thruster</guilabel> parameters are examples of this. The <guilabel>FuelMass</guilabel> 
      parameter of <guilabel>FuelTank</guilabel> cannot be referenced without first attaching the <guilabel>FuelTank</guilabel> to a <guilabel>Spacecraft</guilabel>. 
      Then, the parameter can be referenced as: <replaceable>Spacecraft.FuelTank.FuelMass</replaceable>.
    </para>

    <para>
      The individual parameters are resource-specific, and are documented along with the their parent resources. 
      The GUI, however, has a parameter selection interface that is common to all parameters. 
      This interface is documented in GUI, below.
    </para>

    <para>
      <phrase role="ref_seealso">See Also</phrase>: 
      <!--<xref linkend="ScriptLanguage"/>,--> 
      <xref linkend="FuelTank"/>,
      <xref linkend="ImpulsiveBurn"/>,
      <xref linkend="Spacecraft"/>,
      <xref linkend="Thruster"/>
    </para>
  </refsection>

  <refsection>
    <title>GUI</title>

    <para>
      Parameters can be used as input in several places throughout GMAT, 
      such as the <guilabel>ReportFile</guilabel> and <guilabel>XYPlot</guilabel> resources and the <guilabel>If</guilabel>/<guilabel>Else</guilabel>, <guilabel>Propagate</guilabel>, and 
      <guilabel>Report</guilabel> commands. In the GUI, all of these use a common interface called the <guilabel>ParameterSelectDialog</guilabel> 
      that allows for interactive parameter selection. A basic <guilabel>ParameterSelectDialog</guilabel> window looks like the following:
    </para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     contentdepth="100%"
                     fileref="files/images/Resource_CalculationParameters_GUI.png"
                     scalefit="1"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>
      The <guilabel>ParameterSelectDialog</guilabel> window is used to build a parameter, along with any dependencies, 
      for use in a command or resource. Some resources and commands have different requirements for the 
      types of parameters that can be used, so the <guilabel>ParameterSelectDialog</guilabel> can take slightly different forms, 
      depending on where it's used. This section will describe the generic interface, then mention any resource- or 
      command-specific exceptions.
    </para>

    <refsection>
      <title>General Usage</title>

      <para>
        The first step in choosing a parameter is to select the object (or resource) type from the Object Type list 
        in the upper left. Five types can appear in this list: Spacecraft, ImpulsiveBurn, Variable, Array, and String.
      </para>

      <para>
        Once you've selected a type, The <guilabel>Object List</guilabel> box is populated with all 
        existing resources of that type. Use this list to choose the specific resource you'd like to reference.
      </para>

      <para>
        If the <guilabel>Spacecraft</guilabel> type is selected, the <guilabel>Attached Hardware List</guilabel> appears below the <guilabel>Object List</guilabel>. 
        This list displays any hardware (such as <guilabel>FuelTank</guilabel> resources) attached to the selected <guilabel>Spacecraft</guilabel>. 
        If the <guilabel>Array</guilabel> type is selected, <guilabel>Row</guilabel> and <guilabel>Col</guilabel> boxes appear. Use these to specify a row and column to select an 
        individual array element, or check <guilabel>Select Entire Object</guilabel> to choose the entire array.
      </para>

      <para>
        Once a resource is selected, the <guilabel>Object Properties</guilabel> list is populated with all
        available parameters provided by that resource. Some resources, such as instances of <guilabel>Variable</guilabel> or 
        <guilabel>Array</guilabel>, are themselves parameters, so this list remains empty.
      </para>

      <para>
        Parameters with different dependency types are commingled in the <guilabel>Object Properties</guilabel> list. 
        When you select one, the appropriate dependency (if any) appears below the list. For example, 
        after selecting the <guilabel>Spacecraft AOP</guilabel> parameter, a <guilabel>CoordinateSystem</guilabel> list appears. After selecting 
        the <guilabel>Spacecraft Apoapsis</guilabel> parameter, a <guilabel>Central Body</guilabel> list appears. And after selecting the Spacecraft Cd 
        parameter, no dependency list appears. To select a range of parameters from the <guilabel>Object Properties</guilabel> list, 
        hold down the Shift key while selecting the second endpoint of the range. To select multiple individual parameters, 
        hold down the Ctrl key while making each selection.
      </para>

      <para>
        To select a parameter, select the appropriate <guilabel>Object Type</guilabel>, the specific resource from the 
        <guilabel>Object List</guilabel> or <guilabel>Attached Hardware List</guilabel>, the desired parameter from the <guilabel>Object Properties list</guilabel>, 
        and the required dependency, and add it to the <guilabel>Selected Value(s)</guilabel> list on the right. There are 
        six buttons available to control this list:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            UP: Move the selected item in the Selected Value(s) list up one position (if allowed).
          </para>
        </listitem>
        <listitem>
          <para>
            DN: Move the selected item in the Selected Value(s) list down one position (if allowed).
          </para>
        </listitem>
        <listitem>
          <para>
            -&gt;: Add the selected item in the Object Properties list to the Selected Value(s) list.
          </para>
        </listitem>
        <listitem>
          <para>
            &lt;-: Remove the selected item in the Selected Value(s) list.
          </para>
        </listitem>
        <listitem>
          <para>
            =&gt;: Add all items to the Selected Value(s) list.
          </para>
        </listitem>
        <listitem>
          <para>
            &lt;=: Remove all items from the Selected Value(s) list.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        When finished, the <guilabel>Selected Value(s)</guilabel> list contains the final selected parameters. 
        Click <guilabel>OK</guilabel> to accept the selection.
      </para>

      <para>
        The ordering of the <guilabel>Selected Value(s)</guilabel> list is significant in certain circumstances 
        (such as in the <guilabel>Add</guilabel> field of <guilabel>ReportFile</guilabel>), but not in others. See the documentation for 
        each resource or command for details.
      </para>
    </refsection>

    <refsection>
      <title>Special Considerations</title>

      <para>
        Some resources and commands (such as the <guilabel>Propagate</guilabel> command <guilabel>Parameter</guilabel> argument)
        only accept a single parameter as input; in this context the
      </para>

      <para>
        <guilabel>ParameterSelectDialog</guilabel> only allows one parameter in the <guilabel>Selected Value(s)</guilabel> 
        list and does not allow use of the UP, DN, and => buttons.
      </para>

      <para>
        In some instances (such as in the <guilabel>Vary</guilabel> command), only parameters that are also fields 
        (and so can be set in the <guilabel>Mission Sequence</guilabel>) can be used. In this case only the allowed 
        parameters will be shown in the <guilabel>Object Properties</guilabel> list.
      </para>

      <para>
        In the <guilabel>Propagate</guilabel> command <guilabel>Parameter</guilabel> argument, only parameters of 
        <guilabel>Spacecraft</guilabel> can be used. In this case only <guilabel>Spacecraft</guilabel> will be shown in the <guilabel>Object Type</guilabel> list.
      </para>
    </refsection>
  </refsection>

  <refsection>
    <title>Examples</title>

    <informalexample>
      <para>
        Using parameters in the Mission Sequence:
      </para>

      <programlisting>
        <code>
  Create Spacecraft aSat
  Create Propagator aProp
  Create ReportFile aReport

  BeginMissionSequence

  % propagate for 100 steps
  For i=1:100
  Propagate aProp(aSat)
  % write four parameters (one standalone, three coordinate-system-dependent) to a file
  Report aReport aSat.TAIGregorian aSat.EarthFixed.X aSat.EarthFixed.Y aSat.EarthFixed.Z
  EndFor
  Using parameters as plot data:
  Create Spacecraft aSat
  Create Propagator aProp

  Create XYPlot aPlot
  aPlot.XVariable = aSat.TAIModJulian
  aPlot.YVariables = {aSat.Earth.Altitude, aSat.Earth.ECC}

  BeginMissionSequence

  % propagate for 100 steps
  For i=1:100
    Propagate aProp(aSat)
  EndFor
        </code>
      </programlisting>
    </informalexample>

    <informalexample>
      <para>
        Using parameters as stopping conditions:
      </para>

      <programlisting>
        <code>
  Create Spacecraft aSat
  aSat.SMA = 6678

  Create ForceModel anFM
  anFM.Drag.AtmosphereModel = MSISE90

  Create Propagator aProp
  aProp.FM = anFM

  BeginMissionSequence

  Propagate aProp(aSat) {aSat.Earth.Altitude = 100, aSat.ElapsedDays = 365}
        </code>
      </programlisting>
    </informalexample>
  </refsection>
</refentry>
