%  Script Mission - Finite Burn Examples  
%
%  This script demonstrates how to set up tanks and thrusters, and use them
%  in a finite maneuver sequence.  
%


%----------------------------------------
%---------- Spacecraft
%----------------------------------------

% -------------------------------------------------------------------------
% --------------------------- Create Objects ------------------------------
% -------------------------------------------------------------------------

%  Create a default spacecraft
Create Spacecraft Sc;
GMAT Sc.DateFormat = TAIModJulian;
GMAT Sc.Epoch = '21545';
GMAT Sc.CoordinateSystem = EarthMJ2000Eq;
GMAT Sc.DisplayStateType = Cartesian;
GMAT Sc.X = 7100;
GMAT Sc.Y = 0;
GMAT Sc.Z = 1300;
GMAT Sc.VX = 0;
GMAT Sc.VY = 7.35;
GMAT Sc.VZ = 1;
GMAT Sc.DryMass = 850;
GMAT Sc.Cd = 2.2;
GMAT Sc.Cr = 1.8;
GMAT Sc.DragArea = 15;
GMAT Sc.SRPArea = 1;
GMAT Sc.Tanks = {tank1};
GMAT Sc.Thrusters = {engine1};
GMAT Sc.NAIFId = -123456789;
GMAT Sc.NAIFIdReferenceFrame = -123456789;
GMAT Sc.Id = 'SatId';
GMAT Sc.Attitude = CoordinateSystemFixed;
GMAT Sc.ModelFile = '../data/vehicle/models/aura.3ds';
GMAT Sc.ModelOffsetX = 0;
GMAT Sc.ModelOffsetY = 0;
GMAT Sc.ModelOffsetZ = 0;
GMAT Sc.ModelRotationX = 0;
GMAT Sc.ModelRotationY = 0;
GMAT Sc.ModelRotationZ = 0;
GMAT Sc.ModelScale = 3;
GMAT Sc.AttitudeDisplayStateType = 'Quaternion';
GMAT Sc.AttitudeRateDisplayStateType = 'AngularVelocity';
GMAT Sc.AttitudeCoordinateSystem = 'EarthMJ2000Eq';
GMAT Sc.Q1 = 0;
GMAT Sc.Q2 = 0;
GMAT Sc.Q3 = 0;
GMAT Sc.Q4 = 1;
GMAT Sc.EulerAngleSequence = '321';
GMAT Sc.AngularVelocityX = 0;
GMAT Sc.AngularVelocityY = 0;
GMAT Sc.AngularVelocityZ = 0;

%----------------------------------------
%---------- Hardware Components
%----------------------------------------

%  Create a fuel tank and name it tank1
%          Here we create a fuel tank and set up its physical properties
%          including Temperature, Fuel Mass, Fuel Density etc.
Create FuelTank tank1;
GMAT tank1.AllowNegativeFuelMass = false;
GMAT tank1.FuelMass = 725;
GMAT tank1.Pressure = 1200;
GMAT tank1.Temperature = 20;
GMAT tank1.RefTemperature = 12;
GMAT tank1.Volume = 0.8;
GMAT tank1.FuelDensity = 1029;
GMAT tank1.PressureModel = PressureRegulated;

%  Create a thruster
%         Here we create a thruster and tell the thruster which tank to
%         draw fuel from.  We also set up the direction of the thruster.
%         Currently, you specify the thruster orientation with respect to
%         the spacecraft VNB or EarthMJ2000Eq systems.  This will change
%         when attitude capabilities are added to GMAT.
Create Thruster engine1;
GMAT engine1.CoordinateSystem = Local;
GMAT engine1.Origin = Earth;
GMAT engine1.Axes = VNB;
GMAT engine1.ThrustDirection1 = 1;
GMAT engine1.ThrustDirection2 = 0;
GMAT engine1.ThrustDirection3 = 0;
GMAT engine1.DutyCycle = 1;
GMAT engine1.ThrustScaleFactor = 1;
GMAT engine1.DecrementMass = false;
GMAT engine1.Tank = {tank1};
GMAT engine1.GravitationalAccel = 9.810000000000001;
GMAT engine1.C1 = 70;
GMAT engine1.C2 = 0;
GMAT engine1.C3 = 0;
GMAT engine1.C4 = 0;
GMAT engine1.C5 = 0;
GMAT engine1.C6 = 0;
GMAT engine1.C7 = 0;
GMAT engine1.C8 = 0;
GMAT engine1.C9 = 0;
GMAT engine1.C10 = 0;
GMAT engine1.C11 = 0;
GMAT engine1.C12 = 0;
GMAT engine1.C13 = 0;
GMAT engine1.C14 = 0;
GMAT engine1.C15 = 0;
GMAT engine1.C16 = 0;
GMAT engine1.K1 = 1500;
GMAT engine1.K2 = 0;
GMAT engine1.K3 = 0;
GMAT engine1.K4 = 0;
GMAT engine1.K5 = 0;
GMAT engine1.K6 = 0;
GMAT engine1.K7 = 0;
GMAT engine1.K8 = 0;
GMAT engine1.K9 = 0;
GMAT engine1.K10 = 0;
GMAT engine1.K11 = 0;
GMAT engine1.K12 = 0;
GMAT engine1.K13 = 0;
GMAT engine1.K14 = 0;
GMAT engine1.K15 = 0;
GMAT engine1.K16 = 0;

%----------------------------------------
%---------- ForceModels
%----------------------------------------



%  Create a force model
Create ForceModel fm;
GMAT fm.CentralBody = Earth;
GMAT fm.PointMasses = {Earth};
GMAT fm.Drag = None;
GMAT fm.SRP = Off;
GMAT fm.RelativisticCorrection = Off;
GMAT fm.ErrorControl = RSSStep;

%----------------------------------------
%---------- Propagators
%----------------------------------------

%  Create a propagator
Create Propagator prop;
GMAT prop.FM = fm;
GMAT prop.Type = RungeKutta89;
GMAT prop.InitialStepSize = 60;
GMAT prop.Accuracy = 9.999999999999999e-012;
GMAT prop.MinStep = 0.001;
GMAT prop.MaxStep = 2700;
GMAT prop.MaxStepAttempts = 50;
GMAT prop.StopIfAccuracyIsViolated = true;

%----------------------------------------
%---------- Burns
%----------------------------------------

%  Create a thruster
%         Here we create a finite maneuver.  We create the maneuver and
%         give it a name first.  We need to tell the maneuver which
%         thrusters to use, and which tank to draw from.  Currently you can
%         have multiple thrusters, but only one tank, from which both
%         thrusters draw fuel.  We can also apply a burn scale factor.  The
%         thrust from each thruster is added together, and the sum is
%         multiplied by BurnScaleFactor.
Create FiniteBurn fb;
GMAT fb.Thrusters = {engine1};

%----------------------------------------
%---------- Subscribers
%----------------------------------------

%  Create an XYPlot  
Create XYPlot energy;
GMAT energy.SolverIterations = Current;
GMAT energy.UpperLeft = [ 0.2877358490566038 0 ];
GMAT energy.Size = [ 0.360377358490566 0.4521410579345088 ];
GMAT energy.RelativeZOrder = 55;
GMAT energy.XVariable = Sc.CurrA1MJD;
GMAT energy.YVariables = {Sc.Energy};
GMAT energy.ShowGrid = true;
GMAT energy.ShowPlot = true;

Create XYPlot SMAvsTime;
GMAT SMAvsTime.SolverIterations = Current;
GMAT SMAvsTime.UpperLeft = [ 0.2877358490566038 0.455919395465995 ];
GMAT SMAvsTime.Size = [ 0.360377358490566 0.4521410579345088 ];
GMAT SMAvsTime.RelativeZOrder = 73;
GMAT SMAvsTime.XVariable = Sc.CurrA1MJD;
GMAT SMAvsTime.YVariables = {Sc.SMA};
GMAT SMAvsTime.ShowGrid = true;
GMAT SMAvsTime.ShowPlot = true;

%  Create an OpenGL Plot  
Create OrbitView SatOpenGL;
GMAT SatOpenGL.SolverIterations = Current;
GMAT SatOpenGL.UpperLeft = [ 0.6207547169811321 0.2657430730478589 ];
GMAT SatOpenGL.Size = [ 0.3613207547169811 0.4534005037783375 ];
GMAT SatOpenGL.RelativeZOrder = 75;
GMAT SatOpenGL.Add = {Sc, Earth};
GMAT SatOpenGL.CoordinateSystem = EarthMJ2000Eq;
GMAT SatOpenGL.DrawObject = [ true true ];
GMAT SatOpenGL.OrbitColor = [ 255 32768 ];
GMAT SatOpenGL.TargetColor = [ 8421440 0 ];
GMAT SatOpenGL.DataCollectFrequency = 1;
GMAT SatOpenGL.UpdatePlotFrequency = 50;
GMAT SatOpenGL.NumPointsToRedraw = 0;
GMAT SatOpenGL.ShowPlot = true;
GMAT SatOpenGL.ViewPointReference = Earth;
GMAT SatOpenGL.ViewPointVector = [ 10000 10000 10000 ];
GMAT SatOpenGL.ViewDirection = Earth;
GMAT SatOpenGL.ViewScaleFactor = 5;
GMAT SatOpenGL.ViewUpCoordinateSystem = EarthMJ2000Eq;
GMAT SatOpenGL.ViewUpAxis = Z;
GMAT SatOpenGL.CelestialPlane = Off;
GMAT SatOpenGL.XYPlane = On;
GMAT SatOpenGL.WireFrame = Off;
GMAT SatOpenGL.Axes = On;
GMAT SatOpenGL.Grid = Off;
GMAT SatOpenGL.SunLine = Off;
GMAT SatOpenGL.UseInitialView = On;
GMAT SatOpenGL.StarCount = 7000;
GMAT SatOpenGL.EnableStars = On;
GMAT SatOpenGL.EnableConstellations = On;

% -------------------------------------------------------------------------
% --------------------------- Mission Sequence ----------------------------
% -------------------------------------------------------------------------
BeginMissionSequence;
%  Propagate for 1/10 of a day, without thrusters on.
Propagate 'Prop 0.1 Days' prop(Sc) {Sc.ElapsedSecs = 8640};

%  Turn on thrusters....they will remain on through all events until the
%  "EndFiniteBurn fb(Sc)" command is executed.
BeginFiniteBurn 'Turn on Thruster' fb(Sc);

%  Propagate for 5 days, while thrusters are turned on.
Propagate 'Prop 1 day' prop(Sc) {Sc.ElapsedDays = 1};

%  Turn off thrusters   
EndFiniteBurn 'Turn off Thruster' fb(Sc);

%  Propagate for 5 days
Propagate 'Prop 1 Day' prop(Sc) {Sc.ElapsedDays = 1};


