
%%-----------------------------------------------------------
%%------------------- Define Spacecraft --------------------
%%-----------------------------------------------------------
Create Spacecraft LRO;
GMAT LRO.DateFormat = UTCGregorian;

GMAT LRO.CoordinateSystem = EarthMJ2000Eq;
GMAT LRO.DisplayStateType = Cartesian;

Create Spacecraft ImpactSat ImpactSatInit CanonImpactSat
ImpactSat.DateFormat = UTCGregorian
ImpactSat.CoordinateSystem = EarthMJ2000Eq;

Create Spacecraft ImpactSat_MoonFixed
ImpactSat_MoonFixed.DateFormat = UTCGregorian
ImpactSat_MoonFixed.CoordinateSystem = MoonFixed;
ImpactSat_MoonFixed.DisplayStateType = Cartesian;

%%-----------------------------------------------------------
%%------------------- Define Spacecraft --------------------
%%-----------------------------------------------------------
Create Spacecraft LCROSS LCROSSInit;
GMAT LCROSS.DateFormat = TAIModJulian;
GMAT LCROSS.Epoch = 21545.000000000;
GMAT LCROSS.CoordinateSystem = EarthMJ2000Eq;
GMAT LCROSS.DisplayStateType = Cartesian;
GMAT LCROSS.DryMass = 850;
GMAT LCROSS.Cd = 2.2;
GMAT LCROSS.Cr = 1.8;
GMAT LCROSS.DragArea = 15;
GMAT LCROSS.SRPArea = 1;

%%------------------------------------------------------------
%%------------------- Define Propagators --------------------
%%------------------------------------------------------------
 
%% Create a force model for near Lunar propagation
Create ForceModel NearMoonProp_ForceModel;
GMAT NearMoonProp_ForceModel.CentralBody = Luna;
%GMAT NearMoonProp_ForceModel.PrimaryBodies =
GMAT NearMoonProp_ForceModel.PointMasses = {Sun, Earth, Jupiter, Luna};
GMAT NearMoonProp_ForceModel.Drag = None;
GMAT NearMoonProp_ForceModel.SRP = On;
GMAT NearMoonProp_ForceModel.ErrorControl = RSSStep;
GMAT NearMoonProp_ForceModel.SRP.Flux = 1367;
GMAT NearMoonProp_ForceModel.SRP.Nominal_Sun = 149597870.691;

%% Create a force model for near Lunar propagation
%Create ForceModel NearMoonProp_ForceModel;
%%GMAT NearMoonProp_ForceModel.CentralBody = Luna;
%GMAT NearMoonProp_ForceModel.PrimaryBodies =
%GMAT NearMoonProp_ForceModel.PointMasses = {Sun, Earth, Luna};
%GMAT NearMoonProp_ForceModel.Drag = None;
%GMAT NearMoonProp_ForceModel.SRP = On;
%GMAT NearMoonProp_ForceModel.ErrorControl = RSSStep;
%GMAT NearMoonProp_ForceModel.Luna.Flux = 1367;
%GMAT NearMoonProp_ForceModel.Luna.Nominal_Sun = 149597870.691;

%% Create a force model for deep space propagation
Create ForceModel EarthFull_ForceModel;
GMAT EarthFull_ForceModel.CentralBody = Earth;
GMAT EarthFull_ForceModel.PrimaryBodies = {Earth};
GMAT EarthFull_ForceModel.PointMasses = {Sun, Luna, Jupiter};
GMAT EarthFull_ForceModel.Drag = None;
GMAT EarthFull_ForceModel.SRP = On;
GMAT EarthFull_ForceModel.ErrorControl = RSSStep;
GMAT EarthFull_ForceModel.Earth.Degree = 4;
GMAT EarthFull_ForceModel.Earth.Order = 0;
GMAT EarthFull_ForceModel.Earth.PotentialFile = 'JGM2.cof';
GMAT EarthFull_ForceModel.Earth.Flux = 1367;
GMAT EarthFull_ForceModel.Earth.Nominal_Sun = 149597870.691;

%----------------------------------------
%---------- Propagators
%----------------------------------------

Create Propagator NearMoonProp;
GMAT NearMoonProp.FM = NearMoonProp_ForceModel;
GMAT NearMoonProp.Type = PrinceDormand78;  %PrinceDormand45;   %PrinceDormand78;
GMAT NearMoonProp.InitialStepSize = 60;
GMAT NearMoonProp.Accuracy = 1e-09;
GMAT NearMoonProp.MinStep = 0.001;
GMAT NearMoonProp.MaxStep = 20000;
GMAT NearMoonProp.MaxStepAttempts = 50;

Create Propagator EarthFull;
GMAT EarthFull.FM = EarthFull_ForceModel;
GMAT EarthFull.Type = RungeKutta56;  %PrinceDormand45;  %PrinceDormand78;
GMAT EarthFull.InitialStepSize = 60; 
GMAT EarthFull.Accuracy = 1e-09;
GMAT EarthFull.MinStep = 0.001;
GMAT EarthFull.MaxStep = 86400;
GMAT EarthFull.MaxStepAttempts = 50; 

%%------------------------------------------------------------
%%------------------- Create Maneuvers-- --------------------
%%------------------------------------------------------------
Create ImpulsiveBurn EDUSdv;
GMAT EDUSdv.Origin = Earth;
GMAT EDUSdv.Axes = VNB;
GMAT EDUSdv.Element1 = 0;
GMAT EDUSdv.Element2 = 0;
GMAT EDUSdv.Element3 = 0;

Create ImpulsiveBurn EDUSdv_J2000;
GMAT EDUSdv_J2000.Origin = Earth;
GMAT EDUSdv_J2000.Axes = MJ2000Eq;
GMAT EDUSdv_J2000.Element1 = 0;
GMAT EDUSdv_J2000.Element2 = 0;
GMAT EDUSdv_J2000.Element3 = 0;

Create ImpulsiveBurn LCM1;
GMAT LCM1.Origin = Earth;
GMAT LCM1.Axes = VNB;
GMAT LCM1.Element1 = 0;
GMAT LCM1.Element2 = 0;
GMAT LCM1.Element3 = 0;

Create ImpulsiveBurn LCM2;
GMAT LCM2.Origin = Earth;
GMAT LCM2.Axes = VNB
GMAT LCM2.Element1 = 0;
GMAT LCM2.Element2 = 0;
GMAT LCM2.Element3 = 0;

Create ImpulsiveBurn dV2
dV2.Origin = Earth
dV2.Axes   = MJ2000Eq;

Create ImpulsiveBurn dV3;
dV3.Origin = Earth
dV3.Axes   = MJ2000Eq;


Create ImpulsiveBurn dVatMoon;
GMAT dVatMoon.Origin = Luna;
GMAT dVatMoon.Axes = MJ2000Eq;
GMAT dVatMoon.Element1 = 0;
GMAT dVatMoon.Element2 = 0;
GMAT dVatMoon.Element3 = 0;

%----------------------------------------
%---------- Variables, Arrays, Strings
%----------------------------------------
%----- These are variables that are just useful -------
Create Variable LoopCounter PositionError VelocityError Cost LCM1Mag LCM2Mag EDUSdvMag EDMdvEpoch LCM1Epoch LCM2Epoch;
Create Variable A1ImpactEpoch LoopCounter2 ConstraintError dx dy dz dVx dVy dVz SF_EDUSx dVatMoonMag;
Create Variable  Min_Cost UseGMAToutput_Flag RefEpoch PropEpoch ET_EDUSdV ET_LCM1;
Create Variable ET_LCM2 ET_Coll A1CollEpoch VXdiff VYdiff VZdiff I DeltaVx DeltaVy DeltaVz;
Create Variable PosError VelError EDUS_J2000_DVx EDUS_J2000_DVy EDUS_J2000_DVz DV1_J2000_DVx DV1_J2000_DVy DV1_J2000_DVz DV2_J2000_DVx DV2_J2000_DVy;
Create Variable DV2_J2000_DVz SteveReferenceEpoch;
Create Variable Res LunarSMA DesiredSMA ConError BPlaneAngle PeriselentAlt Error1 Error2 Error3 Loop2;
Create Variable NumSatRevs NumMoonRevs NumCrossings DotProduct pi DesiredAOP Loop1 TargetUTCModJulian
Create Variable dVX dVY dVZ UTCGregorian LCROSSEpoch ET_dv3
Create Array X[15,1];

Create Variable AOP_J2000 LCM2Mag_mps


%----- Strings ---------
Create String EmptyLine NewIterate PostTLI PreEDUS PostEDUS PreLCM1 PostLCM1 PreLCM2 PostLCM2 Periselene;
Create String EDUSData BPlaneData LCM1Sol LCM2Sol PostLCM2Data ImpactSatData ImpactData
GMAT EmptyLine = ' '
GMAT NewIterate = '------ Begin New Iterate Data -------'
EDUSData   = '------ EDUS Maneuver Data -------'
BPlaneData = '------  B-Plane  Data -------'
LCM1Sol   = '------ LCM1 Maneuver Data -------'
LCM2Sol   = '------ LCM2 Maneuver Data -------'
PostLCM2Data = '------ Post LCM2 State -------'
ImpactData =   '------ Impact Data -------'

ImpactSatData = '---------- Impact Sat Data --------------'


%----------------------------------------
%---------- Coordinate Systems
%----------------------------------------

Create CoordinateSystem EarthMJ2000Eq;
GMAT EarthMJ2000Eq.Origin = Earth;
GMAT EarthMJ2000Eq.Axes = MJ2000Eq;
GMAT EarthMJ2000Eq.UpdateInterval = 60;
GMAT EarthMJ2000Eq.OverrideOriginInterval = false;

Create CoordinateSystem EarthMJ2000Ec;
GMAT EarthMJ2000Ec.Origin = Earth;
GMAT EarthMJ2000Ec.Axes = MJ2000Ec;
GMAT EarthMJ2000Ec.UpdateInterval = 60;
GMAT EarthMJ2000Ec.OverrideOriginInterval = false;

Create CoordinateSystem EarthFixed;
GMAT EarthFixed.Origin = Earth;
GMAT EarthFixed.Axes = BodyFixed;
GMAT EarthFixed.UpdateInterval = 60;
GMAT EarthFixed.OverrideOriginInterval = false;

%%------------------------------------------------------------
%%------------------- Create Coordinate Systems -------------
%%------------------------------------------------------------

Create CoordinateSystem MoonFixed;
GMAT MoonFixed.Origin = Luna;
GMAT MoonFixed.Axes = BodyFixed;
GMAT MoonFixed.UpdateInterval = 60;
GMAT MoonFixed.OverrideOriginInterval = false;

Create CoordinateSystem MoonFK5;
GMAT MoonFK5.Origin = Luna;
GMAT MoonFK5.Axes = MJ2000Eq;
GMAT MoonFK5.UpdateInterval = 60;
GMAT MoonFK5.OverrideOriginInterval = false;

Create CoordinateSystem MoonEarthRot;
GMAT MoonEarthRot.Origin = Luna;
GMAT MoonEarthRot.Axes = ObjectReferenced;
GMAT MoonEarthRot.UpdateInterval = 60;
GMAT MoonEarthRot.OverrideOriginInterval = false;
GMAT MoonEarthRot.XAxis = R;
GMAT MoonEarthRot.ZAxis = N;
GMAT MoonEarthRot.Primary = Earth;
GMAT MoonEarthRot.Secondary = Luna;

Create CoordinateSystem EarthMoonRot;
GMAT EarthMoonRot.Origin = Earth;
GMAT EarthMoonRot.Axes = ObjectReferenced;
GMAT EarthMoonRot.UpdateInterval = 60;
GMAT EarthMoonRot.OverrideOriginInterval = false;
GMAT EarthMoonRot.XAxis = R;
GMAT EarthMoonRot.ZAxis = N;
GMAT EarthMoonRot.Primary = Earth;
GMAT EarthMoonRot.Secondary = Luna;

Create CoordinateSystem LunaFixed;
GMAT LunaFixed.Origin = Luna;
GMAT LunaFixed.Axes = BodyFixed;
GMAT LunaFixed.UpdateInterval = 60;
GMAT LunaFixed.OverrideOriginInterval = false;

Create CoordinateSystem MoonInertial
MoonInertial.Origin = Luna;
MoonInertial.Axes   = BodyInertial;

%%-----------------------------------------------------------------
%%-----------------Create and Setup the Solvers -------------------
%%-----------------------------------------------------------------

Create DifferentialCorrector DC;
GMAT DC.ShowProgress = true;
GMAT DC.ReportStyle = Normal;
GMAT DC.MaximumIterations = 2500; 
GMAT DC.DerivativeMethod = ForwardDifference;

Create DifferentialCorrector DC_central;
GMAT DC_central.ShowProgress = true;
GMAT DC_central.ReportStyle = Normal;
GMAT DC_central.MaximumIterations = 2500; 
GMAT DC_central.DerivativeMethod = ForwardDifference;

Create VF13ad VF13ad1;
GMAT VF13ad1.ShowProgress = true;
GMAT VF13ad1.ReportStyle = Normal;
GMAT VF13ad1.MaximumIterations = 200;
GMAT VF13ad1.ObjectiveFunction = SDObjective;
GMAT VF13ad1.Tolerance = 1e-004;


%%------------------------------------------------------------
%%------------------- Create Plots and Reports --------------
%%------------------------------------------------------------
Create OpenGLPlot EarthView;
GMAT EarthView.SolverIterations = All; %Current or None are other options
GMAT EarthView.Add = {LCROSS, Luna, Earth, ImpactSat}; 
GMAT EarthView.OrbitColor = [ 255 12632256  12256  243234 ];
GMAT EarthView.TargetColor = [ 8421440 1234 23445  123124];
GMAT EarthView.CoordinateSystem = EarthMJ2000Eq; 
GMAT EarthView.ViewPointReference = Earth;
GMAT EarthView.ViewPointVector = [ 30000 30000 30000 ];
GMAT EarthView.ViewDirection = Earth;
GMAT EarthView.ViewScaleFactor = 35;
GMAT EarthView.ViewUpCoordinateSystem = EarthMJ2000Eq;
GMAT EarthView.ViewUpAxis = Z;
GMAT EarthView.CelestialPlane = Off;
GMAT EarthView.XYPlane = Off;
GMAT EarthView.WireFrame = Off;
GMAT EarthView.Axes = Off;
GMAT EarthView.Grid = Off;
GMAT EarthView.SunLine = Off;
GMAT EarthView.UseInitialView = Off;
GMAT EarthView.DataCollectFrequency = 3;
GMAT EarthView.UpdatePlotFrequency = 50;
GMAT EarthView.NumPointsToRedraw = 0;
GMAT EarthView.ShowPlot = false;

Create OpenGLPlot MoonView;
GMAT MoonView.SolverIterations = Current;
GMAT MoonView.Add = {LCROSS, Luna, Earth};
GMAT MoonView.OrbitColor = [ 255 12632256 65280   ];
GMAT MoonView.TargetColor = [ 8421440  8421440 32423 ];
GMAT MoonView.CoordinateSystem = MoonEarthRot;
GMAT MoonView.ViewPointReference = Luna;
GMAT MoonView.ViewPointVector = [ 30000 30000 30000 ];
GMAT MoonView.ViewDirection = Luna;
GMAT MoonView.ViewScaleFactor = 1;
GMAT MoonView.ViewUpCoordinateSystem = MoonEarthRot;
GMAT MoonView.ViewUpAxis = Z;
GMAT MoonView.CelestialPlane = Off;
GMAT MoonView.XYPlane = Off;
GMAT MoonView.WireFrame = Off;
GMAT MoonView.Axes = On;
GMAT MoonView.Grid = Off;
GMAT MoonView.SunLine = Off;
GMAT MoonView.UseInitialView = On;
GMAT MoonView.DataCollectFrequency = 3;
GMAT MoonView.UpdatePlotFrequency = 50;
GMAT MoonView.NumPointsToRedraw = 0;
GMAT MoonView.ShowPlot = true;

Create XYPlot PositionErrorPlot;
GMAT PositionErrorPlot.SolverIterations = Current;
GMAT PositionErrorPlot.XVariable = LoopCounter;
GMAT PositionErrorPlot.YVariables = {PositionError};
GMAT PositionErrorPlot.ShowGrid = true;
GMAT PositionErrorPlot.ShowPlot = false;

Create XYPlot VelocityErrorPlot;
GMAT VelocityErrorPlot.SolverIterations = Current;
GMAT VelocityErrorPlot.XVariable = LoopCounter;
GMAT VelocityErrorPlot.YVariables = {VelocityError};
GMAT VelocityErrorPlot.ShowGrid = true;
GMAT VelocityErrorPlot.ShowPlot =  false;

Create XYPlot CostPlot;
GMAT CostPlot.SolverIterations = Current;
GMAT CostPlot.XVariable = LoopCounter;
GMAT CostPlot.YVariables = {Cost, LCM1Mag, LCM2Mag};
GMAT CostPlot.ShowGrid = true;
GMAT CostPlot.ShowPlot = false;


Create XYPlot PositionErrorPlot2;
GMAT PositionErrorPlot2.SolverIterations = Current;
GMAT PositionErrorPlot2.XVariable = LoopCounter2
GMAT PositionErrorPlot2.YVariables = {PositionError};
GMAT PositionErrorPlot2.ShowGrid = true;
GMAT PositionErrorPlot2.ShowPlot =  true;


Create XYPlot VelocityErrorPlot2;
GMAT VelocityErrorPlot2.SolverIterations = Current;
GMAT VelocityErrorPlot2.XVariable = LoopCounter2
GMAT VelocityErrorPlot2.YVariables = {VelocityError};
GMAT VelocityErrorPlot2.ShowGrid = true;
GMAT VelocityErrorPlot2.ShowPlot =  true;


Create XYPlot CostPlot2;
GMAT CostPlot2.SolverIterations = Current;
GMAT CostPlot2.XVariable =  LoopCounter2
GMAT CostPlot2.YVariables = {Cost, LCM1Mag, LCM2Mag};
GMAT CostPlot2.ShowGrid = true;
GMAT CostPlot2.ShowPlot = true;

Create XYPlot Distances
Distances.XVariable = {LCROSS.UTCModJulian}
Distances.YVariables    = {LCROSS.RMAG, LCROSS.Luna.RMAG}
Distances.ShowPlot = false;

Create ReportFile IterateData;
GMAT IterateData.SolverIterations = Current;
GMAT IterateData.Filename = IterateData.txt;
GMAT IterateData.Precision = 16;
GMAT IterateData.WriteHeaders = On;
GMAT IterateData.LeftJustify = On;
GMAT IterateData.ZeroFill = Off;
GMAT IterateData.ColumnWidth = 20;

Create ReportFile Check;
GMAT Check.SolverIterations = Current;
GMAT Check.Precision = 16;
GMAT Check.WriteHeaders = On;
GMAT Check.LeftJustify = On;
GMAT Check.ZeroFill = Off;
GMAT Check.ColumnWidth = 20;

Create ReportFile StateVectorData;
GMAT StateVectorData.SolverIterations = Current;
GMAT StateVectorData.Filename = StateVectorData.txt;
GMAT StateVectorData.Precision = 16;
GMAT StateVectorData.WriteHeaders = On;
GMAT StateVectorData.LeftJustify = On;
GMAT StateVectorData.ZeroFill = Off;
GMAT StateVectorData.ColumnWidth = 20;

Create ReportFile Data;
GMAT Data.SolverIterations = None;
GMAT Data.Filename = Data.txt;
GMAT Data.Precision = 16;
GMAT Data.WriteHeaders = On;
GMAT Data.LeftJustify = On;
GMAT Data.ZeroFill = On;
GMAT Data.ColumnWidth = 30;

Create ReportFile Solution


Create ReportFile LCM2Data;
GMAT LCM2Data.SolverIterations = Current;
GMAT LCM2Data.Filename = LCM2Data.txt;
GMAT LCM2Data.Precision = 16;
GMAT LCM2Data.WriteHeaders = On;
GMAT LCM2Data.LeftJustify = On;
GMAT LCM2Data.ZeroFill = Off;
GMAT LCM2Data.ColumnWidth = 20;

Create ReportFile LCM1Data;
GMAT LCM1Data.SolverIterations = Current;
GMAT LCM1Data.Filename = LCM1Data.txt;
GMAT LCM1Data.Precision = 16;
GMAT LCM1Data.WriteHeaders = On;
GMAT LCM1Data.LeftJustify = On;
GMAT LCM1Data.ZeroFill = Off;
GMAT LCM1Data.ColumnWidth = 20;

Create ReportFile EDUSdvData;
GMAT EDUSdvData.SolverIterations = Current;
GMAT EDUSdvData.Filename = EDUSdvData.txt;
GMAT EDUSdvData.Precision = 16;
GMAT EDUSdvData.WriteHeaders = On;
GMAT EDUSdvData.LeftJustify = On;
GMAT EDUSdvData.ZeroFill = Off;
GMAT EDUSdvData.ColumnWidth = 20;

Create ReportFile SolutionData;
GMAT SolutionData.SolverIterations = Current;
GMAT SolutionData.Filename = SolutionData.txt;
GMAT SolutionData.Precision = 16;
GMAT SolutionData.WriteHeaders = On;
GMAT SolutionData.LeftJustify = On;
GMAT SolutionData.ZeroFill = Off;
GMAT SolutionData.ColumnWidth = 20;

Create ReportFile CollocationData;
GMAT CollocationData.SolverIterations = Current;
GMAT CollocationData.Filename = CollocationData.txt;
GMAT CollocationData.Precision = 16;
GMAT CollocationData.WriteHeaders = On;
GMAT CollocationData.LeftJustify = On;
GMAT CollocationData.ZeroFill = Off;
GMAT CollocationData.ColumnWidth = 20;

Create ReportFile CostData;
GMAT CostData.SolverIterations = Current;
GMAT CostData.Filename = CostData.txt;
GMAT CostData.Precision = 16;
GMAT CostData.WriteHeaders = On;
GMAT CostData.LeftJustify = On;
GMAT CostData.ZeroFill = Off;
GMAT CostData.ColumnWidth = 20;


Create ReportFile SensitivityData;
GMAT SensitivityData.SolverIterations = Current;
GMAT SensitivityData.Filename = ReportFile1.txt;
GMAT SensitivityData.Precision = 16;
GMAT SensitivityData.Add = {LRO.A1ModJulian, LRO.EarthMJ2000Eq.X};
GMAT SensitivityData.WriteHeaders = On;
GMAT SensitivityData.LeftJustify = On;
GMAT SensitivityData.ZeroFill = Off;
GMAT SensitivityData.ColumnWidth = 20;

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%-------------------------- Mission Sequence ----------------------------
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
BeginMissionSequence
%---- Initializations
GMAT LCROSS = LRO;
LunarSMA = 384410.3;
pi = 3.14159265358979;

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%  Input state information and initial guesses for optimization variables
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

BeginScript
      
   %---- Define LCROSS physical properties
   GMAT LRO.DryMass = 3256.8;
   GMAT LRO.Cr = 1.4;
   GMAT LRO.SRPArea = 42.354;
      
   %---- Define the initial conditions for LRO
   GMAT LRO.Epoch = '19 Jun 2009 01:31:05.920 ';
   GMAT LRO.X  = 20747.68418000;
   GMAT LRO.Y  = 50758.29345000 ;
   GMAT LRO.Z  = 8229.21836200;
   GMAT LRO.VX = 0.11610208;
   GMAT LRO.VY = 3.32267120  ;
   GMAT LRO.VZ = 1.05827656;
   GMAT LCROSS = LRO;
   GMAT RefEpoch = LRO.A1ModJulian;
   GMAT ImpactSat = LRO;
                        
   %---- Define the MoonFixed impact location and Epoch
   GMAT ImpactSat_MoonFixed.Epoch = '9 Oct 2009 11:30:00.000';
   ImpactSat_MoonFixed.X = 125.734;       
   ImpactSat_MoonFixed.Y = -89.636; 
   ImpactSat_MoonFixed.Z = -1730.522; 

   %---- Define the initial conditions for ImpactSat
   GMAT ImpactSat.Epoch = ImpactSat_MoonFixed.Epoch;
   GMAT ImpactSat.X = ImpactSat_MoonFixed.EarthMJ2000Eq.X;
   GMAT ImpactSat.Y = ImpactSat_MoonFixed.EarthMJ2000Eq.Y;
   GMAT ImpactSat.Z = ImpactSat_MoonFixed.EarthMJ2000Eq.Z;

   %---- Define the desired Resonance condition
   NumSatRevs  = 3;
   NumMoonRevs = 4;
   Res = NumSatRevs/NumMoonRevs;  
   DesiredSMA    = 473722.2056;%((398600.4415)^(1/3)*(NumMoonRevs/NumSatRevs/2/pi*2360551.68)^(2/3))*1.00;  
   DesiredAOP    = 35.4553172712919;         
   AOP_J2000     = 35.4553172712919; 
   BPlaneAngle   = 79.5592 ;             
   PeriselentAlt = 3318.092;                
                            
   %---- Define intial guess for EDUSdv  
   GMAT ET_EDUSdV = (0/86400);
   EDUSdv.Element1 = 0.00001; 
   EDUSdv.Element2 = 0.00001;  
   EDUSdv.Element3 = 0.00001;
                                 
   %---- Define intial guess for LCM1 
   GMAT ET_LCM1 = 0.905018439982086 + ET_EDUSdV; 
   GMAT LCM1.Element1 =  0.001704940 ;  
   GMAT LCM1.Element2 =  0.005791633 ;  
   GMAT LCM1.Element3 = -0.000661562;        
 
   %---- Define intial guess for LCM2 
   GMAT ET_LCM2 = 33.770;
   GMAT LCM2.Element1 = 0.013391482; 
   GMAT LCM2.Element2 =  -0.007895569 ;  
   GMAT LCM2.Element3 =  0.013918756;  
     
   %---- Define initial guess for Collocation Elapsed Time
   GMAT ET_Coll = 100; 
   ImpactSat.X = 54580.02594841291;
   ImpactSat.Y = 331618.2005005924;
   ImpactSat.Z = 162362.268059963;
   ImpactSat.VX = -0.6416435343925693
   ImpactSat.VY = -0.4568696547646986 
   ImpactSat.VZ = 2.402724393937031;

EndScript;

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%  Report Initial Guess Data to file
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

BeginScript
   Report Check LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ  
   Report Check ET_EDUSdV EDUSdv.Element1 EDUSdv.Element2 EDUSdv.Element3 
   Report Check ET_LCM1 LCM1.Element1 LCM1.Element2 LCM1.Element3 
   Report Check ET_LCM2 LCM2.Element1 LCM2.Element2 LCM2.Element3 
   Report Check dVatMoon.Element1 dVatMoon.Element2 dVatMoon.Element3 
   Report Check ET_Coll 
EndScript

%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%===============================================================================================================
%===============================================================================================================
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%----                      This is the beginning of the mission sequence
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%===============================================================================================================
%===============================================================================================================
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Toggle Distances Off;
Toggle MoonView On;
Toggle EarthView Off;
Toggle PositionErrorPlot Off;
Toggle VelocityErrorPlot Off;
Toggle PositionErrorPlot2 Off;
Toggle VelocityErrorPlot2 Off;
Toggle CostPlot2  Off;

%================================================================================================================
%------------------------------------------------------------------------
%----  Part 1: Find the canonical solution
%------------------------------------------------------------------------
%================================================================================================================

%------------------------------------------------------------------------
%----  Target sequence 1:  Try using EDUS dv to achieve BPlane Coordinates
%------------------------------------------------------------------------

%---- Store LCROSS spacecraft state for later use
   LCM1.Element1 = 0.00380663994953
   LCM1.Element2 = -0.00139743801086
   LCM1.Element3 = 0.00460537200732

LCROSSInit = LCROSS;
Target DC {SolveMode = Solve};  %RunInitialGuess or Solve
 
   %---- Initializations
   GMAT LoopCounter = LoopCounter + 1;
   Report IterateData NewIterate 
   Report IterateData PostTLI LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
   
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- Prop to where EDUS performs maneuver
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
   %----- Propagate LCROSS to EDUS Maneuver and Perform Maneuver
   GMAT PropEpoch = RefEpoch + ET_LCM1;
   Propagate EarthFull(LCROSS) {LCROSS.ElapsedDays = 1.2};
      
   Report IterateData PreEDUS LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
   %---- Vary and perform the maneuver
   Vary DC(LCM1.Element1 = LCM1.Element1, {Perturbation = .000001, MaxStep = .005, Upper = .05});
   Vary DC(LCM1.Element2 = LCM1.Element2, {Perturbation = .000001, MaxStep = .005, Upper = .05});
   Vary DC(LCM1.Element3 = LCM1.Element3, {Perturbation = .000001, MaxStep = .005, Upper = .05});
   Maneuver LCM1(LCROSS);
 
   %--- Apply constraint on EDUSdV
   GMAT EDUSdvMag = sqrt(EDUSdv.Element1^2 + EDUSdv.Element2^2 + EDUSdv.Element3^2 );
 
   %---- Report some data
   Report IterateData PostEDUS LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
   Report SolutionData LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
 
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- Prop to periselene
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
   %----- Propagate LCROSS to Epoch of LCM1
   %GMAT PropEpoch = RefEpoch + ET_LCM1;

   %Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
   Report IterateData PreLCM1 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
 
   %----- Propagate LCROSS to Periselene
   Propagate EarthFull(LCROSS) {LCROSS.Luna.Periapsis};
   Report IterateData Periselene LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
   Report IterateData Periselene LCROSS.MoonEarthRot.BVectorAngle LCROSS.Luna.Altitude


   %----- Enforce the Bplane constraints
   Achieve DC(LCROSS.MoonEarthRot.BVectorAngle = BPlaneAngle, {Tolerance = 1}); 
   Achieve DC(LCROSS.Luna.Altitude = PeriselentAlt); 
       
     
EndTarget

%------------------------------------------------------------------------
%----  Target sequence 2:  Shape the orbit by targeting on desired SMA 
%----  and AOP.
%------------------------------------------------------------------------
LCROSS = LCROSSInit;
   LCM1.Element1 = 0.00622892217071
   LCM1.Element2 = -0.00132933207755
   LCM1.Element3 = 0.0048251117781
Target DC_central {SolveMode = Solve }; %RunInitialGuess or Solve
  
    %---- Initializations
    GMAT LoopCounter = LoopCounter + 1; 
    Report IterateData NewIterate 
    Report IterateData PostTLI LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
 
    %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    %---- Prop to where EDUS performs maneuver
    %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    %----- Propagate LCROSS to EDUS Maneuver and Perform Maneuver
    GMAT PropEpoch = RefEpoch + ET_EDUSdV;
    %Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
 
    %---- Perform the maneuver
    %Vary DC_central(EDUSdv.Element1 = EDUSdv.Element1, {Perturbation = .000001, MaxStep = .001, Upper = .09});
    %Vary DC_central(EDUSdv.Element2 = EDUSdv.Element2, {Perturbation = .000001, MaxStep = .001, Upper = .09});
    %Vary DC_central(EDUSdv.Element3 = EDUSdv.Element3, {Perturbation = .000001, MaxStep = .001, Upper = .09});
    Maneuver EDUSdv(LCROSS);
 
    %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    %---- Prop to LCM1 and perform manevuer
    %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   
 
    %----- Propagate LCROSS to Epoch of LCM1
    GMAT PropEpoch = RefEpoch + ET_LCM1;
    Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
 
    %---- Apply maneuver LCM1
    Vary DC_central(LCM1.Element1 = LCM1.Element1, {Perturbation = .000001, MaxStep = .001, Upper = .05});
    Vary DC_central(LCM1.Element2 = LCM1.Element2, {Perturbation = .000001, MaxStep = .001, Upper = .05});
    Vary DC_central(LCM1.Element3 = LCM1.Element3, {Perturbation = .000001, MaxStep = .001, Upper = .05});
    Maneuver LCM1(LCROSS);
 
    %---- Assemble and report some data 
    GMAT LCM1Mag = sqrt(LCM1.Element1^2 + LCM1.Element2^2 + LCM1.Element3^2 );
    Report IterateData PreLCM1 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
    Report SolutionData LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
 
    %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    %---- Prop to periselene
    %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
    %----- Propagate LCROSS to Periselene
    Propagate EarthFull(LCROSS) {LCROSS.Luna.Periapsis};
    Report IterateData Periselene LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
    Report IterateData Periselene LCROSS.MoonEarthRot.BVectorAngle LCROSS.Luna.Altitude

    %----- Propagate to outside of the Lunar Sphere of Influence 
    Propagate EarthFull(LCROSS) {LCROSS.ElapsedDays = 8};
 
    %----- Enforce the Bplane constraints 
    %Error2 = (LCROSS.Earth.SMA - DesiredSMA)^2/LunarSMA^2;
    Achieve DC_central(LCROSS.Earth.SMA = DesiredSMA, {Tolerance = 100}); 
    %Achieve DC_central(LCROSS.EarthMoonRot.AOP = DesiredAOP, {Tolerance = 1}); 

    Achieve DC_central(LCROSS.Earth.AOP = AOP_J2000, {Tolerance = 1}); 

    Report Data DesiredSMA LCROSS.Earth.SMA  LCROSS.EarthMoonRot.AOP
    Report IterateData DesiredSMA LCROSS.Earth.SMA  LCROSS.EarthMoonRot.AOP
    Report IterateData DesiredSMA LCROSS.Earth.SMA  LCROSS.Earth.AOP
    
EndTarget 

%%------------------------------------------------------------------------
%%----  Target sequence 3:  Target on RA and DEC in EarthMoonRotSystem
%%------------------------------------------------------------------------


%%  Reinitialize LCROSS spacecraft
LCROSS = LCROSSInit;
GMAT MoonView.SolverIterations = All;
   LCM1.Element1 = 0.00436370095429
   LCM1.Element2 = -0.00111121612382
   LCM1.Element3 = 0.00465663351025

Target DC_central {SolveMode = Solve};   %RunInitialGuess or Solve
 
       %---- Initializations
       GMAT LoopCounter = LoopCounter + 1;
       Report IterateData NewIterate 
       Report IterateData PostTLI LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
 
       %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       %---- Prop to where EDUS performs maneuver
       %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
 
       %----- Propagate LCROSS to EDUS Maneuver and Perform Maneuver
       GMAT PropEpoch = RefEpoch + ET_EDUSdV;
      % Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
 
       %---- Perform the maneuver 
       %Vary DC_central(EDUSdv.Element1 = EDUSdv.Element1, {Perturbation = 1e-8, MaxStep = 1e-3, Upper = .05});
       %Vary DC_central(EDUSdv.Element2 = EDUSdv.Element2, {Perturbation = 1e-8, MaxStep = 1e-3, Upper = .05});
       %Vary DC_central(EDUSdv.Element3 = EDUSdv.Element3, {Perturbation = 1e-8, MaxStep = 1e-3, Upper = .05});

       %---- Perform the maneuver
       dVx = LCROSS.VX;
       dVy = LCROSS.VY;
       dVz = LCROSS.VZ;
       Maneuver EDUSdv(LCROSS);
       dVx = LCROSS.VX - dVx;
       dVy = LCROSS.VY - dVy;
       dVz = LCROSS.VZ - dVz; 

       %Report Solution PostEDUS  LCROSS.UTCGregorian dVx dVy dVz LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
 
       %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
       %---- Prop to LCM1 and perform manevuer
       %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   
 
       %----- Propagate LCROSS to Epoch of LCM1
       GMAT PropEpoch = RefEpoch + ET_LCM1;
       Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};   
       Vary DC_central(LCM1.Element1 = LCM1.Element1, {Perturbation = 1e-6, MaxStep = 1e-4, Upper = .05});
       Vary DC_central(LCM1.Element2 = LCM1.Element2, {Perturbation = 1e-6, MaxStep = 1e-4, Upper = .05});
       Vary DC_central(LCM1.Element3 = LCM1.Element3, {Perturbation = 1e-6, MaxStep = 1e-4, Upper = .05});
       Maneuver LCM1(LCROSS);

       %---- Assemble and report some data 
       GMAT LCM1Mag = sqrt(LCM1.Element1^2 + LCM1.Element2^2 + LCM1.Element3^2 );
       Report IterateData PreLCM1 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
       Report SolutionData LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ  
   
       %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
       %---- Prop to periselene
       %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
       %----- Propagate LCROSS to Periselene
       Propagate EarthFull(LCROSS) {LCROSS.Luna.Periapsis};
 
       %----- Propagate to outside of the Lunar Sphere of Influence
       Propagate EarthFull(LCROSS) {LCROSS.ElapsedDays = 8};  
       Report Data LCROSS.SMA LCROSS.EarthMoonRot.AOP
 
       Report Data LCROSS.SMA LCROSS.AOP
       %----- Propagate for desired number of Revs
       NumCrossings = 2*NumSatRevs;     
       For I = 1:6
          Propagate EarthFull(LCROSS){LCROSS.EarthMoonRot.Z = -1738 , StopTolerance = .01 };
       EndFor 
   
       Report Check LCROSS.A1ModJulian
       Report Check LCROSS.UTCGregorian LCROSS.MoonEarthRot.X LCROSS.MoonEarthRot.Y LCROSS.MoonEarthRot.Z 
 
       %----- Calculate constraint values 
       Achieve DC_central( LCROSS.MoonEarthRot.Y = 0 ,{Tolerance = 5});  
       Achieve DC_central( LCROSS.MoonEarthRot.X = 0 ,{Tolerance = 5}); 
       Report Data LCROSS.UTCGregorian 

EndTarget

%Report Check LCROSS.MoonFixed.X LCROSS.MoonFixed.Y LCROSS.MoonFixed.Z
%Report Check LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ
%Report Check LCROSS.UTCGregorian LCROSS.UTCModJulian 

%%================================================================================================================
%%------------------------------------------------------------------------
%%----  Part 2: Find a position continuous solution
%%------------------------------------------------------------------------
%%================================================================================================================

Toggle MoonView Off;
Toggle EarthView Off;

Toggle PositionErrorPlot On;
Toggle VelocityErrorPlot On;

%------------------------------------------------------------------------
%----  Target sequence:  
%------------------------------------------------------------------------

ImpactSat.VX = LCROSS.VX;
ImpactSat.VY = LCROSS.VY;
ImpactSat.VZ = LCROSS.VZ;

%  Reinitialize LCROSS spacecraft
LCROSS        = LCROSSInit;
ImpactSatInit =  ImpactSat
LoopCounter   = 0;

Report IterateData ImpactSatData ImpactSat.UTCGregorian ImpactSat.X ImpactSat.Y ImpactSat.Z ImpactSat.VX ImpactSat.VY ImpactSat.VZ
Report IterateData ET_Coll
Report IterateData ET_LCM2 LCM2.Element1 LCM2.Element2 LCM2.Element3
dVatMoon.Element1 = -0.0134580783916
dVatMoon.Element2 = -0.0977802732702
dVatMoon.Element3 = -0.135186852167
   
%Target DC_central {SolveMode =  Solve};   %RunInitialGuess
%   
%   %---- Initializations
%   GMAT LoopCounter = LoopCounter + 1;
%   Report IterateData NewIterate;
%   Report IterateData PostTLI LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
%   
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- Prop to where EDUS performs maneuver
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   
%   %----- Propagate LCROSS to EDUS Maneuver and Perform Maneuver
%   GMAT PropEpoch = RefEpoch + ET_EDUSdV;
%   %Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
%   
%   Maneuver EDUSdv(LCROSS);
%   EDUSdvMag = sqrt(EDUSdv.Element1^2 + EDUSdv.Element2^2 + EDUSdv.Element3^2);
%   Report IterateData PostEDUS LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z  LCROSS.VX LCROSS.VY LCROSS.VZ
%   
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- Prop to LCM1 and perform manevuer
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   
%   %----- Propagate LCROSS to Epoch of LCM1
%   GMAT PropEpoch = RefEpoch + ET_LCM1;
%   Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
%   Maneuver LCM1(LCROSS);
%     
%   %---- Assemble and report some data
%   GMAT LCM1Mag = sqrt(LCM1.Element1^2 + LCM1.Element2^2 + LCM1.Element3^2 );
%   Report IterateData PostLCM1 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
%
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- Prop to periselene
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   
%   %----- Propagate LCROSS to Periselene
%   Propagate NearMoonProp(LCROSS) {LCROSS.Luna.Periapsis}; 
%   
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- Prop to LCM2 and perform manevuer
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%   %---- Vary the epoch of LCM2
%   %Vary VF13ad1(ET_LCM2 = ET_LCM2, {Perturbation = .0001, MaxStep = .1});
%   GMAT PropEpoch = RefEpoch + ET_LCM2;
%   
%   %----- Propagate to epoch of LCM2 
%   Propagate NearMoonProp(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
%
%   %---- Assemble and report some data
%   GMAT LCM2Mag = sqrt(LCM2.Element1^2 + LCM2.Element2^2 + LCM2.Element3^2 );
%   Report IterateData PostLCM2 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
%
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- Prop to LCROSS to Collocation Epoch 
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%
%   %--- Vary the collocation epoch
%   %Vary VF13ad1(ET_Coll = ET_Coll, {Perturbation = .0001, MaxStep = .1});
%   GMAT A1CollEpoch = RefEpoch + ET_Coll;
%   A1ImpactEpoch = ImpactSat.A1ModJulian
%   Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = A1CollEpoch};
%   %---- Report some data
%   Report IterateData  LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 
%
%   
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- BackProp to ImpactSat to Collocation Epoch
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
%   %----- Vary and apply the maneuver LCM2
%   Vary DC_central(dVatMoon.Element1 = dVatMoon.Element1, {Perturbation = .0001, MaxStep = .175});
%   Vary DC_central(dVatMoon.Element2 = dVatMoon.Element2, {Perturbation = .0001, MaxStep = .175});
%   Vary DC_central(dVatMoon.Element3 = dVatMoon.Element3, {Perturbation = .0001, MaxStep = .175});
%   Maneuver dVatMoon(ImpactSat); 
%   dVatMoonMag = sqrt(dVatMoon.Element1^2 + dVatMoon.Element2^2 + dVatMoon.Element3^2);
%
%   Propagate BackProp EarthFull(ImpactSat){ImpactSat.A1ModJulian = A1CollEpoch}
%   
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- Calculate Collocation contraints and Cost
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   dx = (ImpactSat.X - LCROSS.X)/1000;
%   dy = (ImpactSat.Y - LCROSS.Y)/1000; 
%   dz = (ImpactSat.Z - LCROSS.Z)/1000; 
%   dVx = (ImpactSat.VX - LCROSS.VX)*1000;
%   dVy = (ImpactSat.VY - LCROSS.VY)*1000;
%   dVz = (ImpactSat.VZ - LCROSS.VZ)*1000; 
%   PositionError = sqrt(dx^2 + dy^2 + dz^2);
%   VelocityError = sqrt(dVx^2 + dVy^2 + dVz^2);  
%   Cost = (LCM2Mag + LCM2Mag)*1000
%   
%   Report IterateData dx dy dz
%
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   %---- Apply Collocation contraints
%   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%   Achieve DC_central(dx = 0, {Tolerance = .000001});
%   Achieve DC_central(dy = 0, {Tolerance = .000001});
%   Achieve DC_central(dz = 0, {Tolerance = .000001}); 
%
%EndTarget;  % For targeter DC_central
%
%%%================================================================================================================
%%%------------------------------------------------------------------------
%%%----  Part 3: Optimize the maneuver sequence
%%%------------------------------------------------------------------------
%%%================================================================================================================

ImpactSat = ImpactSatInit;
LCROSS    = LCROSSInit;
 
Toggle PositionErrorPlot Off;
Toggle VelocityErrorPlot Off;
Toggle PositionErrorPlot2 On;
Toggle VelocityErrorPlot2 On;
Toggle CostPlot2 On;
Toggle MoonView Off;
Toggle EarthView Off;


LoopCounter2 = 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%!!!!!!!!! Epoch Specific Data
%!!!!!!!!!

ET_LCM2 = 33.770070
dV2.Element1 =  0.003178521397726965 
dV2.Element2 = -0.02244286793727441
dV2.Element3 = 0.01515079731975863


%dV2.Element1 =  0.0005
%dV2.Element2 = -0.0005
%dV2.Element3 = 0.000000001515079731975863

ET_Coll = 100.068369408
dVatMoon.Element1 = .0005
dVatMoon.Element2 = .0005
dVatMoon.Element3 = .0005

%  PreManever State
GMAT LCROSS.Epoch = '22 Jul 2009 20:00:00.000';
GMAT LCROSS.X  = 345917.01123122376;
GMAT LCROSS.Y  = -45348.2489355510620;
GMAT LCROSS.Z  = -346196.56439542578;
GMAT LCROSS.VX =  0.0748987221602946 
GMAT LCROSS.VY =   0.8442212019763390;
GMAT LCROSS.VZ =  0.2205073401698255;

%%  Post ManeverState
%GMAT LCROSS.Epoch = '22 Jul 2009 20:00:00.000';
%GMAT LCROSS.X  = 345917.01123122376;
%GMAT LCROSS.Y  = -45348.2489355510620;
%GMAT LCROSS.Z  = -346196.56439542578;
%GMAT LCROSS.VX =   0.078077243558021 
%GMAT LCROSS.VY =   0.8217783340390646 
%GMAT LCROSS.VZ = 0.2356581374895841 

%  Impact State                                                                                                                                                                      
ImpactSat.Epoch = '9 Oct 2009 11:30:00.000';
ImpactSat.X = 54575.9528409897180000 
ImpactSat.Y = 331624.2404970731600
ImpactSat.Z = 162338.185372761160
ImpactSat.VX =  -0.6675701182709503 
ImpactSat.VY =  -0.8381718106638686
ImpactSat.VZ =  2.2506650884041499   

   ET_dv3 = 12;
   dV3.Element1 = 0.0000001
   dV3.Element2 = 0.0000001
   dV3.Element3 = 0.0000001

   ET_dv3 = 9.1444532062
   dV3.Element1 = -0.00221105682463
   dV3.Element2 = -0.00309109319075
   dV3.Element3 = -0.00576739355515
   ET_LCM2 = 34.2067708398
   dV2.Element1 = 0.00253358529976
   dV2.Element2 = -0.00818031665189
   dV2.Element3 = 0.0144488751008
   ET_Coll = 100.108452165
   dVatMoon.Element1 = -0.00542614290389
   dVatMoon.Element2 = -0.04112202831
   dVatMoon.Element3 = -0.0484465124964

Optimize VF13ad1;
   
   %---- Initializations
   PenUp VelocityErrorPlot2
   PenUp PositionErrorPlot2
   PenUp CostPlot2
  
   GMAT LoopCounter2 = LoopCounter2 + 1;
   Report IterateData NewIterate;
   Report IterateData PostTLI LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
      
    %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- Prop to LCM1 and perform manevuer
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   %---- Vary the epoch of dv1
   Vary VF13ad1(ET_dv3 = ET_dv3, {Perturbation = .0001, MaxStep = .5});
   NonlinearConstraint VF13ad1(ET_dv3 >= 8);
   
   GMAT PropEpoch = RefEpoch + ET_dv3;
   
   %----- Propagate to epoch of dv3
   LCROSSEpoch = LCROSS.A1ModJulian
   If LCROSSEpoch < PropEpoch
      Propagate NearMoonProp(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
   EndIf
   If LCROSSEpoch > PropEpoch
      Propagate BackProp NearMoonProp(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
   EndIf
   
   Report IterateData LCROSS.SMA LCROSS.AOP
   
   %----- Vary and apply the maneuver LCM2
   Vary VF13ad1(dV3.Element1 = dV3.Element1, {Perturbation = .000001, MaxStep = .001});
   Vary VF13ad1(dV3.Element2 = dV3.Element2, {Perturbation = .000001, MaxStep = .001});
   Vary VF13ad1(dV3.Element3 = dV3.Element3, {Perturbation = .000001, MaxStep = .001});
   Maneuver dV3(LCROSS);
   
   %---- Assemble and report some data
   LCM1Mag = sqrt(dV3.Element1^2 + dV3.Element2^2 + dV3.Element3^2 );
   
  
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- Prop to LCM2 and perform manevuer
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   %---- Vary the epoch of LCM2
   Vary VF13ad1(ET_LCM2 = ET_LCM2, {Perturbation = .0001, MaxStep = .5});
   GMAT PropEpoch = RefEpoch + ET_LCM2;
   
   %----- Propagate to epoch of LCM2 
   LCROSSEpoch = LCROSS.A1ModJulian
   If LCROSSEpoch < PropEpoch
      Propagate NearMoonProp(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
   EndIf
   If LCROSSEpoch > PropEpoch
      Propagate BackProp NearMoonProp(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
   EndIf
   
   Report IterateData LCROSS.SMA LCROSS.AOP
   
   %----- Vary and apply the maneuver LCM2
   Vary VF13ad1(dV2.Element1 = dV2.Element1, {Perturbation = .000001, MaxStep = .01});
   Vary VF13ad1(dV2.Element2 = dV2.Element2, {Perturbation = .000001, MaxStep = .01});
   Vary VF13ad1(dV2.Element3 = dV2.Element3, {Perturbation = .000001, MaxStep = .01});
   Maneuver dV2(LCROSS);
   
   %---- Assemble and report some data
   LCM2Mag = sqrt(dV2.Element1^2 + dV2.Element2^2 + dV2.Element3^2 );
   
   LCM2Mag_mps = LCM2Mag * 1000;    

   Report IterateData PostLCM2 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
 
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- Prop to LCROSS to Collocation Epoch 
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   %--- Vary the collocation epoch
   Vary VF13ad1(ET_Coll = ET_Coll, {Perturbation = .00001, MaxStep = .01});
   GMAT A1CollEpoch = RefEpoch + ET_Coll;
   Propagate NearMoonProp(LCROSS) {LCROSS.A1ModJulian = A1CollEpoch};
   Report IterateData  LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;

   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- BackProp to ImpactSat to Collocation Epoch
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Report SolutionData ImpactSat.UTCGregorian ImpactSat.MoonFixed.X ImpactSat.MoonFixed.Y ImpactSat.MoonFixed.Z
   Report SolutionData ImpactSat.UTCGregorian ImpactSat.X ImpactSat.Y ImpactSat.Z ImpactSat.VX ImpactSat.VY ImpactSat.VZ


   %----- Vary and apply the maneuver LCM2
   Vary VF13ad1(dVatMoon.Element1 = dVatMoon.Element1, {Perturbation = .0000001, MaxStep = .1});
   Vary VF13ad1(dVatMoon.Element2 = dVatMoon.Element2, {Perturbation = .0000001, MaxStep = .1});
   Vary VF13ad1(dVatMoon.Element3 = dVatMoon.Element3, {Perturbation = .0000001, MaxStep = .1});
   Maneuver dVatMoon(ImpactSat);
   dVatMoonMag = sqrt(dVatMoon.Element1^2 + dVatMoon.Element2^2 + dVatMoon.Element3^2);
   
   Propagate BackProp NearMoonProp(ImpactSat){ImpactSat.A1ModJulian = A1CollEpoch}
   
   %---- Report some data
   Report Data LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 

   
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- Calculate Collocation contraints and Cost
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   dx = (ImpactSat.X - LCROSS.X)/1000;
   dy = (ImpactSat.Y - LCROSS.Y)/1000;
   dz = (ImpactSat.Z - LCROSS.Z)/1000; 
   dVx = (ImpactSat.VX - LCROSS.VX)*100;
   dVy = (ImpactSat.VY - LCROSS.VY)*100;
   dVz = (ImpactSat.VZ - LCROSS.VZ)*100; 
   Report CollocationData LCROSS.UTCGregorian ImpactSat.UTCGregorian dx dy dz dVx dVy dVz
   PositionError = sqrt(dx^2 + dy^2 + dz^2);
   VelocityError = sqrt(dVx^2 + dVy^2 + dVz^2);  
 
  Cost = (LCM2Mag*LCM2Mag) *  1000*1000
  Cost = LCM1Mag + LCM2Mag;
  
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %---- Apply Collocation contraints
   %++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   %Minimize VF13ad1(VelocityError);
   Minimize VF13ad1(Cost); 
   NonlinearConstraint VF13ad1(dx = 0);
   NonlinearConstraint VF13ad1(dy = 0);
   NonlinearConstraint VF13ad1(dz = 0); 
   NonlinearConstraint VF13ad1(dVx = 0);
   NonlinearConstraint VF13ad1(dVy = 0);
   NonlinearConstraint VF13ad1(dVz = 0); 
   %NonlinearConstraint VF13ad1(LCM2Mag = 0); 
   PenDown VelocityErrorPlot2
   PenDown PositionErrorPlot2
   PenDown CostPlot2
   Propagate NearMoonProp(LCROSS)
   
 EndOptimize;  % For targeter DC_central 

%================================================================================================================
%------------------------------------------------------------------------
%----  Part 4: Generate solution data
%------------------------------------------------------------------------
%================================================================================================================

ImpactSat = ImpactSatInit;
LCROSS    = LCROSSInit;

Toggle Distances On;

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%---- Prop to where EDUS performs maneuver
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

%----- Propagate LCROSS to EDUS Maneuver and Perform Maneuver
GMAT PropEpoch = RefEpoch + ET_EDUSdV;
Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};

%---- Perform the maneuver
dVx = LCROSS.VX; 
dVy = LCROSS.VY;
dVz = LCROSS.VZ;
Maneuver EDUSdv(LCROSS);
dVx = LCROSS.VX - dVx;
dVy = LCROSS.VY - dVy;
dVz = LCROSS.VZ - dVz;

Report IterateData PostEDUS LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;

%Report Solution EDUSData
%Report Solution LCROSS.UTCGregorian 
%Report Solution dVx  
%Report Solution dVy  
%Report Solution dVz

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%---- Prop to LCM1 and perform manevuer
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

%----- Propagate LCROSS to Epoch of LCM1
GMAT PropEpoch = RefEpoch + ET_LCM1;
Propagate EarthFull(LCROSS) {LCROSS.A1ModJulian = PropEpoch};

%---- Apply maneuver LCM1
dVx = LCROSS.VX;
dVy = LCROSS.VY;
dVz = LCROSS.VZ;
Maneuver LCM1(LCROSS);
dVx = LCROSS.VX - dVx;
dVy = LCROSS.VY - dVy;
dVz = LCROSS.VZ - dVz;

Report IterateData PostLCM1 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
Report Solution LCM1Sol
Report Solution LCROSS.UTCGregorian dVx dVy dVz

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%---- Prop to periselene
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

%----- Propagate LCROSS to Periselene
Propagate NearMoonProp(LCROSS) {LCROSS.Luna.Periapsis};
Report Solution BPlaneData
Report Solution LCROSS.UTCGregorian LCROSS.Luna.Altitude LCROSS.MoonEarthRot.BVectorAngle


%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%---- Prop to LCM2 and perform manevuer
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

%---- Vary the epoch of LCM2
GMAT PropEpoch = RefEpoch + ET_LCM2;
   
%----- Propagate to epoch of LCM2 
Propagate NearMoonProp(LCROSS) {LCROSS.A1ModJulian = PropEpoch};
   
%----- Vary and apply the maneuver LCM2
dVx = LCROSS.VX;
dVy = LCROSS.VY;
dVz = LCROSS.VZ;
Maneuver LCM2(LCROSS);
dVx = LCROSS.VX - dVx;
dVy = LCROSS.VY - dVy;
dVz = LCROSS.VZ - dVz;

Report IterateData PostLCM2 LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ 

Report Solution LCM2Sol
Report Solution LCROSS.UTCGregorian dVx dVy dVz
Report Solution PostLCM2Data
Report Solution LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;
Report Solution LCROSS.SMA LCROSS.EarthMoonRot.AOP

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%---- Prop to LCROSS to Impact
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

%--- Vary the collocation epoch
GMAT A1CollEpoch = RefEpoch + ET_Coll;
Propagate NearMoonProp(LCROSS) {LCROSS.A1ModJulian = A1CollEpoch};
Report IterateData LCROSS.UTCGregorian LCROSS.X LCROSS.Y LCROSS.Z LCROSS.VX LCROSS.VY LCROSS.VZ;

A1ImpactEpoch = ImpactSat.A1ModJulian
Propagate NearMoonProp(LCROSS) {LCROSS.A1ModJulian = A1ImpactEpoch};
Report IterateData  LCROSS.UTCGregorian LCROSS.MoonFixed.X LCROSS.MoonFixed.Y LCROSS.MoonFixed.Z 

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
%---- Calculate Collocation contraints and Cost
%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
dx = (ImpactSat.X - LCROSS.X);
dy = (ImpactSat.Y - LCROSS.Y);
dz = (ImpactSat.Z - LCROSS.Z); 

PositionError = sqrt(dx^2 + dy^2 + dz^2);
VelocityError = sqrt(dVx^2 + dVy^2 + dVz^2);  
 
Report Solution ImpactData
Report Solution LCROSS.UTCGregorian LCROSS.MoonInertial.X LCROSS.MoonInertial.Y LCROSS.MoonInertial.Z
Report Solution LCROSS.MoonFixed.FPA
