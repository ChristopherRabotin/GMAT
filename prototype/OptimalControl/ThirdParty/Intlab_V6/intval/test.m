function y = test(x,p)
%TEST         some nonlinear test functions
%
%   y = test(x)
%

% written  10/16/98     S.M. Rump
% modified 05/13/03     S.M. Rump  constants 2 or 4 need not typeadj; better specification of pi
% modified 04/04/04     S.M. Rump  set round to nearest for safety
%

  setround(0)                           % set rounding to nearest
  
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Broyden
% approximation [ .6 ; 3 ]
% solution      [ .5 ; pi ]
  y = x;
  c1 = typeadj( 1 , typeof(x) );
  cpi = typeadj( midrad(3.14159265358979323,1e-16) , typeof(x) );
  y(1) = .5*sin(x(1)*x(2)) - x(2)/(4*cpi) - x(1)/2;
  y(2) = (1-1/(4*cpi))*(exp(2*x(1))-exp(c1)) + exp(c1)*x(2)/cpi - 2*exp(c1)*x(1);

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Brown's almost linear function 
% approximation x0 = 0.5*ones(n,1)
  y = x;
  n = length(x);
  for k=1:n-1
    y(k) = x(k) + sum(x) - (n+1);
  end
  y(n) = prod(x)-1-p;

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Powell's Singular Function 
% approximation x0 = (3,-1,0,1)
  y = x;
  n = length(x);
  y(1) = x(1)+10*x(2);
  y(2) = sqrt(5)*(x(3)-x(4));
  y(3) = (x(2)-2*x(3))^2;
  y(4) = sqrt(10)*(x(1)-x(4))^2;

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Abbot/Brent     3 y" y + y'^2 = 0;    y(0)=0; y(1)=20;
% approximation   10*ones(n,1)
% solution        20*x^.75
  y = x;
  n = length(x); v=2:n-1;
  y(1) = 3*x(1)*(x(2)-2*x(1)) + x(2)*x(2)/4;
  y(v) = 3*x(v).*(x(v+1)-2*x(v)+x(v-1)) + (x(v+1)-x(v-1)).^2/4;
  y(n) = 3*x(n).*(20-2*x(n)+x(n-1)) + (20-x(n-1)).^2/4;

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Rosenbrock
% approximation [ -1.2 ; 1 ]
% solution      [ 1 ; 1 ]
  y = x;
  y(1) = 400*x(1)*(x(1)*x(1)-x(2)) + 2*(x(1)-1);
  y(2) = 200*x(1)*(x(1)*x(1)-x(2));

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% More/Cosnard discretization  u" - .5*(u+t+1)^3;
% approximation x_i=t_i*(t_i-1); t_i=i*/(n+1); 1<=i<=n
  y = x;
  n = length(x);
  h = 1/(n+1);
  t = (1:n)'*h;
  y(1) = 2*x(1) + .5 * h^2 * (x(1)+t(1)+1)^3;
  v = 2:n-1;
  y(v) = -x(v+1) + 2*x(v) - x(v-1) + .5 * h^2 * (x(v)+t(v)+1).^3;
  y(n) = 2*x(n) - x(n-1) + .5 * h^2 * (t(n)+1).^3;

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Boggs
% approximation [ 1 ; 0 ]
% solutions     [0;1], [-1;2], [-sqrt(2)/2;1.5]
  y = x;
  cpi = typeadj( midrad(3.14159265358979323,1e-16) , typeof(x) );
  y(1) = x(1)*x(1) - x(2) + 1;
  y(2) = x(1) - cos(cpi/2*x(2));

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Braun
% approximation zeros(3,1)
% solution      [1.5;1.809...;1]
  y = x;
  c_1 = typeadj( intval('.1') , typeof(x) );
  cpi = typeadj( midrad(3.14159265358979323,1e-16) , typeof(x) );
  y(1) = 2*sin(2*cpi*x(1)/5)*sin(2*cpi*x(3)/5)-x(2);
  y(2) = 2.5-x(3)+.1*x(2)*sin(2*cpi*x(3))-x(1);
  y(3) = 1+c_1*x(2)*sin(2*cpi*x(1))-x(3);

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Deist/Sefor
% approximation 75*ones(6,1)
% solution      ~[ 121.9 ; 114.2 ; 93.6 ; 62.3 ; 41.3 ; 30.5 ]
  y = x;
  n = length(x);
  beta = typeadj( intval('2.249 2.166 2.083 2 1.918 1.835')/100 , typeof(x) );
  for i=1:n
    y(i) = 0;
    for j=1:n
      if j~=i
        y(i) = y(i) + cot(beta(i)*x(j));
      end
    end
  end

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Abbot/Brent     3 y" y + y'^2 = 0;    y(0)=0; y(1)=20;
% approximation   10*ones(n,1)
% solution        20*x^.75
  y = x;
  n = length(x); v=2:n-1;
  y(1) = 3*x(1)*(x(2)-2*x(1)) + x(2)*x(2)/4;
  y(v) = 3*x(v).*(x(v+1)-2*x(v)+x(v-1)) + (x(v+1)-x(v-1)).^2/4;
  y(n) = 3*x(n).*(20-2*x(n)+x(n-1)) + (20-x(n-1)).^2/4;

  return
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


  y = x;
  i=3;j=7;
  n = length(x)-1;
  y(1:n) = p*x(1:n)-x(n+1)*x(1:n);
  y(n+1) = x(1)-1;
  return
  

  y = x;
  n = length(x)-1;
  y(1:n) = p*x(1:n) - x(n+1)*x(1:n);
  y(n+1) = x(1:n)'*x(1:n) - 1;
  return
  
  
  y = x;
  y(1) = exp(x(1).*x(2))-sin(x(1).^2-2*x(1).*x(2));
  y(2) = x(1).*(x(1)-cosh(x(2)))+x(1).*atan(x(2))-p;
  return
  
