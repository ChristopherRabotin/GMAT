//$Header$
//------------------------------------------------------------------------------
//                               ScriptInterpreter
//------------------------------------------------------------------------------
// GMAT: Goddard Mission Analysis Tool.
//
// Author: Darrel J. Conway
// Created: 2003/09/11
//
// Developed jointly by NASA/GSFC and Thinking Systems, Inc. under contract
// number S-67573-G
//
/**
 * Class implementation for the ScriptInterpreter
 */
//------------------------------------------------------------------------------




// Class automatically generated by Dev-C++ New Class wizard

#include "ScriptInterpreter.hpp" // class's header file


// class constructor
ScriptInterpreter::ScriptInterpreter()
{
	// insert your code here
}

// class destructor
ScriptInterpreter::~ScriptInterpreter()
{
	// insert your code here
}


/** \brief Parses the input stream, line by line, into GMAT objects
 *
 */
bool ScriptInterpreter::Interpret(void)
{
    moderator = Moderator::Instance();
    
    // Hard coded calls for now to get something working
    Spacecraft *sc = new Spacecraft("Sat1");
    
    return ReadScript();
}


bool ScriptInterpreter::Build(void)
{
    return false;
}


bool ScriptInterpreter::ReadScript(void)
{
    *outstream << "General Setup\n\nCommands configured:\n";
    StringArray::iterator current = cmdmap.begin(), last = cmdmap.end();
    while (current != last) { 
       *outstream << "   " << (*current) << "\n";
       ++current;
    }
    
    *outstream << "\n";
    
    *outstream << "Reading..." << std::endl;
    
    if (instream->fail() || instream->eof()) {
        *outstream << "Failed to read on first attempt." << std::endl;
        return false;
    }
    
    *outstream << "\n";
    
    while (!instream->eof()) {
        if (!ReadLine())
            return false;
        if (!Parse())
            return false;
    } 
    
    return true;
}


bool ScriptInterpreter::ReadLine(void)
{
    char charLine[4096];
    
    instream->getline(charLine, 4095);
    *outstream << line << "\n";
    line = charLine;
    
    return true;
}


bool ScriptInterpreter::Parse(void)
{
    // Determine what kind of line we have
    
    
    
    // Process accordingly
    
    
    // Look up or instantiate the core object
    
    
    // Look up related object(s)
    
    
    // Set object associations
    
    
    // Set parameter data
        
    return true;
}


bool ScriptInterpreter::ConfigureCommand(Command *)
{
    return false;
}


bool ScriptInterpreter::ConfigureMathematics(void)
{
    return false;
}

