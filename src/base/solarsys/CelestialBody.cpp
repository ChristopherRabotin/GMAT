//$Header$
//------------------------------------------------------------------------------
//                                  CelestialBody
//------------------------------------------------------------------------------
// GMAT: Goddard Mission Analysis Tool.
//
// Author: Wendy C. Shoan
// Created: 2004/01/28
//
/**
 * Implementation of the CelestialBody class.
 *
 * @note This is an abstract class.
 */
//------------------------------------------------------------------------------


// Class (initial shell only) automatically generated by Dev-C++ New Class wizard

#include "gmatdefs.hpp"
#include "CelestialBody.hpp"

const std::string CelestialBody::BODY_TYPE_STRINGS[Gmat::BodyTypeCount] =
{
   "Star", "Planet", "Moon", "Asteroid", "Comet"
};

//------------------------------------------------------------------------------
// public methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//  CelestialBody(std::string name)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class
 * (default constructor).
 *
 * @param <name> optional parameter indicating the name of the celestial
 *               body (default is "Earth").
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(std::string name) :
GmatBase          (Gmat::CELESTIAL_BODY, "Planet", name),
bodyTypeID        (parameterCount),
massID            (parameterCount+1),
eqRadiusID        (parameterCount +2),
polarRadiusID     (parameterCount +3),
muID              (parameterCount +4),
posVelSourceID    (parameterCount +5),
analyticMethodID  (parameterCount +6),
flatCoeffID       (parameterCount +7),
rotationRateID    (parameterCount +8),
zonals1ID         (parameterCount +9),
zonals2ID         (parameterCount +10),
zonals3ID         (parameterCount +11),
zonals4ID         (parameterCount +12),
zonals5ID         (parameterCount +13),
state1ID          (parameterCount +14),
state2ID          (parameterCount +15),
state3ID          (parameterCount +16),
state4ID          (parameterCount +17),
state5ID          (parameterCount +18),
state6ID          (parameterCount +19),
effRangeID        (parameterCount +20),
centralBodyID     (parameterCount +21),
potentialModelID  (parameterCount +22),
dragModelID       (parameterCount +23),
isInitializedID   (parameterCount +24),
bodyNumberID      (parameterCount +25),
refBodyNumberID   (parameterCount +26),
sourceFilenameID  (parameterCount +27),
sourceStartID     (parameterCount +28),
sourceEndID       (parameterCount +29)
{
   parameterCount += 30;
   Initialize("Planet");  // should this be the default?
}

//------------------------------------------------------------------------------
//  CelestialBody(std::string itsBodyType, std::string name)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class
 * (additional constructor).
 *
 * @param <itsBodyType> string representation of its body type
 * @param <name> parameter indicating the name of the celestial body.
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(std::string itsBodyType, std::string name) :
GmatBase          (Gmat::CELESTIAL_BODY, itsBodyType, name),
bodyTypeID        (parameterCount),
massID            (parameterCount+1),
eqRadiusID        (parameterCount +2),
polarRadiusID     (parameterCount +3),
muID              (parameterCount +4),
posVelSourceID    (parameterCount +5),
analyticMethodID  (parameterCount +6),
flatCoeffID       (parameterCount +7),
rotationRateID    (parameterCount +8),
zonals1ID         (parameterCount +9),
zonals2ID         (parameterCount +10),
zonals3ID         (parameterCount +11),
zonals4ID         (parameterCount +12),
zonals5ID         (parameterCount +13),
state1ID          (parameterCount +14),
state2ID          (parameterCount +15),
state3ID          (parameterCount +16),
state4ID          (parameterCount +17),
state5ID          (parameterCount +18),
state6ID          (parameterCount +19),
effRangeID        (parameterCount +20),
centralBodyID     (parameterCount +21),
potentialModelID  (parameterCount +22),
dragModelID       (parameterCount +23),
isInitializedID   (parameterCount +24),
bodyNumberID      (parameterCount +25),
refBodyNumberID   (parameterCount +26),
sourceFilenameID  (parameterCount +27),
sourceStartID     (parameterCount +28),
sourceEndID       (parameterCount +29)
{
   parameterCount += 30;
   Initialize(itsBodyType);
}

//------------------------------------------------------------------------------
//  CelestialBody(Gmat::BodyType itsBodyType, std::string name)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class
 * (additional constructor).
 *
 * @param <itsBodyType> its body type
 * @param <name> parameter indicating the name of the celestial body.
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(Gmat::BodyType itsBodyType, std::string name) :
GmatBase          (Gmat::CELESTIAL_BODY,
                   CelestialBody::BODY_TYPE_STRINGS[itsBodyType], name),
bodyTypeID        (parameterCount),
massID            (parameterCount+1),
eqRadiusID        (parameterCount +2),
polarRadiusID     (parameterCount +3),
muID              (parameterCount +4),
posVelSourceID    (parameterCount +5),
analyticMethodID  (parameterCount +6),
flatCoeffID       (parameterCount +7),
rotationRateID    (parameterCount +8),
zonals1ID         (parameterCount +9),
zonals2ID         (parameterCount +10),
zonals3ID         (parameterCount +11),
zonals4ID         (parameterCount +12),
zonals5ID         (parameterCount +13),
state1ID          (parameterCount +14),
state2ID          (parameterCount +15),
state3ID          (parameterCount +16),
state4ID          (parameterCount +17),
state5ID          (parameterCount +18),
state6ID          (parameterCount +19),
effRangeID        (parameterCount +20),
centralBodyID     (parameterCount +21),
potentialModelID  (parameterCount +22),
dragModelID       (parameterCount +23),
isInitializedID   (parameterCount +24),
bodyNumberID      (parameterCount +25),
refBodyNumberID   (parameterCount +26),
sourceFilenameID  (parameterCount +27),
sourceStartID     (parameterCount +28),
sourceEndID       (parameterCount +29)
{
   parameterCount += 30;
   Initialize(CelestialBody::BODY_TYPE_STRINGS[itsBodyType]);
}

//------------------------------------------------------------------------------
//  CelestialBody(const CelestialBody &cb)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class as a copy of the
 * specified CelestialBody class (copy constructor).
 *
 * @param <cb> CelestialBody object to copy.
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(const CelestialBody &cb) :
GmatBase            (cb),
bodyType            (cb.bodyType),
mass                (cb.mass),
equatorialRadius    (cb.equatorialRadius),
polarRadius         (cb.polarRadius),
mu                  (cb.mu),
posVelSrc           (cb.posVelSrc),
analyticMethod      (cb.analyticMethod),
flatCoeff           (cb.flatCoeff),
rotationRate        (cb.rotationRate),
effectiveRange      (cb.effectiveRange),
centralBody         (cb.centralBody),
potentialModel      (cb.potentialModel),
dragModel           (cb.dragModel),
bodyNumber          (cb.bodyNumber),
referenceBodyNumber (cb.referenceBodyNumber),
sourceFilename      (cb.sourceFilename),
sourceStart         (cb.sourceStart),
sourceEnd           (cb.sourceEnd)
{
   int i;
   for (i=0;i++;i<5)
   {
      zonals[i] = cb.zonals[i];
   }
   for (i=0;i++;i<6)
   {
      state[i] = cb.state[i];
   }
}

//------------------------------------------------------------------------------
//  CelestialBody& operator= (const CelestialBody& cb)
//------------------------------------------------------------------------------
/**
 * Assignment operator for the CelestialBody class.
 *
 * @param <cb> the CelestialBody object whose data to assign to "this"
 *            solar system.
 *
 * @return "this" CelestialBody with data of input CelestialBody cb.
 */
//------------------------------------------------------------------------------
CelestialBody& CelestialBody::operator=(const CelestialBody &cb)
{
   if (&cb == this)
      return *this;

   GmatBase::operator=(cb);
   bodyType            = cb.bodyType;
   mass                = cb.mass;
   equatorialRadius    = cb.equatorialRadius;
   polarRadius         = cb.polarRadius;
   mu                  = cb.mu;
   posVelSrc           = cb.posVelSrc;
   analyticMethod      = cb.analyticMethod;
   flatCoeff           = cb.flatCoeff;
   rotationRate        = cb.rotationRate;
   effectiveRange      = cb.effectiveRange;
   centralBody         = cb.centralBody;
   potentialModel      = cb.potentialModel;
   dragModel           = cb.dragModel;
   bodyNumber          = cb.bodyNumber;
   referenceBodyNumber = cb.referenceBodyNumber;
   sourceFilename      = cb.sourceFilename;
   sourceStart         = cb.sourceStart;
   sourceEnd           = cb.sourceEnd;

   // how about the IDs?
   int i;
   for (i=0;i++;i<5)
   {
      zonals[i] = cb.zonals[i];
   }
   for (i=0;i++;i<6)
   {
      state[i] = cb.state[i];
   }
   
   return *this;
}

//------------------------------------------------------------------------------
//  ~CelestialBody()
//------------------------------------------------------------------------------
/**
 * Destructor for the CelestialBody class.
 */
//------------------------------------------------------------------------------
CelestialBody::~CelestialBody()
{
   delete centralBody;
   delete potentialModel;
   delete dragModel;
}

//------------------------------------------------------------------------------
//  RealArray GetState(A1Mjd atTime)
//------------------------------------------------------------------------------
/**
 * This method returns the state (position and velocity) of the body at the
 * requested time.
 *
 * @param <atTime>  time for which state of the body is requested.
 *
 * @return state of the body at the requested time.  +++++ pure virtual?
 *
 */
//------------------------------------------------------------------------------
RealArray  CelestialBody::GetState(A1Mjd atTime)
{
   return state; // put in the real stuff based on the PosVelSource flag, etc.****************
}


//------------------------------------------------------------------------------
//  Gmat::BodyType GetBodyType() const
//------------------------------------------------------------------------------
/**
 * This method returns the body type of the body.
 *
 * @return body type of the body.
 *
 */
//------------------------------------------------------------------------------
Gmat::BodyType CelestialBody::GetBodyType() const
{
   return bodyType;
}

//------------------------------------------------------------------------------
//  CelestialBody* GetCentralBody() const
//------------------------------------------------------------------------------
/**
 * This method returns a pointer to the central body of the body.
 *
 * @return pointer to the central body of the body.
 *
 */
//------------------------------------------------------------------------------
CelestialBody* CelestialBody::GetCentralBody() const
{
   return centralBody;
}

//------------------------------------------------------------------------------
//  Real GetGravitationalConstant() const
//------------------------------------------------------------------------------
/**
 * This method returns the gravitational constant (km^3/s^2) of the body.
 *
 * @return gravitational constant of the body.
 *
 */
//------------------------------------------------------------------------------
Real CelestialBody::GetGravitationalConstant() const
{
   return mu;
}

//------------------------------------------------------------------------------
//  Real GetEquatorialRadius() const
//------------------------------------------------------------------------------
/**
 * This method returns the equatorial radius (km) of the body.
 *
 * @return equatorial radius of the body.
 *
 */
//------------------------------------------------------------------------------
Real CelestialBody::GetEquatorialRadius() const
{
   return equatorialRadius;
}

//------------------------------------------------------------------------------
//  Real GetMass() const
//------------------------------------------------------------------------------
/**
 * This method returns the mass (kg) of the body.
 *
 * @return mass of the body.
 *
 */
//------------------------------------------------------------------------------
 Real CelestialBody::GetMass() const
{
   return mass;
}

//------------------------------------------------------------------------------
//  Gmat::PosVelSource GetPosVelSource() const
//------------------------------------------------------------------------------
/**
 * This method returns the source of position and velocity for the body.
 *
 * @return position/velocity source for the body.
 *
 */
//------------------------------------------------------------------------------
Gmat::PosVelSource  CelestialBody::GetPosVelSource() const
{
   return posVelSrc;
}

//------------------------------------------------------------------------------
//  Gmat::AnalyticMethod GetAnalyticMethod() const
//------------------------------------------------------------------------------
/**
 * This method returns the analytic method used for the body.
 *
 * @return analytic method for the body.
 *
 */
//------------------------------------------------------------------------------
Gmat::AnalyticMethod CelestialBody::GetAnalyticMethod() const
{
   return analyticMethod;
}

//------------------------------------------------------------------------------
//  bool SetBodyType(Gmat::BodyType bType)
//------------------------------------------------------------------------------
/**
 * This method sets the body type for the body.
 *
 * @param <bType> body type for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetBodyType(Gmat::BodyType bType)
{
   bodyType = bType; // will need to change default parameters here too, if they
                     // are set to values that make no sense for this type of body?
}

//------------------------------------------------------------------------------
//  bool SetCentralBody(CelestialBody* cBody)
//------------------------------------------------------------------------------
/**
 * This method sets the central body for the body.
 *
 * @param <cBody> central body pointer for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetCentralBody(CelestialBody* cBody)
{
   centralBody = cBody;  // what else needs to be checked or changed here?
}

//------------------------------------------------------------------------------
//  bool SetSource(Gmat::PosVelSource pvSrc)
//------------------------------------------------------------------------------
/**
 * This method sets the position/velocity source for the body.
 *
 * @param <pcSrc> position/velocity source for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetSource(Gmat::PosVelSource pvSrc)
{
   posVelSrc = pvSrc;
}

//------------------------------------------------------------------------------
//  bool SetAnalyticMethod(Gmat::AnalyticMethod aM)
//------------------------------------------------------------------------------
/**
 * This method sets the analytic method for the body.
 *
 * @param <aM> analytic method for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetAnalyticMethod(Gmat::AnalyticMethod aM)
{
   analyticMethod = aM;
}

//------------------------------------------------------------------------------
//  std::string  GetParameterText(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter text, given the input parameter ID.
 *
 * @param <id> Id for the requested parameter text.
 *
 * @return parameter text for the requested parameter.
 *
 */
//------------------------------------------------------------------------------
std::string CelestialBody::GetParameterText(const Integer id) const
{
   if (id == bodyTypeID)        return "BodyType";
   if (id == massID)            return "Mass";
   if (id == eqRadiusID)        return "EquatorialRadius";
   if (id == polarRadiusID)     return "PolarRadius";
   if (id == muID)              return "mu";
   if (id == posVelSourceID)    return "PositionVelocitySource";
   if (id == analyticMethodID)  return "AnalyticMethod";
   if (id == flatCoeffID)       return "Flattening Coefficient";
   if (id == rotationRateID)    return "RotationRate";
   if (id == zonals1ID)         return "Zonals1";
   if (id == zonals2ID)         return "Zonals2";
   if (id == zonals3ID)         return "Zonals3";
   if (id == zonals4ID)         return "Zonals4";
   if (id == zonals5ID)         return "Zonals5";
   if (id == state1ID)          return "PositionX";
   if (id == state2ID)          return "PositionY";
   if (id == state3ID)          return "PositionZ";
   if (id == state4ID)          return "VelocityX";
   if (id == state5ID)          return "VelocityY";
   if (id == state6ID)          return "VelocityZ";
   if (id == effRangeID)        return "EffectiveRange";
   if (id == centralBodyID)     return "CentralBody";
   if (id == potentialModelID)  return "PotentialModel";
   if (id == dragModelID)       return "DragModel";
//   if (id == isInitializedID)   return "IsInitialized"; // does NOT make sense
   if (id == bodyNumberID)      return "BodyNumber";
   if (id == refBodyNumberID)   return "ReferenceBodyNumber";
   if (id == sourceFilenameID)  return "SourceFilename";
   if (id == sourceStartID)     return "SourceStartTime";
   if (id == sourceEndID)       return "SourceEndTime";

   return GmatBase::GetParameterText(id);
}

//------------------------------------------------------------------------------
//  Integer  GetParameterID(const std::string &str) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter ID, given the input parameter string.
 *
 * @param <str> string for the requested parameter.
 *
 * @return ID for the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Integer     CelestialBody::GetParameterID(const std::string &str) const
{
   if (str == "BodyType")               return bodyTypeID;
   if (str == "Mass")                   return massID;
   if (str == "EquatorialRadius")       return eqRadiusID;
   if (str == "PolarRadius")            return polarRadiusID;
   if (str == "Mu")                     return muID;
   if (str == "PositionVelocitySource") return posVelSourceID;
   if (str == "AnalyticMethod")         return analyticMethodID;
   if (str == "FlatteningCoefficient")  return flatCoeffID;
   if (str == "RotationRate")           return rotationRateID;
   if (str == "Zonals1")                return zonals1ID;
   if (str == "Zonals2")                return zonals2ID;
   if (str == "Zonals3")                return zonals3ID;
   if (str == "Zonals4")                return zonals4ID;
   if (str == "Zonals5")                return zonals5ID;
   if (str == "PositionX")              return state1ID;
   if (str == "PositionY")              return state2ID;
   if (str == "PositionZ")              return state3ID;
   if (str == "VelocityX")              return state4ID;
   if (str == "VelocityY")              return state5ID;
   if (str == "VelocityZ")              return state6ID;
   if (str == "EffectiveRange")         return effRangeID;
   if (str == "CentralBody")            return centralBodyID;
   if (str == "PotentialModel")         return potentialModelID;
   if (str == "DragModel")              return dragModelID;
   //   if (id == "IsInitialized")        return isInitializedID; // does NOT make sense
   if (str == "BodyNumber")             return bodyNumberID;
   if (str == "ReferenceBodyNumber")    return refBodyNumberID;
   if (str == "SourceFilename")         return sourceFilenameID;
   if (str == "SourceStartTime")        return sourceStartID;
   if (str == "SourceEndTime")          return sourceEndID;
   
   return GmatBase::GetParameterID(str);
}

//------------------------------------------------------------------------------
//  Gmat::ParameterType  GetParameterType(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter type, given the input parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return parameter type of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Gmat::ParameterType CelestialBody::GetParameterType(const Integer id) const
{
   if (id == bodyTypeID)        return Gmat::INTEGER_TYPE;
   if (id == massID)            return Gmat::REAL_TYPE;
   if (id == eqRadiusID)        return Gmat::REAL_TYPE;
   if (id == polarRadiusID)     return Gmat::REAL_TYPE;
   if (id == muID)              return Gmat::REAL_TYPE;
   if (id == posVelSourceID)    return Gmat::INTEGER_TYPE;
   if (id == analyticMethodID)  return Gmat::INTEGER_TYPE;
   if (id == flatCoeffID)       return Gmat::REAL_TYPE;
   if (id == rotationRateID)    return Gmat::REAL_TYPE;
   if (id == zonals1ID)         return Gmat::REAL_TYPE;
   if (id == zonals2ID)         return Gmat::REAL_TYPE;
   if (id == zonals3ID)         return Gmat::REAL_TYPE;
   if (id == zonals4ID)         return Gmat::REAL_TYPE;
   if (id == zonals5ID)         return Gmat::REAL_TYPE;
   if (id == state1ID)          return Gmat::REAL_TYPE; // should state be RVECTOR6?
   if (id == state2ID)          return Gmat::REAL_TYPE;
   if (id == state3ID)          return Gmat::REAL_TYPE;
   if (id == state4ID)          return Gmat::REAL_TYPE;
   if (id == state5ID)          return Gmat::REAL_TYPE;
   if (id == state6ID)          return Gmat::REAL_TYPE;
   if (id == effRangeID)        return Gmat::REAL_TYPE;
   if (id == centralBodyID)     return Gmat::OBJECT_TYPE;  // what is right?
   if (id == potentialModelID)  return Gmat::OBJECT_TYPE;  // ???
   if (id == dragModelID)       return Gmat::OBJECT_TYPE;  // ???
//   if (id == isInitializedID)   return Gmat::INTEGER_TYPE; // does NOT make sense
   if (id == bodyNumberID)      return Gmat::INTEGER_TYPE;
   if (id == refBodyNumberID)   return Gmat::INTEGER_TYPE;
   if (id == sourceFilenameID)  return Gmat::STRING_TYPE;
   if (id == sourceStartID)     return Gmat::A1MJD_TYPE;
   if (id == sourceEndID)       return Gmat::A1MJD_TYPE;
      
   return GmatBase::GetParameterType(id);
}

//------------------------------------------------------------------------------
//  std::string  GetParameterTypeString(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter type string, given the input parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return parameter type string of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
std::string CelestialBody::GetParameterTypeString(const Integer id) const
{
   return GmatBase::PARAM_TYPE_STRING[GetParameterType(id)];
}

//------------------------------------------------------------------------------
//  Real  GetRealParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the Real parameter value, given the input parameter ID.
 *
 * @param <id> ID for the requested parameter value.
 *
 * @return  Real value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Real        CelestialBody::GetRealParameter(const Integer id) const
{
   if (id == massID)            return mass;
   if (id == eqRadiusID)        return equatorialRadius;
   if (id == polarRadiusID)     return polarRadius;
   if (id == muID)              return mu;
   if (id == flatCoeffID)       return flatCoeff;
   if (id == rotationRateID)    return rotationRate;
   if (id == zonals1ID)         return zonals[0];
   if (id == zonals2ID)         return zonals[1];
   if (id == zonals3ID)         return zonals[2];
   if (id == zonals4ID)         return zonals[3];
   if (id == zonals5ID)         return zonals[4];
   if (id == state1ID)          return state[0];
   if (id == state2ID)          return state[1];
   if (id == state3ID)          return state[2];
   if (id == state4ID)          return state[3];
   if (id == state5ID)          return state[4];
   if (id == state6ID)          return state[5];
   if (id == effRangeID)        return effectiveRange;

   return GmatBase::GetRealParameter(id);
}

//------------------------------------------------------------------------------
//  Real  SetRealParameter(const Integer id, const Real value)
//------------------------------------------------------------------------------
/**
 * This method sets the Real parameter value, given the input parameter ID.
 *
 * @param <id> ID for the parameter whose value to change.
 * @param <value> value for the parameter.
 *
 * @return  Real value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Real        CelestialBody::SetRealParameter(const Integer id, const Real value)
{
   if (id == massID)            return mass             = value;
   if (id == eqRadiusID)        return equatorialRadius = value;
   if (id == polarRadiusID)     return polarRadius      = value;
   if (id == muID)              return mu               = value;
   if (id == flatCoeffID)       return flatCoeff        = value;
   if (id == rotationRateID)    return rotationRate     = value;
   if (id == zonals1ID)         return zonals[0]        = value;
   if (id == zonals2ID)         return zonals[1]        = value;
   if (id == zonals3ID)         return zonals[2]        = value;
   if (id == zonals4ID)         return zonals[3]        = value;
   if (id == zonals5ID)         return zonals[4]        = value;
   if (id == state1ID)          return state[0]         = value;
   if (id == state2ID)          return state[1]         = value;
   if (id == state3ID)          return state[2]         = value;
   if (id == state4ID)          return state[3]         = value;
   if (id == state5ID)          return state[4]         = value;
   if (id == state6ID)          return state[5]         = value;
   if (id == effRangeID)        return effectiveRange   = value;

   return GmatBase::SetRealParameter(id, value);
}

//------------------------------------------------------------------------------
//  Integer  GetIntegerParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the Integer parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return  Integer value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Integer     CelestialBody::GetIntegerParameter(const Integer id) const
{
   if (id == bodyNumberID)          return bodyNumber;
   if (id == refBodyNumberID)       return referenceBodyNumber;
   
   return GmatBase::GetIntegerParameter(id); // add others in later?
}

//------------------------------------------------------------------------------
//  Integer  SetIntegerParameter(const Integer id, const Integer value)
//------------------------------------------------------------------------------
/**
 * This method sets the Integer parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 * @param <value> Integer value for the requested parameter.
 *
 * @return  Integer value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Integer     CelestialBody::SetIntegerParameter(const Integer id,
                                        const Integer value) // const?
{
   if (id == bodyNumberID)          return bodyNumber          = value;
   if (id == refBodyNumberID)       return referenceBodyNumber = value;
   
   return GmatBase::SetIntegerParameter(id,value);  // add others in later
}

//------------------------------------------------------------------------------
//  std::string  GetStringParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the string parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return  string value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
std::string CelestialBody::GetStringParameter(const Integer id) const
{
   if (id == sourceFilenameID)      return sourceFilename;

   return GmatBase::GetStringParameter(id);
}

//------------------------------------------------------------------------------
//  std::string  SetStringParameter(const Integer id, const std::string value)
//------------------------------------------------------------------------------
/**
 * This method sets the string parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 * @param <value> string value for the requested parameter.
 *
 * @return  string value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
bool        CelestialBody::SetStringParameter(const Integer id,
                                       const std::string &value) // const?
{
   if (id == sourceFilenameID)
   {
      sourceFilename = value;
      return true;
   }

   return GmatBase::SetStringParameter(id, value);
}

//------------------------------------------------------------------------------
//  bool  GetBooleanParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the bool parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return  bool value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
bool        CelestialBody::GetBooleanParameter(const Integer id) const
{
//   if (id == isInitializedID)       return isInitialized;  // does NOT make sense

   return GmatBase::GetBooleanParameter(id);
}

//------------------------------------------------------------------------------
//  bool  SetBooleanParameter(const Integer id, const std::string value)
//------------------------------------------------------------------------------
/**
 * This method sets the bool parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 * @param <value> bool value for the requested parameter.
 *
 * @return  string bool of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
bool        CelestialBody::SetBooleanParameter(const Integer id,
                                        const bool value) // const?
{
//   if (id == isInitializedID)       return isInitialized = value; // this does NOT make sense

   return GmatBase::SetBooleanParameter(id,value);
}
                                                           //------------------------------------------------------------------------------
// protected methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//  void  Initialize(std::string withBodyType)
//------------------------------------------------------------------------------
/**
 * This method initializes the data values for the body.
 *
 * @param <withBodyType> string representation of the body type.
 *
 */
//------------------------------------------------------------------------------
void CelestialBody::Initialize(std::string withBodyType)
{
   // fill in with default values, based on the body type?  Or let derived classes
   // do that?
}

//------------------------------------------------------------------------------
// private methods
//------------------------------------------------------------------------------
// none at this time

