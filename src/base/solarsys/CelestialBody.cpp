//$Header$
//------------------------------------------------------------------------------
//                                  CelestialBody
//------------------------------------------------------------------------------
// GMAT: Goddard Mission Analysis Tool.
//
// Author: Wendy C. Shoan
// Created: 2004/01/28
//
/**
 * Implementation of the CelestialBody class.
 *
 * @note This is an abstract class.
 */
//------------------------------------------------------------------------------


// Class (initial shell only) automatically generated by Dev-C++ New Class wizard

#include "gmatdefs.hpp"
#include "CelestialBody.hpp"
#include "PlanetaryEphem.hpp"
//#include "AtmosphereModel.hpp"

const std::string CelestialBody::BODY_TYPE_STRINGS[Gmat::BodyTypeCount] =
{
   "Star", "Planet", "Moon", "Asteroid", "Comet"
};

//------------------------------------------------------------------------------
// public methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//  CelestialBody(std::string name)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class
 * (default constructor).
 *
 * @param <name> optional parameter indicating the name of the celestial
 *               body (default is "Earth").
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(std::string name) :
GmatBase            (Gmat::CELESTIAL_BODY, "Planet", name),
bodyTypeID          (parameterCount),
massID              (parameterCount +1),
eqRadiusID          (parameterCount +2),
polarRadiusID       (parameterCount +3),
muID                (parameterCount +4),
posVelSourceID      (parameterCount +5),
analyticMethodID    (parameterCount +6),
state1ID            (parameterCount +7),
state2ID            (parameterCount +8),
state3ID            (parameterCount +9),
state4ID            (parameterCount +10),
state5ID            (parameterCount +11),
state6ID            (parameterCount +12),
stateTimeID         (parameterCount +13),
orderID             (parameterCount +14),
degreeID            (parameterCount +15),
bodyNumberID        (parameterCount +16),
refBodyNumberID     (parameterCount +17),
sourceFilenameID    (parameterCount +18),
sourceStartID       (parameterCount +19),
sourceEndID         (parameterCount +20),
usePotentialFileID  (parameterCount +21),
potentialFileNameID (parameterCount +22),
angularVelocityID1  (parameterCount +23),
angularVelocityID2  (parameterCount +24),
angularVelocityID3  (parameterCount +25),
coefficientSizeID   (parameterCount +26),
sijID               (parameterCount +27),
cijID               (parameterCount +28),
hourAngleID         (parameterCount +29),
atmModelID          (parameterCount +30),
supportedAtmModelsID (parameterCount +31)
{
   parameterCount += 32;
   Initialize("Planet");  // should this be the default?
}

//------------------------------------------------------------------------------
//  CelestialBody(std::string itsBodyType, std::string name)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class
 * (additional constructor).
 *
 * @param <itsBodyType> string representation of its body type
 * @param <name> parameter indicating the name of the celestial body.
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(std::string itsBodyType, std::string name) :
GmatBase            (Gmat::CELESTIAL_BODY, "Planet", name),
bodyTypeID          (parameterCount),
massID              (parameterCount +1),
eqRadiusID          (parameterCount +2),
polarRadiusID       (parameterCount +3),
muID                (parameterCount +4),
posVelSourceID      (parameterCount +5),
analyticMethodID    (parameterCount +6),
state1ID            (parameterCount +7),
state2ID            (parameterCount +8),
state3ID            (parameterCount +9),
state4ID            (parameterCount +10),
state5ID            (parameterCount +11),
state6ID            (parameterCount +12),
stateTimeID         (parameterCount +13),
orderID             (parameterCount +14),
degreeID            (parameterCount +15),
bodyNumberID        (parameterCount +16),
refBodyNumberID     (parameterCount +17),
sourceFilenameID    (parameterCount +18),
sourceStartID       (parameterCount +19),
sourceEndID         (parameterCount +20),
usePotentialFileID  (parameterCount +21),
potentialFileNameID (parameterCount +22),
angularVelocityID1  (parameterCount +23),
angularVelocityID2  (parameterCount +24),
angularVelocityID3  (parameterCount +25),
coefficientSizeID   (parameterCount +26),
sijID               (parameterCount +27),
cijID               (parameterCount +28),
hourAngleID         (parameterCount +29),
atmModelID          (parameterCount +30),
supportedAtmModelsID (parameterCount +31)
{
   parameterCount += 32;
   Initialize(itsBodyType);
}

//------------------------------------------------------------------------------
//  CelestialBody(Gmat::BodyType itsBodyType, std::string name)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class
 * (additional constructor).
 *
 * @param <itsBodyType> its body type
 * @param <name> parameter indicating the name of the celestial body.
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(Gmat::BodyType itsBodyType, std::string name) :
GmatBase          (Gmat::CELESTIAL_BODY,
                   CelestialBody::BODY_TYPE_STRINGS[itsBodyType], name),
bodyTypeID          (parameterCount),
massID              (parameterCount +1),
eqRadiusID          (parameterCount +2),
polarRadiusID       (parameterCount +3),
muID                (parameterCount +4),
posVelSourceID      (parameterCount +5),
analyticMethodID    (parameterCount +6),
state1ID            (parameterCount +7),
state2ID            (parameterCount +8),
state3ID            (parameterCount +9),
state4ID            (parameterCount +10),
state5ID            (parameterCount +11),
state6ID            (parameterCount +12),
stateTimeID         (parameterCount +13),
orderID             (parameterCount +14),
degreeID            (parameterCount +15),
bodyNumberID        (parameterCount +16),
refBodyNumberID     (parameterCount +17),
sourceFilenameID    (parameterCount +18),
sourceStartID       (parameterCount +19),
sourceEndID         (parameterCount +20),
usePotentialFileID  (parameterCount +21),
potentialFileNameID (parameterCount +22),
angularVelocityID1  (parameterCount +23),
angularVelocityID2  (parameterCount +24),
angularVelocityID3  (parameterCount +25),
coefficientSizeID   (parameterCount +26),
sijID               (parameterCount +27),
cijID               (parameterCount +28),
hourAngleID         (parameterCount +29),
atmModelID          (parameterCount +30),
supportedAtmModelsID (parameterCount +31)
{
   parameterCount += 32;
   Initialize(CelestialBody::BODY_TYPE_STRINGS[itsBodyType]);
}

//------------------------------------------------------------------------------
//  CelestialBody(const CelestialBody &cb)
//------------------------------------------------------------------------------
/**
 * This method creates an object of the CelestialBody class as a copy of the
 * specified CelestialBody class (copy constructor).
 *
 * @param <cb> CelestialBody object to copy.
 */
//------------------------------------------------------------------------------
CelestialBody::CelestialBody(const CelestialBody &cb) :
GmatBase            (cb),
bodyType            (cb.bodyType),
mass                (cb.mass),
equatorialRadius    (cb.equatorialRadius),
polarRadius         (cb.polarRadius),
mu                  (cb.mu),
posVelSrc           (cb.posVelSrc),
analyticMethod      (cb.analyticMethod),
order               (cb.order),
degree              (cb.degree),
centralBody         (cb.centralBody),
bodyNumber          (cb.bodyNumber),
referenceBodyNumber (cb.referenceBodyNumber),
sourceFilename      (cb.sourceFilename),
sourceStart         (cb.sourceStart),
sourceEnd           (cb.sourceEnd),
theSourceFile       (cb.theSourceFile),
usePotentialFile    (cb.usePotentialFile),
potentialFileName   (cb.potentialFileName),
coefficientSize     (cb.coefficientSize),
sij                 (cb.sij),
cij                 (cb.cij),
hourAngle           (cb.hourAngle),
atmManager          (cb.atmManager),     // do I want to do this?
atmModel            (cb.atmModel),
bodyTypeID          (cb.bodyTypeID),
massID              (cb.massID),
eqRadiusID          (cb.eqRadiusID),
polarRadiusID       (cb.polarRadiusID),
muID                (cb.muID),
posVelSourceID      (cb.posVelSourceID),
analyticMethodID    (cb.analyticMethodID),
state1ID            (cb.state1ID),
state2ID            (cb.state2ID),
state3ID            (cb.state3ID),
state4ID            (cb.state4ID),
state5ID            (cb.state5ID),
state6ID            (cb.state6ID),
stateTimeID         (cb.stateTimeID),
orderID             (cb.orderID),
degreeID            (cb.degreeID),
bodyNumberID        (cb.bodyNumberID),
refBodyNumberID     (cb.refBodyNumberID),
sourceFilenameID    (cb.sourceFilenameID),
sourceStartID       (cb.sourceStartID),    // ???????????????
sourceEndID         (cb.sourceEndID),      // ???????????????
usePotentialFileID  (cb.usePotentialFileID),
potentialFileNameID (cb.potentialFileNameID),
angularVelocityID1  (cb.angularVelocityID1),
angularVelocityID2  (cb.angularVelocityID2),
angularVelocityID3  (cb.angularVelocityID3),
coefficientSizeID   (cb.coefficientSizeID),
sijID               (cb.sijID),
cijID               (cb.cijID), 
hourAngleID         (cb.hourAngleID),
atmModelID          (cb.atmModelID),
supportedAtmModelsID (cb.supportedAtmModelsID),
defaultMu           (cb.defaultMu),
defaultEqRadius     (cb.defaultEqRadius),
defaultCoefSize     (cb.defaultCoefSize),
defaultSij          (cb.defaultSij),
defaultCij          (cb.defaultCij)
{
      state     = cb.state;
      stateTime = cb.stateTime;
      int i;
      for (i=0;i<3;i++) angularVelocity[i] = cb.angularVelocity[i];
}

//------------------------------------------------------------------------------
//  CelestialBody& operator= (const CelestialBody& cb)
//------------------------------------------------------------------------------
/**
 * Assignment operator for the CelestialBody class.
 *
 * @param <cb> the CelestialBody object whose data to assign to "this"
 *            solar system.
 *
 * @return "this" CelestialBody with data of input CelestialBody cb.
 */
//------------------------------------------------------------------------------
CelestialBody& CelestialBody::operator=(const CelestialBody &cb)
{
   if (&cb == this)
      return *this;

   GmatBase::operator=(cb);
   bodyType            = cb.bodyType;
   mass                = cb.mass;
   equatorialRadius    = cb.equatorialRadius;
   polarRadius         = cb.polarRadius;
   mu                  = cb.mu;
   posVelSrc           = cb.posVelSrc;
   analyticMethod      = cb.analyticMethod;
   state               = cb.state;
   stateTime           = cb.stateTime;
   order               = cb.order;
   degree              = cb.degree;
   centralBody         = cb.centralBody;
   bodyNumber          = cb.bodyNumber;
   referenceBodyNumber = cb.referenceBodyNumber;
   sourceFilename      = cb.sourceFilename;
   sourceStart         = cb.sourceStart;
   sourceEnd           = cb.sourceEnd;
   usePotentialFile    = cb.usePotentialFile;
   potentialFileName   = cb.potentialFileName;
   coefficientSize     = cb.coefficientSize;
   sij                 = cb.sij;
   cij                 = cb.cij;
   hourAngle           = cb.hourAngle;
   atmManager          = cb.atmManager;     // do I want to do this?
   atmModel            = cb.atmModel;
      
   int i;
   for (i=0;i<3;i++) angularVelocity[i] = cb.angularVelocity[i];
   
   // copy the IDs as well
   bodyTypeID             = cb.bodyTypeID;
   massID                 = cb.massID;
   eqRadiusID             = cb.eqRadiusID;
   polarRadiusID          = cb.polarRadiusID;
   muID                   = cb.muID;
   posVelSourceID         = cb.posVelSourceID;
   analyticMethodID       = cb.analyticMethodID;
   state1ID               = cb.state1ID;
   state2ID               = cb.state2ID;
   state3ID               = cb.state3ID;
   state4ID               = cb.state4ID;
   state5ID               = cb.state5ID;
   state6ID               = cb.state6ID;
   stateTimeID            = cb.stateTimeID;
   orderID                = cb.orderID;
   degreeID               = cb.degreeID;
   bodyNumberID           = cb.bodyNumberID;
   refBodyNumberID        = cb.refBodyNumberID;
   sourceFilenameID       = cb.sourceFilenameID;
   sourceStartID          = cb.sourceStartID;    // ???????????????
   sourceEndID            = cb.sourceEndID;      // ???????????????
   usePotentialFileID     = cb.usePotentialFileID;
   potentialFileNameID    = cb.potentialFileNameID;
   angularVelocityID1     = cb.angularVelocityID1;
   angularVelocityID2     = cb.angularVelocityID2;
   angularVelocityID3     = cb.angularVelocityID3;
   coefficientSizeID      = cb.coefficientSizeID;
   sijID                  = cb.sijID;           // ?????????????????
   cijID                  = cb.cijID;           // ?????????????????
   hourAngleID            = cb.hourAngleID;
   atmModelID             = cb.atmModelID;
   supportedAtmModelsID   = cb.supportedAtmModelsID;

   defaultMu              = cb.defaultMu;
   defaultEqRadius        = cb.defaultEqRadius;
   defaultCoefSize        = cb.defaultCoefSize;
   defaultSij             = cb.defaultSij;
   defaultCij             = cb.defaultCij;

   return *this;
}

//------------------------------------------------------------------------------
//  ~CelestialBody()
//------------------------------------------------------------------------------
/**
 * Destructor for the CelestialBody class.
 */
//------------------------------------------------------------------------------
CelestialBody::~CelestialBody()
{
   delete atmManager;
   delete atmModel;
}

//------------------------------------------------------------------------------
//  RealArray GetState(A1Mjd atTime)
//------------------------------------------------------------------------------
/**
 * This method returns the state (position and velocity) of the body at the
 * requested time.
 *
 * @param <atTime>  time for which state of the body is requested.
 *
 * @return state of the body at the requested time.  +++++ pure virtual?
 *
 */
//------------------------------------------------------------------------------
RealArray  CelestialBody::GetState(A1Mjd atTime)
{

   Real*     posVel;
   RealArray rArray(6,0.0);
   switch (posVelSrc) {
      case Gmat::SLP :
      case Gmat::DE :
         // if SLP file not set , throw an exception here <<<<<<<<<
         posVel = theSourceFile->GetPosVel(bodyNumber,atTime);
         break;
      case Gmat::ANALYTIC :
      case Gmat::EPHEMERIS :
         break; // other cases later <<<<<<<<<<<<<<<<
   }
   stateTime  = atTime;
   rArray[0]  = posVel[0];
   rArray[1]  = posVel[1];
   rArray[2]  = posVel[2];
   rArray[3]  = posVel[3];
   rArray[4]  = posVel[4];
   rArray[5]  = posVel[5];
   state      = rArray;

   return rArray;
}


//------------------------------------------------------------------------------
//  Gmat::BodyType GetBodyType() const
//------------------------------------------------------------------------------
/**
 * This method returns the body type of the body.
 *
 * @return body type of the body.
 *
 */
//------------------------------------------------------------------------------
Gmat::BodyType CelestialBody::GetBodyType() const
{
   return bodyType;
}

//------------------------------------------------------------------------------
//  CelestialBody* GetCentralBody() const
//------------------------------------------------------------------------------
/**
 * This method returns a pointer to the central body of the body.
 *
 * @return pointer to the central body of the body.
 *
 */
//------------------------------------------------------------------------------
CelestialBody* CelestialBody::GetCentralBody() const
{
   return centralBody;
}

//------------------------------------------------------------------------------
//  Real GetGravitationalConstant() 
//------------------------------------------------------------------------------
/**
 * This method returns the gravitational constant (km^3/s^2) of the body.
 *
 * @return gravitational constant of the body.
 *
 */
//------------------------------------------------------------------------------
Real CelestialBody::GetGravitationalConstant() 
{
   if ((usePotentialFile == true) & (!potentialFileRead))
   {
      bool err = ReadPotentialFile();
      if (err) return 0.0;     // should throw an exception here
   }
   return mu;
}

//------------------------------------------------------------------------------
//  Real GetEquatorialRadius() 
//------------------------------------------------------------------------------
/**
* This method returns the equatorial radius (km) of the body.
 *
 * @return equatorial radius of the body.
 *
 */
//------------------------------------------------------------------------------
Real CelestialBody::GetEquatorialRadius() 
{
   if ((usePotentialFile == true) & (!potentialFileRead))
   {
      bool err = ReadPotentialFile();
      if (err) return 0.0;     // should throw an exception here
   }
   return equatorialRadius;
}

//------------------------------------------------------------------------------
//  Real GetPolarRadius() const
//------------------------------------------------------------------------------
/**
 * This method returns the polar radius (km) of the body.
 *
 * @return polar radius of the body.
 *
 */
//------------------------------------------------------------------------------
Real CelestialBody::GetPolarRadius() const
{
   return polarRadius;   //    if ((usePotentialFile == true) & (!potentialFileRead)) ReadPotentialFile();??
}

//------------------------------------------------------------------------------
//  Real GetMass() const
//------------------------------------------------------------------------------
/**
 * This method returns the mass (kg) of the body.
 *
 * @return mass of the body.
 *
 */
//------------------------------------------------------------------------------
 Real CelestialBody::GetMass() const
{
   return mass;
}

//------------------------------------------------------------------------------
//  Gmat::PosVelSource GetPosVelSource() const
//------------------------------------------------------------------------------
/**
 * This method returns the source of position and velocity for the body.
 *
 * @return position/velocity source for the body.
 *
 */
//------------------------------------------------------------------------------
Gmat::PosVelSource  CelestialBody::GetPosVelSource() const
{
   return posVelSrc;
}

//------------------------------------------------------------------------------
//  Gmat::AnalyticMethod GetAnalyticMethod() const
//------------------------------------------------------------------------------
/**
 * This method returns the analytic method used for the body.
 *
 * @return analytic method for the body.
 *
 */
//------------------------------------------------------------------------------
Gmat::AnalyticMethod CelestialBody::GetAnalyticMethod() const
{
   return analyticMethod;
}

//------------------------------------------------------------------------------
//  bool CelestialBody::GetUsePotentialFile() const
//------------------------------------------------------------------------------
/**
 * This method returns the flag indicating whether to use the potential file
 * or not used for the body.
 *
 * @return flag indicating whether or not to use the potential file to determine
 *         mu, radius, and spherical harmonic coefficients.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::GetUsePotentialFile() const
{
   return usePotentialFile;
}

//------------------------------------------------------------------------------
//  Real* CelestialBody::GetAngularVelocity() 
//------------------------------------------------------------------------------
/**
 * This method returns the angular velocity for the body.
 *
 * @return angular velocity (Real[3]) for the body.
 *
 */
//------------------------------------------------------------------------------
Real* CelestialBody::GetAngularVelocity() 
{
   return angularVelocity;  // but how do I compute it???????
}

//------------------------------------------------------------------------------
//  Real CelestialBody::GetHourAngle() const
//------------------------------------------------------------------------------
/**
 * This method returns the hour angle for the body.
 *
 * @return hour angle for the body.
 *
 */
//------------------------------------------------------------------------------
Real  CelestialBody:: GetHourAngle() const            // const??
{
   return hourAngle;       // but how do I compute it?????????
}

//------------------------------------------------------------------------------
//  Rmatrix GetHarmonicCoefficientsSij() 
//------------------------------------------------------------------------------
/**
 * This method returns the spherical harmonic coefficients sij for the body.  It
 * will read the potential file if that is requested.
 *
 * @return sij spherical harmonic coefficients for the body.
 *
 */
//------------------------------------------------------------------------------
Rmatrix CelestialBody::GetHarmonicCoefficientsSij() 
{
   if ((usePotentialFile == true) & (!potentialFileRead))
   {
      bool err = ReadPotentialFile();
      if (err) return Rmatrix();     // should throw an exception here
   }
   return sij;
}

//------------------------------------------------------------------------------
//  Rmatrix GetHarmonicCoefficientsCij() 
//------------------------------------------------------------------------------
/**
 * This method returns the spherical harmonic coefficients cij for the body.  It
 * will read the potential file if that is requested.
 *
 * @return cij spherical harmonic coefficients for the body.
 *
 */
//------------------------------------------------------------------------------
Rmatrix CelestialBody::GetHarmonicCoefficientsCij() 
{
   if ((usePotentialFile == true) & (!potentialFileRead))
   {
      bool err = ReadPotentialFile();
      if (err) return Rmatrix();     // should throw an exception here
   }
   return cij;
}

//------------------------------------------------------------------------------
//  const StringArray& GetSupportedAtmospheres() const
//------------------------------------------------------------------------------
/**
 * This method returns a list of the supported atmosphere models for the body.
 *
 * @return a list of supported atmosphere models for the body.
 *
 */
//------------------------------------------------------------------------------
const StringArray&   CelestialBody::GetSupportedAtmospheres() const
{
   return atmManager->GetSupportedAtmospheres();
}

//------------------------------------------------------------------------------
//  std::string GetCurrentAtmosphereModel()
//------------------------------------------------------------------------------
/**
 * This method returns the name (type) of the current atmosphere model for
 * the body.
 *
 * @return the name (type) of the current atmosphere model for the body.
 *
 */
//------------------------------------------------------------------------------
std::string  CelestialBody::GetCurrentAtmosphereModel()
{
   return atmModel->GetTypeName();  // or should I go through the AtmManager?
}

//------------------------------------------------------------------------------
//  bool SetBodyType(Gmat::BodyType bType)
//------------------------------------------------------------------------------
/**
 * This method sets the body type for the body.
 *
 * @param <bType> body type for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetBodyType(Gmat::BodyType bType)
{
   return (bodyType = bType); // will need to change default parameters here too, if they
                     // are set to values that make no sense for this type of body?
}

//------------------------------------------------------------------------------
//  bool SetCentralBody(CelestialBody* cBody)
//------------------------------------------------------------------------------
/**
 * This method sets the central body for the body.
 *
 * @param <cBody> central body pointer for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetCentralBody(CelestialBody* cBody)
{
   return (centralBody = cBody);  // what else needs to be checked or changed here?
}

//------------------------------------------------------------------------------
//  bool SetSource(Gmat::PosVelSource pvSrc)
//------------------------------------------------------------------------------
/**
* This method sets the position/velocity source for the body.
 *
 * @param <pcSrc> position/velocity source for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetSource(Gmat::PosVelSource pvSrc)
{
   return (posVelSrc = pvSrc);
}

//------------------------------------------------------------------------------
//  bool SetSourceFile(PlanetaryEphem *src)
//------------------------------------------------------------------------------
/**
 * This method sets the position/velocity source file for the body.
 *
 * @param <src> position/velocity source file for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetSourceFile(PlanetaryEphem *src)
{
   theSourceFile = src;
   sourceFilename = theSourceFile->GetName();
   return true;
}

//------------------------------------------------------------------------------
//  bool SetAnalyticMethod(Gmat::AnalyticMethod aM)
//------------------------------------------------------------------------------
/**
* This method sets the analytic method for the body.
 *
 * @param <aM> analytic method for the body.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetAnalyticMethod(Gmat::AnalyticMethod aM)
{
   return (analyticMethod = aM);
}

//------------------------------------------------------------------------------
//  bool SetUsePotentialFile(bool useIt)
//------------------------------------------------------------------------------
/**
 * This method sets the flag indicating whether or not to get the mu, radius,
 * and harmonic coefficients from the potential file.
 *
 * @param <useIt> use the potential file?.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetUsePotentialFile(bool useIt)
{
   if ((usePotentialFile == false) && (useIt == true))
   {
      potentialFileRead = false;
   }
   else if ((usePotentialFile == true) && (useIt == false))
   {
      mu               = defaultMu;
      equatorialRadius = defaultEqRadius;
      coefficientSize  = defaultCoefSize;
      sij              = defaultSij;
      cij              = defaultCij;
   }
   return (usePotentialFile = useIt);
}

//------------------------------------------------------------------------------
//  bool SetAtmosphereModel(std::string toAtmModel)
//------------------------------------------------------------------------------
/**
 * This method sets the atmosphere model for the body.
 *
 * @param <toAtmModel> name (type) of the atmosphere model to use.
 *
 * @return flag indicating success of the method.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::SetAtmosphereModel(std::string toAtmModel)
{
   if (atmModel != NULL)
   {
      std::string currentModel = atmModel->GetTypeName();
      if (currentModel != toAtmModel)
      {
          delete atmModel;
      }
      else
      {
         return true;  // already the right kind of atmosphere model
      }
   }
   atmModel = atmManager->GetAtmosphere(toAtmModel);
   if (atmModel == NULL) return false;  // error creating a new atmosphere model
   return true;
}

//------------------------------------------------------------------------------
//  std::string  GetParameterText(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter text, given the input parameter ID.
 *
 * @param <id> Id for the requested parameter text.
 *
 * @return parameter text for the requested parameter.
 *
 */
//------------------------------------------------------------------------------
std::string CelestialBody::GetParameterText(const Integer id) const
{
   if (id == bodyTypeID)          return "BodyType";
   if (id == massID)              return "Mass";
   if (id == eqRadiusID)          return "EquatorialRadius";
   if (id == polarRadiusID)       return "PolarRadius";
   if (id == muID)                return "mu";
   if (id == posVelSourceID)      return "PositionVelocitySource";
   if (id == analyticMethodID)    return "AnalyticMethod";
   if (id == state1ID)            return "PositionX";
   if (id == state2ID)            return "PositionY";
   if (id == state3ID)            return "PositionZ";
   if (id == state4ID)            return "VelocityX";
   if (id == state5ID)            return "VelocityY";
   if (id == state6ID)            return "VelocityZ";
   if (id == stateTimeID)         return "StateTime";
   if (id == orderID)             return "Order";
   if (id == degreeID)            return "Degree";
   if (id == bodyNumberID)        return "BodyNumber";
   if (id == refBodyNumberID)     return "ReferenceBodyNumber";
   if (id == sourceFilenameID)    return "SourceFilename";
   if (id == sourceStartID)       return "SourceStartTime";
   if (id == sourceEndID)         return "SourceEndTime";
   if (id == usePotentialFileID)  return "UsePotentialFile";
   if (id == potentialFileNameID) return "PotentialFileName";
   if (id == angularVelocityID1)  return "AngularVelocityX";
   if (id == angularVelocityID2)  return "AngularVelocityY";
   if (id == angularVelocityID3)  return "AngularVelocityZ";
   if (id == coefficientSizeID)  return "CoefficientSize";
   if (id == sijID)               return "sij";
   if (id == cijID)               return "cij";
   if (id == hourAngleID)         return "HourAngle";
   if (id == atmModelID)          return "AtmosphereModel";
   if (id == supportedAtmModelsID) return "SupportedAtmosphereModels";

   return GmatBase::GetParameterText(id);
}

//------------------------------------------------------------------------------
//  Integer  GetParameterID(const std::string &str) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter ID, given the input parameter string.
 *
 * @param <str> string for the requested parameter.
 *
 * @return ID for the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Integer     CelestialBody::GetParameterID(const std::string &str) const
{
   if (str == "BodyType")               return bodyTypeID;
   if (str == "Mass")                   return massID;
   if (str == "EquatorialRadius")       return eqRadiusID;
   if (str == "PolarRadius")            return polarRadiusID;
   if (str == "Mu")                     return muID;
   if (str == "PositionVelocitySource") return posVelSourceID;
   if (str == "AnalyticMethod")         return analyticMethodID;
   if (str == "PositionX")              return state1ID;
   if (str == "PositionY")              return state2ID;
   if (str == "PositionZ")              return state3ID;
   if (str == "VelocityX")              return state4ID;
   if (str == "VelocityY")              return state5ID;
   if (str == "VelocityZ")              return state6ID;
   if (str == "StateTime")              return stateTimeID;
   if (str == "Order")                  return orderID;
   if (str == "Degree")                 return degreeID;
   if (str == "BodyNumber")             return bodyNumberID;
   if (str == "ReferenceBodyNumber")    return refBodyNumberID;
   if (str == "SourceFilename")         return sourceFilenameID;
   if (str == "SourceStartTime")        return sourceStartID;
   if (str == "SourceEndTime")          return sourceEndID;
   if (str == "UsePotentialFile")       return usePotentialFileID;
   if (str == "PotentialFileName")      return potentialFileNameID;
   if (str == "AngularVelocityX")       return angularVelocityID1;
   if (str == "AngularVelocityY")       return angularVelocityID2;
   if (str == "AngularVelocityZ")       return angularVelocityID3;
   if (str == "CoefficientSize")        return coefficientSizeID;
   if (str == "sij")                    return sijID;
   if (str == "cij")                    return cijID;
   if (str == "HourAngle")              return hourAngleID;
   if (str == "AtmosphereModel")        return atmModelID;
   if (str == "SupportedAtmosphereModels") return supportedAtmModelsID;
   
   return GmatBase::GetParameterID(str);
}

//------------------------------------------------------------------------------
//  Gmat::ParameterType  GetParameterType(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter type, given the input parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return parameter type of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Gmat::ParameterType CelestialBody::GetParameterType(const Integer id) const
{
   if (id == bodyTypeID)          return Gmat::INTEGER_TYPE;
   if (id == massID)              return Gmat::REAL_TYPE;
   if (id == eqRadiusID)          return Gmat::REAL_TYPE;
   if (id == polarRadiusID)       return Gmat::REAL_TYPE;
   if (id == muID)                return Gmat::REAL_TYPE;
   if (id == posVelSourceID)      return Gmat::INTEGER_TYPE;
   if (id == analyticMethodID)    return Gmat::INTEGER_TYPE;
   if (id == state1ID)            return Gmat::REAL_TYPE; // should state be RVECTOR6?
   if (id == state2ID)            return Gmat::REAL_TYPE;
   if (id == state3ID)            return Gmat::REAL_TYPE;
   if (id == state4ID)            return Gmat::REAL_TYPE;
   if (id == state5ID)            return Gmat::REAL_TYPE;
   if (id == state6ID)            return Gmat::REAL_TYPE;
   if (id == stateTimeID)         return Gmat::A1MJD_TYPE;
   if (id == orderID)             return Gmat::INTEGER_TYPE;
   if (id == degreeID)            return Gmat::INTEGER_TYPE;
   if (id == bodyNumberID)        return Gmat::INTEGER_TYPE;
   if (id == refBodyNumberID)     return Gmat::INTEGER_TYPE;
   if (id == sourceFilenameID)    return Gmat::STRING_TYPE;
   if (id == sourceStartID)       return Gmat::A1MJD_TYPE;
   if (id == sourceEndID)         return Gmat::A1MJD_TYPE;
   if (id == usePotentialFileID)  return Gmat::BOOLEAN_TYPE;
   if (id == potentialFileNameID) return Gmat::STRING_TYPE;
   if (id == angularVelocityID1)  return Gmat::REAL_TYPE;
   if (id == angularVelocityID2)  return Gmat::REAL_TYPE;
   if (id == angularVelocityID3)  return Gmat::REAL_TYPE;
   if (id == coefficientSizeID)   return Gmat::INTEGER_TYPE;
   if (id == sijID)               return Gmat::UNKNOWN_PARAMETER_TYPE;  // ?????? n x n matrix
   if (id == cijID)               return Gmat::UNKNOWN_PARAMETER_TYPE;  // ?????? n x n matrix
   if (id == hourAngleID)         return Gmat::REAL_TYPE;
   if (id == atmModelID)          return Gmat::OBJECT_TYPE;             // correct?  // string type????
   if (id == supportedAtmModelsID) return Gmat::STRINGARRAY_TYPE;
      
   return GmatBase::GetParameterType(id);
}

//------------------------------------------------------------------------------
//  std::string  GetParameterTypeString(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the parameter type string, given the input parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return parameter type string of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
std::string CelestialBody::GetParameterTypeString(const Integer id) const
{
   return GmatBase::PARAM_TYPE_STRING[GetParameterType(id)];
}

//------------------------------------------------------------------------------
//  Real  GetRealParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the Real parameter value, given the input parameter ID.
 *
 * @param <id> ID for the requested parameter value.
 *
 * @return  Real value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Real        CelestialBody::GetRealParameter(const Integer id) const
{
   if (id == massID)             return mass;
   if (id == eqRadiusID)         return equatorialRadius;
   if (id == polarRadiusID)      return polarRadius;
   if (id == muID)               return mu;
   if (id == state1ID)           return state[0];
   if (id == state2ID)           return state[1];
   if (id == state3ID)           return state[2];
   if (id == state4ID)           return state[3];
   if (id == state5ID)           return state[4];
   if (id == state6ID)           return state[5];
   if (id == angularVelocityID1) return angularVelocity[0];
   if (id == angularVelocityID2) return angularVelocity[1];
   if (id == angularVelocityID3) return angularVelocity[2];
   if (id == hourAngleID)        return hourAngle;
   // what to do about sij, cij????????????????

   return GmatBase::GetRealParameter(id);
}

//------------------------------------------------------------------------------
//  Real  SetRealParameter(const Integer id, const Real value)
//------------------------------------------------------------------------------
/**
 * This method sets the Real parameter value, given the input parameter ID.
 *
 * @param <id> ID for the parameter whose value to change.
 * @param <value> value for the parameter.
 *
 * @return  Real value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Real        CelestialBody::SetRealParameter(const Integer id, const Real value)
{
   if (id == massID)             return (mass               = value);
   if (id == eqRadiusID)         return (equatorialRadius   = value);
   if (id == polarRadiusID)      return (polarRadius        = value);
   if (id == muID)               return (mu                 = value);
   if (id == state1ID)           return (state[0]           = value);
   if (id == state2ID)           return (state[1]           = value);
   if (id == state3ID)           return (state[2]           = value);
   if (id == state4ID)           return (state[3]           = value);
   if (id == state5ID)           return (state[4]           = value);
   if (id == state6ID)           return (state[5]           = value);
   if (id == angularVelocityID1) return (angularVelocity[0] = value);
   if (id == angularVelocityID2) return (angularVelocity[1] = value);
   if (id == angularVelocityID3) return (angularVelocity[2] = value);
   if (id == hourAngleID)        return (hourAngle          = value);
   // what to do about sij, cij????????????????
   
   return GmatBase::SetRealParameter(id, value);
}

//------------------------------------------------------------------------------
//  Integer  GetIntegerParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the Integer parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return  Integer value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Integer     CelestialBody::GetIntegerParameter(const Integer id) const
{
   if (id == bodyNumberID)          return bodyNumber;
   if (id == refBodyNumberID)       return referenceBodyNumber;
   if (id == orderID)               return order;
   if (id == degreeID)              return degree;
   if (id == coefficientSizeID)     return coefficientSize;
   
   return GmatBase::GetIntegerParameter(id); // add others in later?
}

//------------------------------------------------------------------------------
//  Integer  SetIntegerParameter(const Integer id, const Integer value)
//------------------------------------------------------------------------------
/**
 * This method sets the Integer parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 * @param <value> Integer value for the requested parameter.
 *
 * @return  Integer value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
Integer     CelestialBody::SetIntegerParameter(const Integer id,
                                        const Integer value) // const?
{
   if (id == bodyNumberID)          return (bodyNumber          = value);
   if (id == refBodyNumberID)       return (referenceBodyNumber = value);
   if (id == orderID)               return (order               = value);
   if (id == degreeID)              return (degree              = value);
   if (id == coefficientSizeID)     return (coefficientSize     = value);
   
   return GmatBase::SetIntegerParameter(id,value);  // add others in later
}

//------------------------------------------------------------------------------
//  std::string  GetStringParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the string parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return  string value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
std::string CelestialBody::GetStringParameter(const Integer id) const
{
   if (id == sourceFilenameID)      return sourceFilename;
   if (id == potentialFileNameID)   return potentialFileName;
   if (id == atmModelID)
   {
      if (atmModel == NULL) return "";
      return atmModel->GetTypeName();
   }

   return GmatBase::GetStringParameter(id);
}

//------------------------------------------------------------------------------
//  std::string  SetStringParameter(const Integer id, const std::string value)
//------------------------------------------------------------------------------
/**
 * This method sets the string parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 * @param <value> string value for the requested parameter.
 *
 * @return  success flag.
 *
 */
//------------------------------------------------------------------------------
bool        CelestialBody::SetStringParameter(const Integer id,
                                       const std::string &value) // const?
{
   if (id == sourceFilenameID)
   {
      sourceFilename = value;
      return true;
   }
   if (id == potentialFileNameID)
   {
      potentialFileName = value;
      return true;
   }
   if (id == atmModelID)
   {
      return SetAtmosphereModel(value);
   }
   
   return GmatBase::SetStringParameter(id, value);
}

//------------------------------------------------------------------------------
//  bool  GetBooleanParameter(const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the bool parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return  bool value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
bool        CelestialBody::GetBooleanParameter(const Integer id) const
{
   if (id == usePotentialFileID)       return usePotentialFile;

   return GmatBase::GetBooleanParameter(id);
}

//------------------------------------------------------------------------------
//  bool  SetBooleanParameter(const Integer id, const std::string value)
//------------------------------------------------------------------------------
/**
 * This method sets the bool parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 * @param <value> bool value for the requested parameter.
 *
 * @return  success flag.
 *
 */
//------------------------------------------------------------------------------
bool        CelestialBody::SetBooleanParameter(const Integer id,
                                        const bool value) // const?
{
   if (id == usePotentialFileID)       return (usePotentialFile = value); 

   return GmatBase::SetBooleanParameter(id,value);
}

//------------------------------------------------------------------------------
//  const StringArray&   GetStringArrayParameter((const Integer id) const
//------------------------------------------------------------------------------
/**
 * This method returns the StringArray parameter value, given the input
 * parameter ID.
 *
 * @param <id> ID for the requested parameter.
 *
 * @return  StringArray value of the requested parameter.
 *
 */
//------------------------------------------------------------------------------
const StringArray& CelestialBody::GetStringArrayParameter(const Integer id) const
{
   if (id == supportedAtmModelsID)
   {
      return GetSupportedAtmospheres();
   }

   return GmatBase::GetStringArrayParameter(id);
}

//------------------------------------------------------------------------------
// protected methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//  void  Initialize(std::string withBodyType)
//------------------------------------------------------------------------------
/**
 * This method initializes the data values for the body.
 *
 * @param <withBodyType> string representation of the body type.
 *
 */
//------------------------------------------------------------------------------
void CelestialBody::Initialize(std::string withBodyType)
{
   // assuming derived classes will fill in all the specific things with
   // appropriate default values
   stateTime = 0.0;
   state.reserve(6);
   potentialFileRead = false;
   atmManager = NULL;
   atmModel = NULL;
}

//------------------------------------------------------------------------------
//  bool  ReadPotentialFile()
//------------------------------------------------------------------------------
/**
 * This method reads the potential file, if requested, and gets the mu, radius,
 * and spherical harmonic coefficients, sij and cij, from the file.
 *
 * @return flag indicating success of the file-reading.
 *
 */
//------------------------------------------------------------------------------
bool CelestialBody::ReadPotentialFile()
{
   if (potentialFileRead) return true;
   // I will need to call the method of the full field force to read the file
   // set mu, radius, sij, cij, coefficientSize
   potentialFileRead = true;
   return true;
}

//------------------------------------------------------------------------------
// private methods
//------------------------------------------------------------------------------
// none at this time

