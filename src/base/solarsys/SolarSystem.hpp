//$Header$
//------------------------------------------------------------------------------
//                                  SolarSystem
//------------------------------------------------------------------------------
// GMAT: Goddard Mission Analysis Tool.
//
// **Legal**
//
// Developed jointly by NASA/GSFC and Thinking Systems, Inc. under contract
// number S-67573-G
//
// Author: Wendy C. Shoan
// Created: 2004/01/28
//
/**
 * This is the SolarSystem class.
 *
 * @note The SolarSystem will contain pointers to all of the celestial bodies
 *       currently in use; NOTE *** for Build 2, this is Sun/Earth/Moon only***
 * @note It is assumed no classes will be derived from this one.
 */
//------------------------------------------------------------------------------


// Class (initial shell only) automatically generated by Dev-C++ New Class wizard

#ifndef SolarSystem_hpp
#define SolarSystem_hpp

#include <list>
#include <string>
#include "gmatdefs.hpp"
#include "Gmatbase.hpp"
#include "CelestialBody.hpp"
/**
 * SolarSystem class, containing pointers to all of the objects currently in
 * use.
 *
 * The SolarSystem class manages all objects that are currently defined for the
 * specified Solar System.  NOTE - For Build 2, the default Solar System
 * contains only the Sun, Earth, and Moon.
 */
class SolarSystem : public GmatBase
{
public:
   // class default constructor - creates default solar system
   // for Build 2 - this is Sun, Earth, Moon only
   SolarSystem(std::string withName = "");
   // copy constructor
   SolarSystem(const SolarSystem &ss);
   // operator=
   SolarSystem& operator=(const SolarSystem &ss);
   // class destructor
   ~SolarSystem();

   // method to add a body to the solar system
   bool           AddBody(CelestialBody* cb);
   // method to return a body of the solar system, given its name
   CelestialBody* GetBody(std::string withName);

   // method to return an array of the names of the bodies included in
   // this solar system
   StringArray    GetBodiesInUse() const;
   // method to return a flag indicating whether or not the specified
   // body is in use for this solar system
   bool           IsBodyInUse(std::string theBody) const;

   // Parameter access methods - overridden from GmatBase do I need these???
   //virtual std::string    GetParameterText(const Integer id) const;     // const?
   //virtual Integer        GetParameterID(const std::string &str) const; // const?
   //virtual Gmat::ParameterType
   //   GetParameterType(const Integer id) const;
   //virtual std::string    GetParameterTypeString(const Integer id) const;
//
   //virtual Real           GetRealParameter(const Integer id) const;
   //virtual Real           SetRealParameter(const Integer id,
   //                                        const Real value);
   //virtual Integer        GetIntegerParameter(const Integer id) const; // const?
   //virtual Integer        SetIntegerParameter(const Integer id,
   //                                           const Integer value); // const?
   //virtual std::string    GetStringParameter(const Integer id) const; // const?
   //virtual bool           SetStringParameter(const Integer id,
   //                                          const std::string &value); // const?
   //virtual bool           GetBooleanParameter(const Integer id) const; // const?
   //virtual bool           SetBooleanParameter(const Integer id,
   //                                           const bool value); // const?
   // all classes derived from GmatBase must supply this Clone method
   virtual SolarSystem* Clone(void) const;

   /// default names for each of the possible celestial bodies in the solar system
   static const std::string SUN_NAME;
   static const std::string MERCURY_NAME;
   static const std::string VENUS_NAME;
   static const std::string EARTH_NAME;
   static const std::string MOON_NAME;
   static const std::string MARS_NAME;
   static const std::string JUPITER_NAME;
   static const std::string SATURN_NAME;
   static const std::string URANUS_NAME;
   static const std::string NEPTUNE_NAME;
   static const std::string PLUTO_NAME;
   // add other moons, asteroids, comets, as needed
   // what do we do about libration points??
   
protected:

private:

   // method to find a body in the solar system, given its name
   CelestialBody* FindBody(std::string withName);

   /// list of the celestial bodies that are included in this solar system
   std::list<CelestialBody*> bodiesInUse;

   /// the names of the bodies in use
   StringArray bodyStrings;  // is this needed, or just a convenience?
      
};

#endif // SolarSystem_hpp

