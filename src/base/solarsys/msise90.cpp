/*
  Port of MSISE90 code from fortran to C / C++
  a. i. solutions, Inc.
  Lanham, MD
  ( 301 ) 306 - 1756
  August 2002

  Modified for GMAT by 
  D. Conway, Thinking Systems, Inc. 
  
  original fortran by
  Alan E. Hedin, 10 / 9/90
  PACF::HEDIN
  ( 301 )  - 286 - 8393
  Version: 10 - MAR - 1993 15:31:11.76

  Programmers Note:
  arrays have been adjusted to account for 1 to N versus 0 to (N-1)
  arrays have been adjusted to account fot row versus column major
  initialization of variable to zero only added to remove compiler warnings
*/

#include "msise90.hpp"

#include <math.h>
#include <assert.h>

// arrays concatenated
// fortran used overlay of common block
    // TEMPERATURE
Real MSISE90::PT[150] = {
    //MSISE90::PT1[50] = {
     9.96040E-01, 3.85528E-02, 3.03445E-03,-1.05531E-01,-6.07134E-03,
    -5.16278E-04,-1.15622E-01, 2.02240E-03, 9.90156E-03,-1.27371E-01,
    -3.02449E-02, 1.23512E-02,-5.26277E-03,-8.45398E+00, 0.00000E+00,
     1.42370E-02, 0.00000E+00, 1.25818E+02, 8.05486E-03, 1.64419E-03,
    -6.21452E-06, 3.11701E-03, 0.00000E+00, 3.86578E-03, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00,-6.41110E-06,
     0.00000E+00, 3.00150E+01, 5.33297E-03, 3.89146E-03, 2.04725E-03,
     0.00000E+00, 0.00000E+00,-1.92645E-02, 2.75905E+00, 1.47284E-03,
     3.41345E-04,-1.17388E-03,-3.54589E-04, 1.13139E-01, 1.69134E-01,
     5.08295E-03, 3.65016E-05, 4.26385E-03, 1.15102E-04, 5.11819E-03,//};
   //MSISE90::PT2[50] = {
     6.09108E-03, 4.04995E-05, 1.53049E-03, 2.41470E-05, 2.30764E-03,
     1.55267E-03, 1.33722E-03,-1.82318E-03,-2.63007E+02, 0.00000E+00,
     1.37337E-03, 9.95774E-04, 0.00000E+00,-1.08983E+02, 5.62606E-03,
     5.94053E-03, 1.09358E-03, 0.00000E+00,-1.33410E-02,-2.43409E-02,
    -1.35688E-02, 3.11370E+04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -2.83023E+03, 8.45583E-04, 5.38706E-04, 0.00000E+00, 2.47956E+02,
     2.92246E-03, 0.00000E+00, 0.00000E+00, 7.47703E-05, 8.87993E-04,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -1.16540E-02,-4.49173E-03,-3.53189E-04,-1.73933E-04,-1.53218E-04,
    -5.65411E-01, 7.77272E-03,-9.11784E+01, 6.45187E-04, 0.00000E+00,//};
   //MSISE90::PT3[50] = {
    -8.37685E-04, 2.42318E-03, 4.73796E-03,-3.01801E-03,-4.23564E-03,
    -2.48289E-03, 9.19286E-04, 2.16372E-03, 8.63968E-04, 1.89689E-03,
     4.15654E-03, 0.00000E+00, 1.18068E-02, 3.31190E-03, 0.00000E+00,
     1.20222E-03, 0.00000E+00, 0.00000E+00,-3.07246E+00, 0.00000E+00,
     0.00000E+00, 6.72403E-04, 1.08930E-03, 9.72278E-04, 4.68242E+00,
    -3.15034E-04, 4.00059E-03, 5.15036E-03, 1.62989E-03, 1.08824E-03,
     9.95261E-04, 4.18955E+00,-3.64059E-01, 1.70182E-03, 0.00000E+00,
     0.00000E+00,-3.20120E+00, 0.00000E+00, 5.80206E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00};

    // HE DENSITY
Real MSISE90::PD[9][150] = {
   //MSISE90::PA1[50] = {
     1.04934E+00,-2.88362E-02,-2.07095E-01,-1.03314E-01,-7.02373E-03,
     1.29664E-02, 4.08853E-01,-9.19895E-03,-1.88660E-02, 1.40927E+00,
     1.75033E-01, 1.87351E-02, 1.10979E-01,-7.42871E+00, 0.00000E+00,
     2.67143E-01,-5.95979E-02, 1.05038E+02,-8.40963E-02,-6.97632E-04,
     2.06521E-06, 7.65306E-04, 0.00000E+00, 0.00000E+00, 1.26762E-01,
     1.28876E-01,-5.04479E-02,-1.30735E-02,-2.24348E-02, 0.00000E+00,
     0.00000E+00,-1.50832E+02,-6.29928E-03, 0.00000E+00,-4.07760E-03,
     0.00000E+00, 0.00000E+00, 5.25725E-02,-3.11486E+01,-3.13351E-03,
     2.75838E-03, 0.00000E+00, 0.00000E+00, 1.11247E-01, 1.08815E-01,
    -4.66713E-02, 0.00000E+00,-3.29329E-03, 0.00000E+00, 1.67838E-03,//};
   //MSISE90::PA2[50] = {
    -9.16691E-03, 3.45044E-05,-9.71806E-03, 0.00000E+00,-2.04672E-03,
    -7.86899E-03,-7.98285E-03, 5.36515E-03,-5.31172E+03, 0.00000E+00,
    -6.42781E-03,-1.71690E-03, 0.00000E+00,-6.79131E+01,-1.79912E-02,
    -1.58305E-02,-7.12313E-03, 0.00000E+00, 2.53477E-02, 8.52960E-02,
     1.02163E-01, 2.95009E+04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -6.84625E+03,-6.19098E-03,-2.69289E-03, 0.00000E+00,-5.20231E+02,
    -6.33463E-03, 0.00000E+00, 0.00000E+00,-6.02428E-03,-4.07077E-03,
     5.42264E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     4.07560E-02, 2.82288E-02, 9.08088E-03, 0.00000E+00, 0.00000E+00,
    -4.05204E-01,-5.97931E-02,-7.31823E+01,-2.06620E-03, 0.00000E+00,//};
   //MSISE90::PA3[50] = {
    -3.72723E-03,-1.88146E-02,-1.01794E-02, 8.04633E-03, 1.01090E-02,
     8.73253E-03, 2.38268E-02, 4.80444E-03, 1.71088E-03, 3.96369E-02,
    -2.13809E-02, 0.00000E+00,-1.02588E-01,-5.91702E-03, 0.00000E+00,
     2.70923E-03, 0.00000E+00, 0.00000E+00,-1.75043E+02, 6.03489E-01,
    -6.17589E-01, 8.38098E-03, 1.83871E-03,-7.05329E-04,-4.06644E+00,
    -5.09347E-03,-2.84344E-02,-1.24160E-02, 1.33665E-02, 3.93410E-03,
    -5.03723E-04,-4.57683E+00,-5.29542E-01,-4.25812E-03, 0.00000E+00,
     0.00000E+00, 1.91541E+01, 0.00000E+00, 3.23247E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

    // O DENSITY
   //MSISE90::PB1[50] = {
     9.31113E-01,-1.38721E-01,-1.33457E-01,-5.29542E-02,-4.44983E-03,
     1.35264E-02, 5.98075E-02,-3.62880E-02,-3.12798E-02, 3.72068E-01,
     2.95974E-02, 1.20509E-02, 5.21995E-02,-7.78888E+00, 0.00000E+00,
     1.18634E-01,-2.04495E-02, 1.03280E+02, 9.82432E-02, 4.77694E-04,
     0.00000E+00, 2.74372E-03, 0.00000E+00, 0.00000E+00, 7.57809E-02,
     1.71403E-01,-1.05205E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-8.73348E+00,-5.81094E-03, 0.00000E+00,-8.14944E-03,
     0.00000E+00, 0.00000E+00, 5.17255E-02,-1.53028E+01,-3.48932E-03,
     9.61771E-04, 5.57732E-03,-4.54180E-04, 9.88213E-02, 9.40456E-02,
    -3.18797E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.32122E-03,//};
   //MSISE90::PB2[50] = {
    -6.00220E-03, 2.77654E-05,-3.22019E-03, 0.00000E+00,-3.78551E-03,
    -3.34809E-03,-1.70668E-03, 0.00000E+00, 6.36184E+03, 0.00000E+00,
     1.59986E-03,-3.88204E-03,-1.64825E-03,-7.47955E+01,-1.05360E-02,
    -9.45723E-03,-1.59824E-03,-7.06730E-04,-1.68513E-02,-1.13023E-01,
    -6.36637E-02,-1.37709E+04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -1.52368E+04,-5.86061E-03,-2.53108E-03, 0.00000E+00,-2.54837E+03,
    -3.28988E-03, 0.00000E+00, 0.00000E+00,-2.76364E-03, 9.67923E-03,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     4.34255E-02, 1.14020E-02,-6.18447E-03, 0.00000E+00, 0.00000E+00,
    -3.02568E-01,-3.27694E-02,-6.71589E+01,-2.28340E-03, 0.00000E+00,//};
   //MSISE90::PB3[50] = {
     3.06230E-03,-4.65113E-03,-9.73421E-03, 1.28326E-02, 7.88553E-03,
     7.97197E-03,-1.20760E-02,-7.67547E-03,-1.20755E-03,-2.98523E-02,
    -1.26560E-02, 0.00000E+00,-5.68350E-02,-1.53039E-02, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.42911E-03,-4.01347E-03,-2.19074E-03, 3.11281E+00,
     3.23251E-03,-6.39523E-03,-6.63069E-03,-3.04403E-04,-4.01920E-03,
    -1.18708E-03, 4.15211E+00,-2.01896E-01, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // N2 DENSITY
   //MSISE90::PC1[50] = {
     1.06903E+00, 0.00000E+00, 0.00000E+00, 3.66210E-03, 0.00000E+00,
     1.90412E-02,-1.78929E-03, 0.00000E+00,-3.92257E-02,-1.19444E-01,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-8.45398E+00, 0.00000E+00,
     2.08180E-02, 0.00000E+00, 1.39638E+02, 8.98481E-02, 0.00000E+00,
     0.00000E+00, 3.77113E-04, 0.00000E+00, 0.00000E+00, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-2.36325E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-2.43022E-03,
    -3.99776E-06, 6.32343E-03, 5.48144E-03, 1.13139E-01, 1.69134E-01,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PC2[50] = {
     0.00000E+00, 2.41470E-05, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PC3[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TLB
   //MSISE90::PD1[50] = {
     9.76619E-01, 0.00000E+00, 0.00000E+00,-2.00200E-02, 0.00000E+00,
    -9.38391E-03,-1.95833E-03, 0.00000E+00, 1.31480E-02,-1.92414E-02,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-8.45398E+00, 0.00000E+00,
     1.07674E-02, 0.00000E+00, 8.93820E+01, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 5.68478E-04, 0.00000E+00, 0.00000E+00, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 4.66814E-03, 0.00000E+00, 0.00000E+00,
     5.11651E-05, 2.55717E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-2.60147E-03,-8.08556E-04, 1.13139E-01, 1.69134E-01,
     6.64196E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PD2[50] = {
     5.82026E-03, 2.41470E-05, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 6.21998E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PD3[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // O2 DENSITY
   //MSISE90::PE1[50] = {
     9.31402E-01, 1.37976E-01, 0.00000E+00, 3.23736E-04, 0.00000E+00,
    -9.10906E-03, 7.07506E-02, 0.00000E+00,-5.16650E-02, 6.89755E-02,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-8.45398E+00, 0.00000E+00,
     2.81140E-02, 0.00000E+00, 7.36009E+01, 5.96604E-02, 0.00000E+00,
     0.00000E+00,-1.51792E-03, 0.00000E+00, 0.00000E+00, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 9.48758E+00, 8.84541E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 1.13139E-01, 1.69134E-01,
     1.45192E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PE2[50] = {
     1.07906E-02, 2.99942E-05, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-1.48930E-02,
    -7.87184E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -6.83420E-02,-4.41778E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.29730E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PE3[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // AR DENSITY
   //MSISE90::PF1[50] = {
     8.68053E-01, 2.36364E-01, 1.34306E-01, 1.03086E-02, 0.00000E+00,
    -3.79164E-03,-1.57806E-01, 0.00000E+00,-5.87644E-02,-3.12508E-01,
     0.00000E+00, 4.37387E-02,-3.54091E-02,-2.23636E+01, 0.00000E+00,
    -5.33976E-02, 0.00000E+00, 1.14091E+02, 5.17497E-02, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 3.42702E+02, 1.57033E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-3.66278E-03,
    -1.16193E-03, 0.00000E+00, 0.00000E+00, 1.13139E-01, 1.69134E-01,
     1.78431E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PF2[50] = {
     1.62864E-02, 3.16963E-05, 1.27968E-02, 0.00000E+00, 0.00000E+00,
    -7.04599E-03, 2.07921E-03, 6.36660E-03, 2.29940E+04, 0.00000E+00,
     1.27833E-02,-2.08036E-03,-4.61820E-03,-6.29391E+01,-1.20745E-02,
     1.36675E-02, 1.36011E-02,-5.37162E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     1.92509E+04, 8.35522E-03, 4.19439E-03, 0.00000E+00, 1.20366E+04,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-1.00034E-02,-2.33267E-03,
     9.72374E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -2.65079E-02,-2.09125E-02,-1.09465E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.17252E-02,-7.12385E+01,-1.89428E-03, 0.00000E+00,//};
   //MSISE90::PF3[50] = {
    -6.02006E-03, 1.69058E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.90646E-02,
     3.48971E-03, 0.00000E+00, 5.01174E-02, 5.50595E-02, 0.00000E+00,
    -9.55897E-03, 0.00000E+00, 0.00000E+00,-1.51693E+03, 0.00000E+00,
     0.00000E+00, 1.29306E-02, 2.69567E-03, 0.00000E+00, 3.92243E+00,
    -8.47690E-03, 1.16896E-02, 0.00000E+00, 1.48967E-02, 5.44521E-03,
     0.00000E+00, 5.64918E+00, 0.00000E+00,-7.72178E-03, 0.00000E+00,
     0.00000E+00,-7.34042E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

    // H DENSITY
   //MSISE90::PG1[50] = {
     1.27515E+00,-2.10472E-01,-1.77924E-01, 2.18900E-01, 2.88436E-02,
     1.90077E-02, 2.91001E-01, 2.17437E-02,-1.05186E-02, 4.36141E-01,
     1.07605E-01, 3.30755E-02, 4.00581E-02,-9.58051E+00, 0.00000E+00,
     1.54028E-02, 0.00000E+00, 7.34194E+01, 4.96540E-02,-5.95906E-03,
     3.84512E-05,-1.36000E-02, 0.00000E+00, 0.00000E+00, 1.32397E-01,
     2.13315E-01,-4.16610E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 1.46276E+02,-1.98408E-02, 0.00000E+00, 1.32530E-02,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-1.04687E-04,
    -1.47562E-03, 0.00000E+00, 0.00000E+00, 1.13139E-01, 1.69134E-01,
    -1.26913E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,-6.08370E-03,//};
   //MSISE90::PG2[50] = {
    -2.57587E-02, 3.19022E-05, 0.00000E+00, 0.00000E+00, 1.56644E-02,
     1.03640E-02, 1.05771E-03, 0.00000E+00, 3.57949E+03, 0.00000E+00,
    -1.25672E-03, 1.52783E-03, 1.30518E-03, 7.55558E+00,-9.20341E-03,
    -2.09142E-02,-1.34106E-02, 0.00000E+00,-4.83312E-02, 8.30900E-02,
     9.88009E-02,-1.41148E+04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -1.05513E+03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 6.73442E-03, 2.01691E-03,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     5.98019E-02, 6.33298E-03,-1.12871E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-1.28604E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PG3[50] = {
    -4.94960E-03,-1.36415E-02,-1.15039E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-5.86860E-03,-1.41732E-03, 2.13697E-03, 2.63845E+00,
    -8.34186E-03,-1.87336E-02,-1.90870E-02,-8.03810E-03,-2.84279E-03,
     2.56722E-03, 1.71429E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

    // N DENSITY
   //MSISE90::PH1[50] = {
     5.73587E+01,-3.98747E-01, 0.00000E+00,-5.29554E-01,-5.82186E-03,
     7.14177E-02,-6.79279E-01,-1.67715E-01,-6.42434E-02,-2.11569E-01,
    -1.59922E-01,-1.71024E-04,-1.15885E-01, 6.51603E+00, 0.00000E+00,
    -1.76683E-01, 6.50395E-02, 1.43504E+00, 9.28208E-02, 5.11662E-03,
     0.00000E+00, 9.95121E-03, 0.00000E+00, 0.00000E+00, 1.32397E-01,
     2.13315E-01, 1.01451E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 5.67667E+01, 2.38192E-03, 0.00000E+00,-1.88240E-02,
     0.00000E+00, 0.00000E+00, 4.76218E-02, 2.35206E+01, 4.75901E-03,
     5.76162E-03, 1.51815E-02,-1.92730E-02, 1.13139E-01, 1.69134E-01,
    -2.88771E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.18418E-03,//};
   //MSISE90::PH2[50] = {
    -3.68927E-03, 3.14704E-05, 8.82198E-03, 0.00000E+00,-1.92562E-02,
    -2.58674E-03,-2.19913E-02, 0.00000E+00, 4.38655E+03, 0.00000E+00,
     7.60126E-03, 2.59438E-03, 1.72310E-03, 7.79204E+01, 7.97786E-04,
    -7.70510E-03, 1.90982E-03, 2.72707E-03, 1.01016E-02, 1.16537E-01,
    -3.12236E-03, 1.39783E+04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -1.30712E+03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-3.20544E-03,-2.06970E-02,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     1.59010E-02,-1.91427E-03,-3.42829E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-3.45379E-02, 8.94518E+01, 1.71556E-03, 0.00000E+00,//};
   //MSISE90::PH3[50] = {
    -7.65278E-03,-2.08987E-04,-1.57393E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-8.60673E-03,-1.19922E-02,-6.46356E-03,-3.00107E+00,
    -9.32511E-03,-1.50205E-02,-8.67835E-03,-7.64801E-03,-1.31495E-02,
    -6.76720E-03,-1.82396E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

    // SPARE
   //MSISE90::PI1[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-8.45398E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 1.13139E-01, 1.69134E-01,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PI2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PI3[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00};

     // S PARAM  
Real MSISE90::PS[150] = {
   //MSISE90::PJ1[50] = {
     9.51363E-01,-4.67542E-02, 1.20260E-01, 0.00000E+00, 0.00000E+00,
     1.91357E-02, 0.00000E+00, 0.00000E+00, 1.25429E-03,-1.33240E-01,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-8.45398E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.52317E-03, 0.00000E+00,-9.73404E-03, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-7.18482E-04, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 7.87683E-03,-2.33698E-03, 1.13139E-01, 1.69134E-01,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PJ2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PJ3[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00};

     // TURBO
const Real MSISE90::PDL[2][25] = {
   //MSISE90::PK1[50] = {
     9.33804E-01, 5.47446E+00, 1.53263E-01, 9.19303E-01, 1.64109E+01,
     4.27083E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.40925E-01,
     1.15897E+00, 4.71094E-01, 1.09459E+00, 5.25012E+00, 1.00000E+00,
     1.00000E+00, 1.03999E+00, 7.67132E-01, 1.10514E+00, 1.75636E+00,
     1.10845E+00, 2.33439E+00, 7.96532E-01, 4.31520E+00, 4.07300E+00,
     1.22807E+02, 2.39547E-01, 2.53791E-06, 8.42931E-01, 1.04192E+00,
     2.00202E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 9.62736E-01};

     // LOWER BOUNDARY
const Real MSISE90::PTM[10] = {
     1.04130E+03, 3.86000E+02, 1.95000E+02, 1.66728E+01, 2.13000E+02, 
     1.20000E+02, 2.40000E+02, 1.87000E+02,-2.00000E+00, 0.00000E+00};

const Real MSISE90::PDM[8][10] = {
     2.45600E+07, 6.71072E-06, 1.00000E+02, 0.00000E+00, 1.10000E+02, 1.00000E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     8.59400E+10, 5.40000E-01, 1.05000E+02,-8.00000E+00, 1.10000E+02, 1.00000E+01, 9.00000E+01, 2.00000E+00, 0.00000E+00, 0.00000E+00,
     2.81000E+11, 0.00000E+00, 1.05000E+02, 2.80000E+01, 2.89500E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     3.30000E+10, 2.68270E-01, 1.05000E+02, 0.00000E+00, 1.10000E+02, 1.00000E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     1.33000E+09, 1.19615E-02, 1.05000E+02, 0.00000E+00, 1.10000E+02, 1.00000E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     1.76100E+05, 1.00000E+00, 9.50000E+01,-8.00000E+00, 1.10000E+02, 1.00000E+01, 9.00000E+01, 2.00000E+00, 0.00000E+00, 0.00000E+00,
     1.00000E+07, 1.00000E+00, 1.05000E+02,-8.00000E+00, 1.10000E+02, 1.00000E+01, 9.00000E+01, 2.00000E+00, 0.00000E+00, 0.00000E+00,
     1.00000E+07, 1.00000E+00, 1.05000E+02,-8.00000E+00, 1.10000E+02, 1.00000E+01, 9.00000E+01, 2.00000E+00, 0.00000E+00, 0.00000E+00};

     // TN1[2]
const Real MSISE90::PTL[4][100] = {
   //MSISE90::PL1[50] = {
     1.02083E+00, 4.08449E-02,-2.34582E-02, 4.38274E-04,-1.52380E-02,
    -2.09089E-02, 4.46355E-03,-3.41250E-03,-1.12961E-02,-7.03277E-02,
    -4.82724E-02, 0.00000E+00, 0.00000E+00,-6.20496E+00, 0.00000E+00,
    -9.80197E-03,-1.45065E-02,-1.13226E+02, 2.28455E-02, 0.00000E+00,
     0.00000E+00, 4.93658E-04, 0.00000E+00, 3.79078E-03, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-8.89051E+03, 2.25900E-03, 1.76142E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-2.55015E-04,
     2.21388E-03,-5.99073E-04,-3.52331E-03, 1.13139E-01, 1.69134E-01,
     7.79156E-03,-1.93458E-03,-1.08596E-02,-4.39285E-04, 0.00000E+00,//};
   //MSISE90::PL2[50] = {
     3.83994E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 6.76608E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN1[3]
   //MSISE90::PM1[50] = {
     9.24880E-01, 7.41986E-02,-6.37629E-03, 6.00575E-03, 1.29382E-03,
     6.97550E-03,-1.70782E-03, 2.80584E-03,-8.87214E-03,-4.35703E-02,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 4.31515E+00, 0.00000E+00,
    -1.81474E-02,-6.06627E-02,-8.43503E+01, 8.46944E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-2.17081E-02,-2.19500E-03, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.47580E+02, 4.41585E-03, 7.80466E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 6.44155E-04,
    -2.49166E-03, 2.90482E-03,-3.40501E-04, 1.13139E-01, 1.69134E-01,
    -6.01460E-03,-1.63368E-03, 0.00000E+00,-4.31340E-03, 0.00000E+00,//};
   //MSISE90::PM2[50] = {
     4.53979E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-5.43660E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN1[4]
   //MSISE90::PN1[50] = {
     9.72669E-01,-4.26748E-02, 1.12876E-02,-8.44951E-03, 7.04114E-03,
     1.26036E-02,-3.88164E-03,-5.20509E-04,-6.09710E-04, 1.31603E-01,
     1.13804E-01, 0.00000E+00, 0.00000E+00,-6.15970E+00, 0.00000E+00,
    -2.14214E-02,-6.62913E-02,-2.02884E-01, 2.35350E-02, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 1.13573E-02,-1.84905E-03, 1.32397E-01,
     2.13315E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 1.42645E+00,-2.64405E-03,-5.57771E-04, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-2.20621E+01,-1.10313E-03,
     3.97063E-05, 5.47632E-05, 3.57577E-03, 1.13139E-01, 1.69134E-01,
     0.00000E+00, 1.18897E-03, 0.00000E+00, 7.62305E-04, 0.00000E+00,//};
   //MSISE90::PN2[50] = {
    -3.52015E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-9.52550E-04,
     8.56253E-04, 4.33114E-04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.21223E-03,
     2.38694E-04, 9.15245E-04, 1.28385E-03, 8.67668E-04,-5.61425E-06,
     1.04445E+00, 3.41112E+01, 0.00000E+00,-8.40704E-01,-2.39639E+02,
     7.06668E-01,-2.05873E+01,-3.63696E-01, 2.39245E+01, 1.00000E+01,
    -1.06657E-03,-7.67292E-04, 1.54534E-04, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

    // TN1[5] TN2[1]
   //MSISE90::PO1[50] = {
     9.99368E-01, 4.33893E-02,-2.07009E-03, 1.09617E-03, 1.05440E-03,
     4.83408E-04, 9.77040E-04, 9.24791E-04, 4.80247E-04, 4.94737E-02,
     1.05985E-03, 0.00000E+00, 0.00000E+00, 2.74409E+00, 0.00000E+00,
    -4.96656E-03,-1.51684E-02, 4.65158E+01,-7.51133E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 6.63808E-04, 1.32397E-01,
     2.13315E-01,-2.06652E-03,-6.32046E-03, 0.00000E+00, 0.00000E+00,
     5.94545E-03,-1.90958E+02, 0.00000E+00,-4.16892E-03, 0.00000E+00,
    -1.67499E-02, 0.00000E+00, 2.58987E-03, 5.97781E+02, 0.00000E+00,
     0.00000E+00, 4.44890E-04, 4.66444E-04, 1.13139E-01, 1.69134E-01,
     0.00000E+00, 7.11360E-04, 1.32186E-02, 2.23948E-03, 0.00000E+00,//};
   //MSISE90::PO2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.60571E-03,
     6.28078E-04, 5.05469E-05, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-1.57829E-03,
    -4.00855E-04, 5.04077E-05,-1.39001E-03,-2.33406E-03,-4.81197E-04,
     1.46758E+00, 6.20332E+00, 0.00000E+00, 3.66476E-01,-6.19760E+01,
     3.09198E-01,-1.98999E+01, 0.00000E+00,-3.29933E+02, 0.00000E+00,
    -1.10080E-03,-9.39310E-05, 1.39638E-04, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00};

     // TN2[2]
const Real MSISE90::PMA[10][100] = {
   //MSISE90::PP1[50] = {
     9.81637E-01,-1.41317E-03, 3.87323E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-3.58707E-02,
    -8.63658E-03, 0.00000E+00, 0.00000E+00,-2.02226E+00, 0.00000E+00,
    -8.69424E-03,-1.91397E-02, 8.76779E+01, 4.52188E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-7.07572E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -4.11210E-03, 3.50060E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     2.23760E-02, 0.00000E+00,-8.36657E-03, 1.61347E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-1.45130E-02, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PP2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.24152E-03,
     6.43365E-04, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.33255E-03,
     2.42657E-03, 1.60666E-03,-1.85728E-03,-1.46874E-03,-4.79163E-06,
     1.22464E+00, 3.53510E+01, 0.00000E+00, 4.49223E-01,-4.77466E+01,
     4.70681E-01, 8.41861E+00,-2.88198E-01, 1.67854E+02, 0.00000E+00,
     7.11493E-04, 6.05601E-04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN2[3]
   //MSISE90::PQ1[50] = {
     1.00422E+00,-7.11212E-03, 5.24480E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-5.28914E-02,
    -2.41301E-02, 0.00000E+00, 0.00000E+00,-2.12219E+01, 0.00000E+00,
    -3.28077E-03, 1.65727E-02, 1.68564E+00,-6.68154E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 8.42365E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-4.34645E-03,-1.03830E-02,-8.08279E-03, 2.16780E-02,
     0.00000E+00,-1.38459E+02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     1.45155E-02, 0.00000E+00, 7.04573E-03,-4.73204E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 1.08767E-02, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PQ2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 5.21769E-04,
    -2.27387E-04, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 3.26769E-03,
     3.16901E-03, 4.60316E-04,-1.01431E-04, 1.02131E-03, 9.96601E-04,
     1.25707E+00, 2.50114E+01, 0.00000E+00, 4.24472E-01,-2.77655E+01,
     3.44625E-01, 2.75412E+01, 0.00000E+00, 7.94251E+02, 0.00000E+00,
     2.45835E-03, 1.38871E-03, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN2[4] TN3[1]
   //MSISE90::PR1[50] = {
     1.01890E+00,-2.46603E-02, 1.00078E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-6.70977E-02,
    -4.02286E-02, 0.00000E+00, 0.00000E+00,-2.29466E+01, 0.00000E+00,
     2.26580E-03, 2.63931E-02, 3.72625E+01,-6.39041E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-1.85291E-03,-7.47019E-03,-7.07265E-03, 0.00000E+00,
     0.00000E+00, 1.39717E+02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     9.58383E-03, 0.00000E+00, 9.19771E-03,-3.69121E+02, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-1.57067E-02, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PR2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-2.92953E-03,
    -2.77739E-03,-4.40092E-04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.47280E-03,
     2.95035E-04,-1.81246E-03, 2.81945E-03, 4.27296E-03, 9.78863E-04,
     1.40545E+00,-6.19173E+00, 0.00000E+00, 0.00000E+00,-7.93632E+01,
     4.44643E-01,-4.03085E+02, 0.00000E+00, 1.15603E+01, 0.00000E+00,
     2.25068E-03, 8.48557E-04,-2.98493E-04, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN3[2]
   //MSISE90::PS1[50] = {
     9.75801E-01, 3.80680E-02,-3.05198E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 3.85575E-02,
     5.04057E-02, 0.00000E+00, 0.00000E+00,-1.76046E+02, 0.00000E+00,
    -1.48297E-03,-3.68560E-03, 3.02185E+01,-3.23338E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-1.15558E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 4.89620E-03, 1.44594E-02, 9.91215E-03,-1.00616E-02,
    -8.21324E-03,-1.57757E+02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     1.53569E-02, 0.00000E+00, 6.63564E-03, 4.58410E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-2.51280E-02, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PS2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-8.73148E-04,
    -1.29648E-03,-7.32026E-05, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-4.68110E-03,
    -4.66003E-03,-1.31567E-03,-7.39390E-04, 6.32499E-04,-4.65588E-04,
    -1.29785E+00,-1.57139E+02, 0.00000E+00, 2.58350E-01,-3.69453E+01,
     4.10672E-01, 9.78196E+00,-1.52064E-01,-3.85084E+03, 0.00000E+00,
    -8.52706E-04,-1.40945E-03,-7.26786E-04, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN3[3]
   //MSISE90::PU1[50] = {
     9.60722E-01, 7.03757E-02,-3.00266E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 2.22671E-02,
     4.10423E-02, 0.00000E+00, 0.00000E+00,-1.63070E+02, 0.00000E+00,
     5.40747E-04, 7.79481E-03, 1.44908E+02, 1.51484E-04, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-1.41844E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 5.77884E-03, 1.06073E-02, 5.36685E-03, 9.74319E-03,
     0.00000E+00,-2.88015E+03, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     1.97547E-02, 0.00000E+00,-4.44902E-03,-2.92760E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 2.34419E-02, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PU2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-4.65325E-04,
    -5.50628E-04, 3.31465E-04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-2.06179E-03,
    -3.08575E-03,-7.93589E-04,-1.08629E-04, 5.95511E-04,-9.05050E-04,
     1.18997E+00, 4.15924E+01, 0.00000E+00,-4.72064E-01,-9.47150E+02,
     3.98723E-01, 1.98304E+01, 0.00000E+00, 3.73219E+03, 0.00000E+00,
    -1.50040E-03,-1.14933E-03,-1.56769E-04, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN3[4]
   //MSISE90::PV1[50] = {
     1.03123E+00,-7.05124E-02, 8.71615E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-3.82621E-02,
    -9.80975E-03, 0.00000E+00, 0.00000E+00, 2.89286E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 8.66153E+01, 7.91938E-04, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 4.68917E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 7.86638E-03, 9.57341E-03, 5.72268E-03, 9.90827E-03,
     0.00000E+00, 6.55573E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00,-4.00200E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 7.07457E-03, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PV2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-2.04970E-04,
     1.21560E-03,-8.05579E-06, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-2.49941E-03,
    -4.57256E-04,-1.59311E-04, 2.96481E-04,-1.77318E-03,-6.37918E-04,
     1.02395E+00, 1.28172E+01, 0.00000E+00, 1.49903E-01,-2.63818E+01,
     0.00000E+00, 4.70628E+01,-2.22139E-01, 4.82292E-02, 0.00000E+00,
    -8.67075E-04,-5.86479E-04, 5.32462E-04, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TN3[5] SURFACE TEMP TSL
   //MSISE90::PW1[50] = {
     1.00828E+00,-9.10404E-02,-2.26549E-02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-2.32420E-02,
    -9.08925E-03, 0.00000E+00, 0.00000E+00, 3.36105E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-1.24957E+01,-5.87939E-03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.79765E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 2.01237E+03, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-1.75553E-02, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PW2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 3.29699E-03,
     1.26659E-03, 2.68402E-04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 1.17894E-03,
     1.48746E-03, 1.06478E-04, 1.34743E-04,-2.20939E-03,-6.23523E-04,
     6.36539E-01, 1.13621E+01, 0.00000E+00,-3.93777E-01, 2.38687E+03,
     0.00000E+00, 6.61865E+02,-1.21434E-01, 9.27608E+00, 0.00000E+00,
     1.68478E-04, 1.24892E-03, 1.71345E-03, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TGN3[2] SURFACE GRAD TSLG
   //MSISE90::PX1[50] = {
     1.57293E+00,-6.78400E-01, 6.47500E-01, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-7.62974E-02,
    -3.60423E-01, 0.00000E+00, 0.00000E+00, 1.28358E+02, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 4.68038E+01, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-1.67898E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.90994E+04, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 3.15706E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PX2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TGN2[1] TGN1[2]
   //MSISE90::PY1[50] = {
     8.66492E-01, 3.55807E-01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-1.12111E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 1.82458E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 1.01024E+02, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 6.54251E+02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PY2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,-1.56959E-02,
     1.91001E-02, 3.15971E-02, 1.00982E-02,-6.71565E-03, 2.57693E-03,
     1.38692E+00, 2.82132E-01, 0.00000E+00, 0.00000E+00, 3.81511E+02,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,//};

     // TGN3[1] TGN2[2]
   //MSISE90::PZ1[50] = {
     1.06029E+00,-5.25231E-02, 3.73034E-01, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 3.31072E-02,
    -3.88409E-01, 0.00000E+00, 0.00000E+00,-1.65295E+02, 0.00000E+00,
    -4.38916E-02,-3.22716E-01,-8.82393E+01, 1.18458E-01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00,-1.19782E-01,-2.13801E-01, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 2.62229E+01, 0.00000E+00, 0.00000E+00, 0.00000E+00,
    -4.35863E-01, 0.00000E+00, 0.00000E+00,-5.37443E+01, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00,-4.55788E-01, 0.00000E+00, 0.00000E+00,//};
   //MSISE90::PZ2[50] = {
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 3.84009E-02,
     3.96733E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 5.05494E-02,
     7.39617E-02, 1.92200E-02,-8.46151E-03,-1.34244E-02, 1.96338E-02,
     1.50421E+00, 1.88368E+01, 0.00000E+00, 0.00000E+00,-5.13114E+01,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     5.11923E-02, 3.61225E-02, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00};

     // MIDDLE ATMOSPHERE AVERAGES
const Real MSISE90::PAVGM[10] = {
     2.61000E+02, 2.64000E+02, 2.29000E+02, 2.17000E+02, 2.17000E+02,
     2.23000E+02, 2.86760E+02,-2.93940E+00, 2.50000E+00, 0.00000E+00}; 

MSISE90::MSISE90()
{
   IYDL[0]  = -999;
   IYDL[1]  = -999;
   SECL[0]  = -999.0;
   SECL[1]  = -999.0;
   GLATL[0] = -999.0;
   GLATL[1] = -999.0;
   GLL[0]   = -999.0;
   GLL[1]   = -999.0;
   STLL[0]  = -999.0;
   STLL[1]  = -999.0;
   FAL[0]   = -999.0;
   FAL[1]   = -999.0;
   FL[0]    = -999.0;
   FL[1]    = -999.0;

   int i, j;

   for ( i = 0; i < 2; i++ )
      for ( j = 0; j < 7; j++ )
      {
         APL[i][j] = 999.0;
      };

   for ( i = 0; i < 2; i++ )
      for ( j = 0; j < 25; j++ )
      {
         SWL[i][j] = 999.0;
         SWCL[i][j] = 999.0;
      };

   IMR = 0;

   ISW = 0;

   //DATA ISDATE/'12 - M','AR - 9','0   '/,ISTIME/'15:0','9:04'/
   //DATA NAME/'MSIS','E 90'/
}


MSISE90::~MSISE90()
{
}


void MSISE90::GTD6( const Integer IYD,
                    const Real SEC,
                    const Real ALT,
                    const Real GLAT,
                    const Real GLONG,
                    const Real STL,
                    const Real F107A,
                    const Real F107,
                    const Real (& AP ) [7],
                    const Integer MASS,
                    Real (& D ) [8], 
                    Real (& T ) [2] )
{
   // Neutral Atmosphere Empirical Model from the surface to lower
   // exosphere  MSISE90 ( JGR, 96, 1159 - 1172, 1991 )
   // A.E.Hedin 4/24/90;
   //           6/ 3/91( add SAVE )
   //           2/11/93 correct switch initialization and mks calculation
   //  See subroutine GHP6 to specify a pressure rather than altitude.
   //     INPUT:
   //        IYD - YEAR AND DAY AS YYYYDDD or just DDD ( day of year from 1 to 365)
   //        SEC - UT( SEC)
   //        ALT - ALTITUDE( KM)
   //        GLAT - GEODETIC LATITUDE( DEG)
   //        GLONG - GEODETIC LONGITUDE( DEG)
   //        STL - LOCAL APPARENT SOLAR TIME( HRS)
   //        F107A - 3 MONTH AVERAGE OF F10.7 FLUX
   //        F107 - DAILY F10.7 FLUX FOR PREVIOUS DAY
   //        AP - MAGNETIC INDEX( DAILY )  OR WHEN SW[8] = -1.0 :
   //           - ARRAY CONTAINING:
   //             [0] DAILY AP
   //             [1] 3 HR AP INDEX FOR CURRENT TIME
   //             [2] 3 HR AP INDEX FOR 3 HRS BEFORE CURRENT TIME
   //             [3] 3 HR AP INDEX FOR 6 HRS BEFORE CURRENT TIME
   //             [4] 3 HR AP INDEX FOR 9 HRS BEFORE CURRENT TIME
   //             [5] AVERAGE OF EIGHT 3 HR AP INDICIES FROM 12 TO 33 HRS PRIOR
   //                    TO CURRENT TIME
   //             [6] AVERAGE OF EIGHT 3 HR AP INDICIES FROM 36 TO 59 HRS PRIOR
   //                    TO CURRENT TIME
   //        MASS - MASS NUMBER ( ONLY DENSITY FOR SELECTED GAS IS
   //                 CALCULATED.  MASS 0 IS TEMPERATURE.  MASS 48 FOR ALL.
   //     Note:  Ut, Local Time, and Longitude are used independently in the
   //            model and are not of equal importance for every situation.  
   //            For the most physically realistic calculation these three
   //            variables should be consistent ( STL = SEC / 3600 + GLONG / 15 ) .
   //            F107, F107A, and AP effects are not large below 80 km 
   //            and these can be set to 150.0, 150.0, and 4.0 respectively.
   //     OUTPUT:
   //        D[0] - HE NUMBER DENSITY( CM - 3 )
   //        D[1] - O NUMBER DENSITY( CM - 3 )
   //        D[2] - N2 NUMBER DENSITY( CM - 3 )
   //        D[3] - O2 NUMBER DENSITY( CM - 3 )
   //        D[4] - AR NUMBER DENSITY( CM - 3 )                        
   //        D[5] - TOTAL MASS DENSITY( GM / CM3 )
   //        D[6] - H NUMBER DENSITY( CM - 3 )
   //        D[7] - N NUMBER DENSITY( CM - 3 )
   //        T[0] - EXOSPHERIC TEMPERATURE
   //        T[1] - TEMPERATURE AT ALT
   //
   //      TO GET OUTPUT IN M - 3 and KG / M3:   CALL METER6(1) 
   //
   //      O, H, and N set to zero below 72.5 km
   //      Exospheric temperature set to average for altitudes below 120 km.
   //        
   //           The following is for test and special purposes:
   //            TO TURN ON AND OFF PARTICULAR VARIATIONS CALL TSELEC( SW )
   //               WHERE SW IS A 25 ELEMENT ARRAY CONTAINING 0.0 FOR OFF, 1.0 
   //               FOR ON, OR 2.0 FOR MAIN EFFECTS OFF BUT CROSS TERMS ON
   //               FOR THE FOLLOWING VARIATIONS
   //               1 - F10.7 EFFECT ON MEAN  2 - TIME INDEPENDENT
   //               3 - SYMMETRICAL ANNUAL    4 - SYMMETRICAL SEMIANNUAL
   //               5 - ASYMMETRICAL ANNUAL   6 - ASYMMETRICAL SEMIANNUAL
   //               7 - DIURNAL               8 - SEMIDIURNAL
   //               9 - DAILY AP             10 - ALL UT / LONG EFFECTS
   //              11 - LONGITUDINAL         12 - UT AND MIXED UT / LONG
   //              13 - MIXED AP / UT / LONG     14 - TERDIURNAL
   //              15 - DEPARTURES FROM DIFFUSIVE EQUILIBRIUM
   //              16 - ALL TINF VAR         17 - ALL TLB VAR
   //              18 - ALL TN1 VAR           19 - ALL S VAR
   //              20 - ALL TN2 VAR           21 - ALL NLB VAR
   //              22 - ALL TN3 VAR           23 - TURBO SCALE HEIGHT VAR
   //
   //              To get current values of SW: CALL TRETRV( SW )
   //
   Real D6[8];
   Real T6[2];
   Real ZN3[5] = {32.5, 20.0, 15.0, 10.0, 0.0};
   Real ZN2[4] = {72.5, 55.0, 45.0, 32.5};
   Real SV[25] = {1.0, 1.0, 1.0, 1.0, 1.0,
                   1.0, 1.0, 1.0, 1.0, 1.0, 
                   1.0, 1.0, 1.0, 1.0, 1.0, 
                   1.0, 1.0, 1.0, 1.0, 1.0, 
                   1.0, 1.0, 1.0, 1.0, 1.0};
   Integer MN3   = 5;
   Integer MN2   = 4;
   Real ZMIX  = 62.5;
   Real ALAST = 99999.0;
   Integer MSSL  = -999;
   Integer J;
   Integer MSS;
   bool V1;
   Real XLAT, XMM, ALTT, DM28M = 0, DMC, DZ28, DMR, TZ;

   if ( ISW != 64999 ) 
      TSELEC( SV );

// removed id - not used except for debug
//   // Put identification data into common / datime/
//   for ( I = 0; I < 3; I++ )
//        ISDATE[I] = ISD[I];
//   for ( I = 0; I < 2; I++ )
//   {
//        ISTIME[I] = IST[I];
//        NAME[I] = NAM[I];
//   }

   // Test for changed input
   V1 = VTST( IYD, SEC, GLAT, GLONG, STL, F107A, F107, AP, 0 );

   // Latitude variation of gravity ( none for SW[1] = 0)

   XLAT = GLAT;

   if ( SW[1] == 0 )  
      XLAT = 45.0;

   GLATF( XLAT, GSURF, RE );

   XMM = PDM[2][4];

   // THERMOSPHERE / UPPER MESOSPHERE [above ZN2[0]]
   if ( ALT > ZN2[0] )
      ALTT = ALT;
   else
      ALTT = ZN2[0];

   MSS = MASS;

   // Only calculate N2 in thermosphere if alt in mixed region
   if ( ( ALT < ZMIX ) && 
        ( MASS > 0   ) )
      MSS = 28;

   // Only calculate thermosphere if input parameters changed
   //  or altitude above ZN2[0] in mesosphere
   if ( ( V1 == 1.0      ) || 
        ( ALT > ZN2[0]   ) || 
        ( ALAST > ZN2[0] ) || 
        ( MSS !=  MSSL   ) )
   {
      GTS6( IYD, SEC, ALTT, GLAT, GLONG, STL, F107A, F107, AP, MSS, D6, T6 );
      DM28M = DM28;
      // metric adjustment
      if ( IMR == 1 )  
         DM28M = DM28 * 1.0E6;
      MSSL = MSS;
   };

   T[0] = T6[0];
   T[1] = T6[1];

   if ( ALT >= ZN2[0] )
   {
      for ( J = 0; J < 8; J++ )
         D[J] = D6[J];
   }
   else
   {
      // LOWER MESOSPHERE / UPPER STRATOSPHERE [between ZN3[0] and ZN2[0]]
      // Temperature at nodes and gradients at end nodes
      // Inverse temperature a linear function of spherical harmonics
      // Only calculate nodes if input changed
      if ( ( V1    == 1.0    ) || 
           ( ALAST >= ZN2[0] ) )
      {
        TGN2[0] = TGN1[1];
        TN2[0]  = TN1[4];
        TN2[1]  = PMA[0][0] * PAVGM[0] / ( 1.0 - SW[19] * GLOB6S( PMA[0] ) );
        TN2[2]  = PMA[1][0] * PAVGM[1] / ( 1.0 - SW[19] * GLOB6S( PMA[1] ) );
        TN2[3]  = PMA[2][0] * PAVGM[2] / ( 1.0 - SW[19] * SW[21] * GLOB6S( PMA[2] ) );
        TGN2[1] = PMA[9][0] * PAVGM[8] * ( 1.0 + SW[19] * SW[21] * GLOB6S( PMA[9] ) ) * 
                  TN2[3] * TN2[3] / pow( ( PMA[2][0] * PAVGM[2] ),2 );
        TN3[0]  = TN2[3];
      };

      if ( ALT < ZN3[0] ) 
      {
         // LOWER STRATOSPHERE AND TROPOSPHERE [below ZN3[0]]
         // Temperature at nodes and gradients at end nodes
         // Inverse temperature a linear function of spherical harmonics
         // Only calculate nodes if input changed
        if ( ( V1    == 1.0    ) || 
             ( ALAST >= ZN3[0] ) )
        {
           TGN3[0] = TGN2[1];
           TN3[1]  = PMA[3][0] * PAVGM[3] / ( 1.0 - SW[21] * GLOB6S( PMA[3] ) );
           TN3[2]  = PMA[4][0] * PAVGM[4] / ( 1.0 - SW[21] * GLOB6S( PMA[4] ) );
           TN3[3]  = PMA[5][0] * PAVGM[5] / ( 1.0 - SW[21] * GLOB6S( PMA[5] ) );
           TN3[4]  = PMA[6][0] * PAVGM[6] / ( 1.0 - SW[21] * GLOB6S( PMA[6] ) );
           TGN3[1] = PMA[7][0] * PAVGM[7] * ( 1.0 + SW[21] * GLOB6S( PMA[7] ) ) * 
                     TN3[4] * TN3[4] / pow( ( PMA[6][0] * PAVGM[6] ),2 );
        };
      };

      if ( MASS != 0 )   
      {
         // Linear transition to full mixing at ZMIX from almost
         // full mixing at ZN2[0] to improve efficiency
         DMC = 0;
         if ( ALT > ZMIX ) 
            DMC = 1.0 - ( ZN2[0] - ALT )  / ( ZN2[0] - ZMIX );
         DZ28 = D6[2];

         // ***** N2 DENSITY ****
         DMR = D6[2] / DM28M - 1.0;
         D[2] = DENSM( ALT, DM28M, XMM, TZ, MN3, ZN3, TN3, TGN3, MN2, ZN2, TN2, TGN2 );
         D[2] = D[2] * ( 1.0 + DMR * DMC );

         // ***** HE DENSITY ****
         D[0] = 0;
         if ( ( MASS == 4  ) ||
              ( MASS == 48 ) )
         {
            DMR = D6[0] / ( DZ28 * PDM[0][1] ) - 1.0;
            D[0] = D[2] * PDM[0][1] * ( 1.0 + DMR * DMC );
         };

         // **** O DENSITY ****
         D[1] = 0;
         
         // ***** O2 DENSITY ****
         D[3] = 0;
         if ( ( MASS == 32 ) || 
              ( MASS == 48 ) )
         {
            DMR = D6[3] / ( DZ28 * PDM[3][1] ) - 1.0;
            D[3] = D[2] * PDM[3][1] * ( 1.0 + DMR * DMC );
         };
         
         // ***** AR DENSITY ****
         D[4] = 0;
         if ( ( MASS == 40 ) || 
              ( MASS == 48 ) )
         {
            DMR = D6[4] / ( DZ28 * PDM[4][1] ) - 1.0;
            D[4] = D[2] * PDM[4][1] * ( 1.0 + DMR * DMC );
         };

         // ***** HYDROGEN DENSITY ****
         D[6] = 0;

         // ***** ATOMIC NITROGEN DENSITY ****
         D[7] = 0;

         // TOTAL MASS DENSITY
         if ( MASS == 48 )  
         {
            D[5] = 1.66E-24 * ( 4.0 * D[0] + 16.0 * D[1] + 28.0 * D[2] + 
                   32.0 * D[3] + 40.0 * D[4] + D[6] + 14.0 * D[7] ); 
            if ( IMR == 1 ) 
               D[5] = D[5] / 1000.0;
         };

      }
      else
      {
         DD = DENSM( ALT, 1.0, 0, TZ, MN3, ZN3, TN3, TGN3, MN2, ZN2, TN2, TGN2 );                
      }; 
      T[1] = TZ;
   };
   ALAST = ALT;
   return;
};


void MSISE90::GHP6( const Integer IYD,
                    const Real SEC,
                    Real & ALT,
                    const Real GLAT,
                    const Real GLONG,
                    const Real STL,
                    const Real F107A,
                    const Real F107,
                    Real (& AP ) [7], 
                    Real (& D ) [8],
                    Real (& T ) [2],
                    Real & PRESS)
{
   //      FIND ALTITUDE OF PRESSURE SURFACE ( PRESS )  FROM GTD6
   //    INPUT:
   //       IYD   - YEAR AND DAY AS YYYYDDD
   //       SEC   - UT( SEC)
   //       GLAT  - GEODETIC LATITUDE( DEG)
   //       GLONG - GEODETIC LONGITUDE( DEG)
   //       STL   - LOCAL APPARENT SOLAR TIME( HRS)
   //       F107A - 3 MONTH AVERAGE OF F10.7 FLUX
   //       F107  - DAILY F10.7 FLUX FOR PREVIOUS DAY
   //       AP    - MAGNETIC INDEX( DAILY )  OR WHEN SW[8]= - 1.0 :
   //             - ARRAY CONTAINING:
   //            [0] DAILY AP
   //            [1] 3 HR AP INDEX FOR CURRENT TIME
   //            [2] 3 HR AP INDEX FOR 3 HRS BEFORE CURRENT TIME
   //            [3] 3 HR AP INDEX FOR 6 HRS BEFORE CURRENT TIME
   //            [4] 3 HR AP INDEX FOR 9 HRS BEFORE CURRENT TIME
   //            [5] AVERAGE OF EIGHT 3 HR AP INDICIES FROM 12 TO 33 HRS PRIOR
   //                   TO CURRENT TIME
   //            [6] AVERAGE OF EIGHT 3 HR AP INDICIES FROM 36 TO 59 HRS PRIOR
   //                   TO CURRENT TIME
   //       PRESS - PRESSURE LEVEL( MB)
   //    OUTPUT:
   //       ALT  - ALTITUDE( KM )  
   //       D[0] - HE NUMBER DENSITY( CM - 3)
   //       D[1] - O NUMBER DENSITY( CM - 3)
   //       D[2] - N2 NUMBER DENSITY( CM - 3)
   //       D[3] - O2 NUMBER DENSITY( CM - 3)
   //       D[4] - AR NUMBER DENSITY( CM - 3)
   //       D[5] - TOTAL MASS DENSITY( GM / CM3)
   //       D[6] - H NUMBER DENSITY( CM - 3)
   //       D[7] - N NUMBER DENSITY( CM - 3)
   //       T[0] - EXOSPHERIC TEMPERATURE
   //       T[1] - TEMPERATURE AT ALT

   Real BM   = 1.3806E-19;
   Real RGAS = 831.4;
   Real TEST = 0.00043;
   Integer IDAY, L;
   Real PL, ZI, CL, CL2, CD, CA, Z, XN = 0, P, DIFF = 0, XM, G, SH;

   PL = log10( PRESS );

   //     Initial altitude estimate
   if ( PL >= -5.0 )  
   {
      if      ( PL > 2.5  ) ZI = 18.06 * ( 3.00 - PL );
      else if ( PL > .75  ) ZI = 14.98 * ( 3.08 - PL );
      else if ( PL > -1.0 ) ZI = 17.8  * ( 2.72 - PL );
      else if ( PL > -2.0 ) ZI = 14.28 * ( 3.64 - PL );
      else if ( PL > -4.0 ) ZI = 12.72 * ( 4.32 - PL );
      else                  ZI = 25.3  * ( 0.11 - PL );

      IDAY = IYD - ( ( IYD /1000 ) * 1000 );
      CL   = GLAT / 90.0;
      CL2  = CL * CL;

      if ( IDAY < 182 )  CD = 1.0 - IDAY / 91.25;
      else CD = IDAY / 91.25 - 3.0;

      CA = 0;

      if      ( PL > -.23  ) CA = ( 2.79 - PL )  / ( 2.79 + .23 );
      else if ( PL > -1.11 ) CA = 1.0;
      else if ( PL > -3.0  ) CA = ( - 2.93 - PL )  / ( - 2.93 + 1.11 );

      Z = ZI - 4.87 * CL * CD * CA - 1.64 * CL2 * CA + 0.31 * CA * CL;
   }
   else
   {
      Z = 22.0 * pow( ( PL + 4.0 ) ,2 )  + 110;
   }

   L = 0;
   do
   {
      if ( L != 0 )
      {
         XM = D[5] / XN / 1.66E-24;
         G = GSURF / pow( ( 1.0 + Z / RE ) ,2 );
         SH = RGAS * T[1] / ( XM * G );
         // New altitude estimate using scale height
         Z = Z - SH * DIFF * 2.302;
      };
      L = L + 1;
      GTD6( IYD, SEC, Z,GLAT, GLONG, STL, F107A, F107, AP, 48, D,T );
      XN = D[0] + D[1] + D[2] + D[3] + D[4] + D[6] + D[7];
      P = BM * XN * T[1];
      if ( IMR == 1 )  P = P * 1.0E-6;
      DIFF = PL - log10( P );
   } while( fabs( DIFF )  >= TEST  &&  L < 6 );
      
   assert ( L == 6 ); 
   //if ( L == 6 )  WRITE[100][6] PRESS, DIFF
   //100 FORMAT( 1X, 29HGHP6 NOT CONVERGING FOR PRESS, 1PE12.2, E12.2)
   ALT = Z;
   return;
}


void MSISE90::GLATF( const Real LAT, 
                     Real & GV, 
                     Real & REFF)
{
   // CALCULATE LATITUDE VARIABLE GRAVITY ( GV )  AND EFFECTIVE
   // RADIUS ( REFF)
   static const Real DGTR = 1.74533E-2;  // degrees to radians
   static Real LATL = -999.0;
   static Real C2;

   if ( LAT != LATL )
   {
      C2 = cos( 2.0 * DGTR * LAT );
      LATL = LAT;
   };
   GV = 980.616 * ( 1.0 - 0.0026373 * C2 );
   REFF = 2.0 * GV / ( 3.085462E-6 + 2.27E-9 * C2 )  * 1.0E-5;
   return;
};


bool MSISE90::VTST( const Integer IYD,
                     const Real SEC,
                     const Real GLAT,
                     const Real GLONG,
                     const Real STL,
                     const Real F107A,
                     const Real F107,
                     const Real AP[8],
                     const Integer IC)
{
   // Test if geophysical variables or switches changed and save
   // Return 0 if unchanged and 1 if changed

   Integer I;
   bool changed = false;

   if ( (   IYD != IYDL[IC - 1]  ) ||
        (   SEC != SECL[IC - 1]  ) ||
        (  GLAT != GLATL[IC - 1] ) ||
        ( GLONG != GLL[IC - 1]   ) ||
        (   STL != STLL[IC - 1]  ) ||
        ( F107A != FAL[IC - 1]   ) ||
        (  F107 != FL[IC - 1]    ) ) 
   {
      changed = true;
   }
   else
   {
      for ( I = 0; I < 7; I++ )
      {
         if( AP[I] != APL[IC - 1][I] ) 
         {
            changed = true;
            I = 6;
         }
      };

      if ( !changed )
      {
         for ( I = 0; I < 25; I++ )
         {
            if ( ( SW[I] != SWL[IC - 1][I] ) ||
                 ( SWC[I] != SWCL[IC - 1][I] ) )
            {
               changed = true;
               I = 24;
            }
         };
      };
   };

   if ( changed )
   {
      IYDL[IC - 1]  = IYD;
      SECL[IC - 1]  = SEC;
      GLATL[IC - 1] = GLAT;
      GLL[IC - 1]   = GLONG;
      STLL[IC - 1]  = STL;
      FAL[IC - 1]   = F107A;
      FL[IC - 1]    = F107;

      for ( I = 0; I < 7; I++ )
      {
         APL[IC - 1][I] = AP[I];
      };

      for ( I = 0; I < 25; I++ )
      {
        SWL[IC - 1][I] = SW[I];
        SWCL[IC - 1][I] = SWC[I];
      };

      return 1;
   }
   else
   {
      return 0;
   };
}


void MSISE90::GTS6( const Integer IYD,
                    const Real SEC,
                    const Real ALT,
                    const Real GLAT,
                    const Real GLONG,
                    const Real STL,
                    const Real F107A,
                    const Real F107,
                    const Real (& AP)[7],
                    const Integer MASS,
                    Real (& D)[8], 
                    Real (& T)[2])
{
   //       Neutral Thermosphere Model above 72.5 km for MSISE - 90
   //        A.E.Hedin 3 / 9/90
   //        Coefficients not changed for 120km and above, but results may differ
   //       by a few percent from MSIS - 86 ( GTS5 )  with introduction of a
   //       latitude dependent accel. of gravity.
   //        Lower thermosphere reformulated for better continuation into
   //       lower atmosphere.
   //       For efficiency:
   //        Exospheric temperature left at average value for alt below 120km;
   //        120 km gradient left at average value for alt below 72 km;
   //    INPUT:
   //       IYD   - YEAR AND DAY AS YYYYDDD
   //       SEC   - UT( SEC)
   //       ALT   - ALTITUDE( KM )  ( GREATER THAN 72.5 KM)
   //       GLAT  - GEODETIC LATITUDE( DEG)
   //       GLONG - GEODETIC LONGITUDE( DEG)
   //       STL   - LOCAL APPARENT SOLAR TIME( HRS)
   //       F107A - 3 MONTH AVERAGE OF F10.7 FLUX
   //       F107  - DAILY F10.7 FLUX FOR PREVIOUS DAY
   //       AP    - MAGNETIC INDEX( DAILY )  OR WHEN SW[8]= - 1.0 :
   //             - ARRAY CONTAINING:
   //            [0] DAILY AP
   //            [1] 3 HR AP INDEX FOR CURRENT TIME
   //            [2] 3 HR AP INDEX FOR 3 HRS BEFORE CURRENT TIME
   //            [3] 3 HR AP INDEX FOR 6 HRS BEFORE CURRENT TIME
   //            [4] 3 HR AP INDEX FOR 9 HRS BEFORE CURRENT TIME
   //            [5] AVERAGE OF EIGHT 3 HR AP INDICIES FROM 12 TO 33 HRS PRIOR
   //                   TO CURRENT TIME
   //            [6] AVERAGE OF EIGHT 3 HR AP INDICIES FROM 36 TO 59 HRS PRIOR
   //                   TO CURRENT TIME
   //       MASS - MASS NUMBER ( ONLY DENSITY FOR SELECTED GAS IS
   //                CALCULATED.  MASS 0 IS TEMPERATURE.  MASS 48 FOR ALL.
   //    Note:  Ut, Local Time, and Longitude are used independently in the
   //           model and are not of equal importance for every situation.  
   //           For the most physically realistic calculation these three
   //           variables should be consistent ( STL = SEC / 3600 + GLONG / 15 ) .
   //    OUTPUT:
   //       D[0] - HE NUMBER DENSITY( CM - 3)
   //       D[1] - O NUMBER DENSITY( CM - 3)
   //       D[2] - N2 NUMBER DENSITY( CM - 3)
   //       D[3] - O2 NUMBER DENSITY( CM - 3)
   //       D[4] - AR NUMBER DENSITY( CM - 3)
   //       D[5] - TOTAL MASS DENSITY( GM / CM3)
   //       D[6] - H NUMBER DENSITY( CM - 3)
   //       D[7] - N NUMBER DENSITY( CM - 3)
   //       T[0] - EXOSPHERIC TEMPERATURE
   //       T[1] - TEMPERATURE AT ALT
   //
   //          The following is for test and special purposes:
   //          ( 1 )  LOWER BOUND QUANTITIES IN COMMON/GTS3C/
   //          ( 2 )  TO TURN ON AND OFF PARTICULAR VARIATIONS CALL TSELEC( SW )
   //              WHERE SW IS A 25 ELEMENT ARRAY CONTAINING 0.0 FOR OFF, 1.0 
   //              FOR ON, OR 2.0 FOR MAIN EFFECTS OFF BUT CROSS TERMS ON
   //              FOR THE FOLLOWING VARIATIONS
   //              1 - F10.7 EFFECT ON MEAN  2 - TIME INDEPENDENT
   //              3 - SYMMETRICAL ANNUAL    4 - SYMMETRICAL SEMIANNUAL
   //              5 - ASYMMETRICAL ANNUAL   6 - ASYMMETRICAL SEMIANNUAL
   //              7 - DIURNAL               8 - SEMIDIURNAL
   //              9 - DAILY AP             10 - ALL UT / LONG EFFECTS
   //             11 - LONGITUDINAL         12 - UT AND MIXED UT / LONG
   //             13 - MIXED AP / UT / LONG     14 - TERDIURNAL
   //             15 - DEPARTURES FROM DIFFUSIVE EQUILIBRIUM
   //             16 - ALL TINF VAR         17 - ALL TLB VAR
   //             18 - ALL TN1 VAR           19 - ALL S VAR
   //             20 - ALL TN2 VAR           21 - ALL NLB VAR
   //             22 - ALL TN3 VAR           23 - TURBO SCALE HEIGHT VAR
   //
   //             To get current values of SW: CALL TRETRV( SW )

   Integer MT[10]  = {48, 0, 4, 16, 28, 32, 40, 1, 49, 14};
   Real ALTL[8] = {200.0, 400.0, 160.0, 200.0, 240.0, 450.0, 320.0, 450.0};
   Integer MN1     = 5;
   Real ZN1[5]  = {120.0, 110.0, 100.0, 90.0, 72.5};
   Real DGTR    = 1.74533E-2;
   Real DR      = 1.72142E-2;
   Real ALAST   = -999.0;
   Integer YRD, I, J;
   Real TINF = 0, ZLB, G28, ZHF, XMM, ZH28, ZHM28 = 0, XMD, B28 = 0, TZ, G4, ZH04, ZHM04;
   Real B04, DM04, ZC04, HC04, G16, ZH16, ZHM16, B16, HC16, ZC16, HCC16, ZCC16;
   Real RC16, G32, ZH32, ZHM32, B32, HC32, ZC32, G40, ZH40, ZHM40, B40, HC40;
   Real ZC40, G1, ZH01, ZHM01, B01, HC01, ZC01, ZCC01, RC01, G14, ZH14;
   Real ZHM14, B14, HC14, ZC14, HCC14, RC14, DDUM, HCC01, ZCC14, V2;

   // Test for changed input
   V2 = VTST( IYD, SEC, GLAT, GLONG, STL, F107A, F107, AP, 1 );

   YRD = IYD;
   ZA = PDL[1][15];
   ZN1[0] = ZA;
   for ( J = 0; J < 8; J++ )
        D[J] = 0.0;

   // TINF VARIATIONS NOT IMPORTANT BELOW ZA OR ZN1[0]
   if ( ALT > ZN1[0] )
   {
      if ( (    V2 == 1.0    ) || 
           ( ALAST <= ZN1[0] ) ) 
         TINF = PTM[0] * PT[0] * ( 1.0 + SW[15] * 
                GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PT )  );
   }
   else
   {
      TINF = PTM[0] * PT[0];
   };

   T[0] = TINF;
   // GRADIENT VARIATIONS NOT IMPORTANT BELOW ZN1[4]
   if ( ALT > ZN1[4] )
   {
      if ( (    V2 == 1      ) || 
           ( ALAST <= ZN1[4] ) )
         G0 = PTM[3] * PS[0] * ( 1.0 + SW[18] * 
              GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PS )  );
   }
   else
   {
      G0 = PTM[3] * PS[0];
   };

   // Calculate these temperatures only if input changed
   if ( V2 == 1.0)
      TLB = PTM[1] * ( 1.0 + SW[16] * 
            GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[3] ) ) * PD[3][0];
   S = G0 / ( TINF - TLB );

   // density above 300 km
   if ( ALT < 300.0 )  
   {
      if ( V2 == 1.0 || ALAST >= 300.0)
      {
         TN1[1]  = PTM[6] * PTL[0][0] / ( 1.0 - SW[17] * GLOB6S( PTL[0] ) );
         TN1[2]  = PTM[2] * PTL[1][0] / ( 1.0 - SW[17] * GLOB6S( PTL[1] ) );
         TN1[3]  = PTM[7] * PTL[2][0] / ( 1.0 - SW[17] * GLOB6S( PTL[2] ) );
         TN1[4]  = PTM[4] * PTL[3][0] / ( 1.0 - SW[17] * SW[19] * GLOB6S( PTL[3] ) );
         TGN1[1] = PTM[8] * PMA[8][0] * ( 1.0 + SW[17] * SW[19] * GLOB6S( PMA[8] ) ) * 
                   TN1[4] * TN1[4] / pow( ( PTM[4] * PTL[3][0] ),2 );
      };
   }
   else
   {
      TN1[1]  = PTM[6] * PTL[0][0];
      TN1[2]  = PTM[2] * PTL[1][0];
      TN1[3]  = PTM[7] * PTL[2][0];
      TN1[4]  = PTM[4] * PTL[3][0];
      TGN1[1] = PTM[8] * PMA[8][0] * TN1[4] * TN1[4] / pow( ( PTM[4] * PTL[3][0] ),2 );
   };

   Z0   = ZN1[3];
   T0   = TN1[3];
   ZLB  = PTM[5];
   TR12 = 1.0;

   if ( MASS != 0 )
   {
      // N2 variation factor at Zlb
      G28 = SW[20] * GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[2] );

      // Variation of turbopause height
      DAY = YRD - ( ( YRD / 1000 ) * 1000 );
      ZHF = PDL[1][24] * ( 1.0 + SW[4] * PDL[0][24] * sin( DGTR * GLAT ) * 
            cos( DR * ( DAY - PT[13] ) ));

      YRD  = IYD;
      T[0] = TINF;
      XMM  = PDM[2][4];

      J = 1;
      while ( J < 10 && MASS != MT[J - 1] ) 
         J++;

      assert ( J < 10 );

      if ( J < 10 )
      {
         if ( (  ALT <= ALTL[5] ) || 
              ( MASS == 28      ) || 
              ( MASS == 48      ) ) 
         {
            // **** N2 DENSITY ****

            // Diffusive density at Zlb
            DB28 = PDM[2][0] * exp( G28 )  * PD[2][0];

            // Diffusive density at Alt
            D[2] = DENSU( ALT, DB28, TINF, TLB, 28.0, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );
            DD   = D[2];

            // Turbopause
            ZH28  = PDM[2][2] * ZHF;
            ZHM28 = PDM[2][3] * PDL[1][5]; 
            XMD   = 28.0 - XMM;

            // Mixed density at Zlb
            B28 = DENSU( ZH28, DB28, TINF, TLB, XMD, -1.0, TZ, ZLB, S, MN1, ZN1, TN1, TGN1 );

            if ( ( ALT <= ALTL[2] ) && 
                 ( SW[14] != 0.0  ) )
            {
               // Mixed density at Alt
               DM28 = DENSU( ALT, B28, TINF, TLB, XMM, 0.0, TZ, ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Net density at Alt
               D[2] = DNET( D[2],DM28, ZHM28, XMM, 28.0 );
            };
         };

         switch ( J )
         {
         case 1:
         case 3:
         // **** HE DENSITY ****

            // Density variation factor at Zlb
            G4 = SW[20] * GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[0] );

            // Diffusive density at Zlb
            DB04 = PDM[0][0] * exp( G4 )  * PD[0][0];

            // Diffusive density at Alt
            D[0] = DENSU( ALT, DB04, TINF, TLB, 4.0, - .4, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );
            DD   = D[0];
            if ( ( ALT <= ALTL[0] ) && 
                 ( SW[14] != 0.0  ) )
            {
               // Turbopause
               ZH04  = PDM[0][2];
               ZHM04 = ZHM28;

               // Mixed density at Zlb
               B04 = DENSU( ZH04, DB04, TINF, TLB, 4.0 - XMM, - 1.4, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Mixed density at Alt
               DM04 = DENSU( ALT, B04, TINF, TLB, XMM, 0.0, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Net density at Alt
               D[0] = DNET( D[0],DM04, ZHM04, XMM, 4.0 );

               // Correction to specified mixing ratio at ground
               RL   = log( B28 * PDM[0][1] / B04 );
               ZC04 = PDM[0][4] * PDL[1][0];
               HC04 = PDM[0][5] * PDL[1][1];
               
               // Net density corrected at Alt
               D[0] = D[0] * CCOR( ALT, RL, HC04, ZC04 );
            };

            if ( MASS != 48 )  break; 

         case 4:
         case 9:
            // **** O DENSITY ****

            // Density variation factor at Zlb
            G16 = SW[20] * GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[1] );

            // Diffusive density at Zlb
            DB16 =  PDM[1][0] * exp( G16 )  * PD[1][0];

            // Diffusive density at Alt
            D[1] = DENSU( ALT, DB16, TINF, TLB, 16.0, 0.0, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );
            DD   = D[1];

            if ( ( ALT <= ALTL[1] ) && 
                 ( SW[14] != 0.0  ) )
            {
               // Corrected from PDM[0][2] to PDM[1][2]  12 / 2/85
               // Turbopause
               ZH16  = PDM[1][2];
               ZHM16 = ZHM28;

               // Mixed density at Zlb
               B16 = DENSU( ZH16, DB16, TINF, TLB, 16 - XMM, - 1.0, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Mixed density at Alt
               DM16 = DENSU( ALT, B16, TINF, TLB, XMM, 0.0, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Net density at Alt
               D[1] = DNET( D[1],DM16, ZHM16, XMM, 16.0 );

               // Correction to specified mixing ratio at ground
               RL   = log( B28 * PDM[1][1] * fabs( PDL[1][16] ) / B16 );
               HC16 = PDM[1][5] * PDL[1][3];
               ZC16 = PDM[1][4] * PDL[1][2];
               D[1] = D[1] * CCOR( ALT, RL, HC16, ZC16 );

               // Chemistry correction
               HCC16 = PDM[1][7] * PDL[1][13];
               ZCC16 = PDM[1][6] * PDL[1][12];
               RC16  = PDM[1][3] * PDL[1][14];

               // Net density corrected at Alt
               D[1] = D[1] * CCOR( ALT, RC16, HCC16, ZCC16 );
            }

              if ( ( MASS != 48 )  && ( MASS != 49 )  ) break; 

         case 6:
            // **** O2 DENSITY ****

            // Density variation factor at Zlb
            G32 = SW[20] * GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[4] );

            // Diffusive density at Zlb
            DB32 = PDM[3][0] * exp( G32 )  * PD[4][0];

            // Diffusive density at Alt
            D[3] = DENSU( ALT, DB32, TINF, TLB, 32.0, 0.0, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );

            if ( MASS == 49)
               DD = DD + 2.0 * D[3];
            else
               DD = D[3];

            if ( ( ALT <= ALTL[3] ) && 
                 ( SW[14] != 0.0  ) )
            {
               // Turbopause
               ZH32  = PDM[3][2];
               ZHM32 = ZHM28;

               // Mixed density at Zlb
               B32 = DENSU( ZH32, DB32, TINF, TLB, 32.0 - XMM, -1.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Mixed density at Alt
               DM32 = DENSU( ALT, B32, TINF, TLB, XMM, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Net density at Alt
               D[3] = DNET( D[3],DM32, ZHM32, XMM, 32.0 );

               // Correction to specified mixing ratio at ground
               RL   = log( B28 * PDM[3][1] / B32 );
               HC32 = PDM[3][5] * PDL[1][7];
               ZC32 = PDM[3][4] * PDL[1][6];

               // Net density corrected at Alt
               D[3] = D[3] * CCOR( ALT, RL, HC32, ZC32 );
            }
            if ( MASS != 48 ) break;

         case 7:
            // **** AR DENSITY ****

            // Density variation factor at Zlb
            G40= SW[20] * GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[5] );

            // Diffusive density at Zlb
            DB40 = PDM[4][0] * exp( G40 )  * PD[5][0];

            // Diffusive density at Alt
            D[4] = DENSU( ALT, DB40, TINF, TLB, 40.0, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );
            DD = D[4];

            if ( ( ALT <= ALTL[4] ) && 
                 ( SW[14] != 0.0  ) )
            {
               // Turbopause
               ZH40  = PDM[4][2];
               ZHM40 = ZHM28;

               // Mixed density at Zlb
               B40 = DENSU( ZH40, DB40, TINF, TLB, 40.0 - XMM, -1.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Mixed density at Alt
               DM40 = DENSU( ALT, B40, TINF, TLB, XMM, 0.0, T[1],ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Net density at Alt
               D[4] = DNET( D[4],DM40, ZHM40, XMM, 40.0 );

               // Correction to specified mixing ratio at ground
               RL   = log( B28 * PDM[4][1] / B40 );
               HC40 = PDM[4][5] * PDL[1][9];
               ZC40 = PDM[4][4] * PDL[1][8];

               // Net density corrected at Alt
               D[4] = D[4] * CCOR( ALT, RL, HC40, ZC40 );
            };

            if ( MASS != 48 )  break;

         case 8:
            // **** HYDROGEN DENSITY ****

            // Density variation factor at Zlb
            G1 = SW[20] * GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[6] );

            // Diffusive density at Zlb
            DB01 = PDM[5][0] * exp( G1 )  * PD[6][0];

            // Diffusive density at Alt
            D[6] = DENSU( ALT, DB01, TINF, TLB, 1.0, -0.4, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );
            DD = D[6];

            if ( ( ALT <= ALTL[6] ) && 
                 ( SW[14] != 0.0  ) )
            {
               // Turbopause
               ZH01  = PDM[5][2];
               ZHM01 = ZHM28;

               // Mixed density at Zlb
               B01 = DENSU( ZH01, DB01, TINF, TLB, 1.0 - XMM, -1.4, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Mixed density at Alt
               DM01 = DENSU( ALT, B01, TINF, TLB, XMM, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Net density at Alt
               D[6] = DNET( D[6],DM01, ZHM01, XMM, 1.0 );

               // Correction to specified mixing ratio at ground
               RL   = log( B28 * PDM[5][1] * fabs( PDL[1][17] ) / B01 );
               HC01 = PDM[5][5] * PDL[1][11];
               ZC01 = PDM[5][4] * PDL[1][10];
               D[6] = D[6] * CCOR( ALT, RL, HC01, ZC01 );

               // Chemistry correction
               HCC01 = PDM[5][7] * PDL[1][19];
               ZCC01 = PDM[5][6] * PDL[1][18];
               RC01  = PDM[5][3] * PDL[1][20];

               // Net density corrected at Alt
               D[6] = D[6] * CCOR( ALT, RC01, HCC01, ZCC01 );
            };

         case 10:
            // **** ATOMIC NITROGEN DENSITY ****
 
            // Density variation factor at Zlb
            G14 = SW[20] * GLOBE6( YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, PD[7] );

            // Diffusive density at Zlb
            DB14 = PDM[6][0] * exp( G14 )  * PD[7][0];

            // Diffusive density at Alt
            D[7] = DENSU( ALT, DB14, TINF, TLB, 14.0, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );
            DD = D[7];

            if ( ( ALT <= ALTL[7] ) && 
                 ( SW[14] != 0.0  ) )
            {
               // Turbopause
               ZH14  = PDM[6][2];
               ZHM14 = ZHM28;

               // Mixed density at Zlb
               B14 = DENSU( ZH14, DB14, TINF, TLB, 14.0 - XMM, -1.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Mixed density at Alt
               DM14 = DENSU( ALT, B14, TINF, TLB, XMM, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

               // Net density at Alt
               D[7] = DNET( D[7],DM14, ZHM14, XMM, 14.0 );

               // Correction to specified mixing ratio at ground
               RL   = log( B28 * PDM[6][1] * fabs( PDL[0][2] ) / B14 );
               HC14 = PDM[6][5] * PDL[0][1];
               ZC14 = PDM[6][4] * PDL[0][0];
               D[7] = D[7] * CCOR( ALT, RL, HC14, ZC14 );

               // Chemistry correction
               HCC14 = PDM[6][7] * PDL[0][4];
               ZCC14 = PDM[6][6] * PDL[0][3];
               RC14  = PDM[6][3] * PDL[0][5];

               // Net density corrected at Alt
               D[7] = D[7] * CCOR( ALT, RC14, HCC14, ZCC14 );
            };

            if ( MASS != 48 ) break;

            // TOTAL MASS DENSITY

            D[5] = 1.66E-24 * ( 4.0 * D[0] + 16.0 * D[1] + 28.0 * D[2] + 32.0 * D[3] + 
                                40.0 * D[4] + D[6] + 14.0 * D[7] );
            DB48 = 1.66E-24 * ( 4.0 * DB04 + 16.0 * DB16 + 28.0 * DB28 + 32.0 * DB32 + 
                                40.0 * DB40 + DB01 + 14.0 * DB14 );

            break;

         case 2:
            // TEMPERATURE AT ALTITUDE
            DDUM = DENSU( ALT, 1.0, TINF, TLB, 0.0, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );

            break;

         case 5:

            break;

         default:
            assert( false );
            break;
         };
      };
   }
   else
   {
      // TEMPERATURE AT ALTITUDE
      DDUM = DENSU( ALT, 1.0, TINF, TLB, 0.0, 0.0, T[1], ZLB, S, MN1, ZN1, TN1, TGN1 );
   };

   // ADJUST DENSITIES FROM CGS TO KGM
   if ( IMR == 1)
   {
      for ( I = 0; I < 8; I++ )
         D[I] = D[I] * 1.0E6;

      D[5] = D[5] / 1000.0;
   };

   ALAST = ALT;
   return;
}


void MSISE90::METER6( const Integer METER)
{
   IMR = 0;
   if ( METER ) IMR = 1;
   return;
}


Real MSISE90::GLOBE6( const Integer YRD,
                       const Real SEC,
                       const Real LAT,
                       const Real LONG,
                       const Real TLOC,
                       const Real F107A,
                       const Real F107,
                       const Real (& AP ) [7],
                       Real (& P ) [150] )
{
   // CALCULATE G( L )  FUNCTION 
   // Upper Thermosphere Parameters
   const Real DGTR = 1.74533E-2;
   const Real DR   = 1.72142E-2;
   Real XL   = 1000.0;
   Real TLL  = 1000.0;
   Real SW9  = 1.0;
   Real DAYL = -1.0;
   Real P14  = -1000.0;
   Real P18  = -1000.0;
   Real P32  = -1000.0;
   const Real HR   = 0.2618;
   const Real SR   = 7.2722E-5;
   Real SV[25]  = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
   const Real NSW  = 14;
   Real P39   = -1000.0;
   Real LONGL = -999.0;
   Integer I;
   Real C, C2, C4, S, S2, CD14 = 0, CD18 = 0, CD32 = 0, CD39 = 0, F1, F2, T71, T72, T81, T82, P44, P45, EXP1, EXP2;

   // 3hr Magnetica activity functions

   #define G0( A )  ( A - 4.0 + ( P[25] - 1.0 )  * ( A - 4.0 + ( exp( - fabs( P[24] ) * ( A - 4.0 )  ) - 1.0 )  / fabs( P[24] ) ))

   #define SUMEX( EX )  ( 1.0 + ( 1.0 - pow( EX, 19 )  ) / ( 1.0 - EX )  * pow( EX, 0.5 )  )

   #define SG0( EX )  ( ( G0( AP[1] ) + ( G0( AP[2] ) * EX + G0( AP[3] ) * EX * EX + G0( AP[4] ) * EX * EX * EX + ( G0( AP[5] ) * pow( EX, 4 )  + G0( AP[6] ) * pow( EX, 12 )  ) * ( 1.0 - pow( EX, 8 )  ) / ( 1.0 - EX )  )) / SUMEX( EX )  )

   if ( ISW != 64999 )  
      TSELEC( SV );

   for ( J = 0; J < 15; J++ )
      TT[J] = 0;

   if ( SW[8] > 0 )  
      SW9 = 1.0;

   if ( SW[8] < 0 )  
      SW9= -1.0;

   IYR = YRD / 1000;
   DAY = YRD - IYR * 1000;

   XLONG = LONG;

   if ( XL != LAT)
   {
      // CALCULATE LEGENDRE POLYNOMIALS
      C  = sin( LAT * DGTR );
      S  = cos( LAT * DGTR );
      C2 = C * C;
      C4 = C2 * C2;
      S2 = S * S;
      PLG[0][1] = C;
      PLG[0][2] = 0.5 * ( 3.0 * C2 - 1.0 );
      PLG[0][3] = 0.5 * ( 5.0 * C*C2 - 3.0 * C );
      PLG[0][4] = ( 35.0 * C4 - 30.0 * C2 + 3.0 )  / 8.0;
      PLG[0][5] = ( 63.0 * C2 * C2 * C - 70.0 * C2 * C + 15.0 * C )  / 8.0;
      PLG[0][6] = ( 11.0 * C*PLG[0][5] - 5.0 * PLG[0][4] ) / 6.0;
      // PLG[0][7] = ( 13.0 * C*PLG[0][6] - 6.0 * PLG[0][5] ) / 7.0;
      PLG[1][1] = S;
      PLG[1][2] = 3.0 * C*S;
      PLG[1][3] = 1.5 * ( 5.0 * C2 - 1.0 )  * S;
      PLG[1][4] = 2.5 * ( 7.0 * C2 * C - 3.0 * C )  * S;
      PLG[1][5] = 1.875 * ( 21.0 * C4 - 14.0 * C2 +1.0 )  * S;
      PLG[1][6] = ( 11.0 * C*PLG[1][5] - 6.0 * PLG[1][4] ) / 5.0;
      // PLG[1][7] = ( 13.0 * C*PLG[1][6] - 7.0 * PLG[1][5] ) / 6.0;
      // PLG[1][8] = ( 15.0 * C*PLG[1][7] - 8.0 * PLG[1][6] ) / 7.0;
      PLG[2][2] = 3.0 * S2;
      PLG[2][3] = 15.0 * S2 * C;
      PLG[2][4] = 7.5 * ( 7.0 * C2 -1.0 )  * S2;
      PLG[2][5] = 3.0 * C*PLG[2][4] - 2.0 * PLG[2][3];
      PLG[2][6] = ( 11.0 * C*PLG[2][5] - 7.0 * PLG[2][4] ) / 4.0;
      PLG[2][7] = ( 13.0 * C*PLG[2][6] - 8.0 * PLG[2][5] ) / 5.0;
      PLG[3][3] = 15.0 * S2 * S;
      PLG[3][4] = 105.0 * S2 * S*C;
      PLG[3][5] = ( 9.0 * C*PLG[3][4] - 7.0 * PLG[3][3] ) / 2.0;
      PLG[3][6] = ( 11.0 * C*PLG[3][5] - 8.0 * PLG[3][4] ) / 3.0;
      XL = LAT;
   };

   if ( ( TLL    != TLOC ) || 
        ( SW[6]  != 0    ) || 
        ( SW[7]  != 0    ) || 
        ( SW[13] != 0    ) )
   {
      STLOC  = sin( HR * TLOC );
      CTLOC  = cos( HR * TLOC );
      S2TLOC = sin( 2.0 * HR * TLOC );
      C2TLOC = cos( 2.0 * HR * TLOC );
      S3TLOC = sin( 3.0 * HR * TLOC );
      C3TLOC = cos( 3.0 * HR * TLOC );
      TLL = TLOC;
   };

   if ( LONG != LONGL )
   {
      CLONG = cos( DGTR * LONG );
      SLONG = sin( DGTR * LONG );
      LONGL = LONG;
   };

   if ( ( DAY != DAYL ) || 
        ( P[13] != P14 ) ) 
      CD14 = cos( DR * ( DAY - P[13] ) );

   if ( ( DAY != DAYL ) || 
        ( P[17] != P18 ) ) 
      CD18 = cos( 2.0 * DR * ( DAY - P[17] ) );

   if ( ( DAY != DAYL ) || 
        ( P[31] != P32 ) ) 
      CD32 = cos( DR * ( DAY - P[31] ) );

   if ( ( DAY != DAYL ) || 
        ( P[38] != P39 ) ) 
      CD39 = cos( 2.0 * DR * ( DAY - P[38] ) );

   DAYL = DAY;
   P14  = P[13];
   P18  = P[17];
   P32  = P[31];
   P39  = P[38];

   // F10.7 EFFECT
   DF  = F107 - F107A;
   DFA = F107A - 150.0;
   TT[0] =  P[19] * DF + P[20] * DF * DF + P[21] * DFA + P[29] * DFA * DFA;
   F1 = 1.0 + ( P[47] * DFA +P[19] * DF + P[20] * DF * DF )  * SWC[0];
   F2 = 1.0 + ( P[49] * DFA + P[19] * DF + P[20] * DF * DF )  * SWC[0];

   // TIME INDEPENDENT;
   TT[1] = ( P[1] * PLG[0][2] + P[2] * PLG[0][4] + P[22] * PLG[0][6] )
           + ( P[14] * PLG[0][2] ) * DFA * SWC[0]
           + P[26] * PLG[0][1];

   // SYMMETRICAL ANNUAL
   TT[2] = ( P[18] ) * CD32;

   // SYMMETRICAL SEMIANNUAL
   TT[3] = ( P[15] + P[16] * PLG[0][2] ) * CD18;

   // ASYMMETRICAL ANNUAL
   TT[4] = F1 * ( P[9] * PLG[0][1] + P[10] * PLG[0][3] ) * CD14;

   // ASYMMETRICAL SEMIANNUAL
   TT[5] = P[37] * PLG[0][1] * CD39;

   // DIURNAL
   if ( SW[6] != 0)
   {
      T71   = ( P[11] * PLG[1][2] ) * CD14 * SWC[4];
      T72   = ( P[12] * PLG[1][2] ) * CD14 * SWC[4];
      TT[6] = F2 * ( ( P[3] * PLG[1][1] + P[4] * PLG[1][3] + P[27] * PLG[1][5] + T71 )  * CTLOC
              + ( P[6] * PLG[1][1] + P[7] * PLG[1][3] + P[28] * PLG[1][5] + T72 )  * STLOC );
   };

   //       SEMIDIURNAL
   if ( SW[7] != 0 )  
   {
      T81   = ( P[23] * PLG[2][3] + P[35] * PLG[2][5] ) * CD14 * SWC[4];
      T82   = ( P[33] * PLG[2][3] + P[36] * PLG[2][5] ) * CD14 * SWC[4];
      TT[7] = F2* ( ( P[5] * PLG[2][2] + P[41] * PLG[2][4] + T81 )  * C2TLOC
              + ( P[8] * PLG[2][2] + P[42] * PLG[2][4] + T82 )  * S2TLOC );
   };

   //       TERDIURNAL
   if ( SW[13] != 0)
   {
      TT[13] = F2 * ( ( P[39] * PLG[3][3] + ( P[93] * PLG[3][4] + P[47 - 1] * PLG[3][6] )
               * CD14 * SWC[4] ) * S3TLOC
              + ( P[40] * PLG[3][3] + ( P[94] * PLG[3][4] + P[48] * PLG[3][6] ) * CD14 * SWC[4] ) * C3TLOC );
   };

   //         MAGNETIC ACTIVITY BASED ON DAILY AP
   if ( SW9 != -1.0)
   {
      APD = ( AP[0] - 4.0 );
      P44 = P[43];
      P45 = P[44];
      if ( P44 < 0 )  
         P44 = 1.0E-5;
      APDF = ( APD + ( P45 - 1.0 )  * ( APD + ( exp( -P44 * APD )  - 1.0 )  / P44  ) );
      if ( SW[8] != 0)
      {
         TT[8] = APDF * ( P[32] + P[45] * PLG[0][2] + P[36] * PLG[0][4]+
                 ( P[100] * PLG[0][1] + P[101] * PLG[0][3] + P[102] * PLG[0][5] ) * CD14 * SWC[4] +
                 ( P[121] * PLG[1][1] + P[122] * PLG[1][3] + P[123] * PLG[1][5] ) * SWC[6]*
                 cos( HR * ( TLOC - P[124] ) ) );
      };
   }
   else if ( P[51] != 0)
   {
      EXP1 = exp( - 10800.0 * fabs( P[51] ) / ( 1.0 + P[139 - 1] * ( 45.0 - fabs( LAT )  )) );
      if ( EXP1 > .99999 )  
         EXP1=.99999;
      EXP2 = exp( - 10800.0 * fabs( P[53] ) );
      if ( EXP2 > .99999 )  EXP2=.99999;
      if ( P[24] < 1.0E-4 )  
         P[24] = 1.0E-4;
      APT[0] = SG0( EXP1 );
      APT[2] = SG0( EXP2 );
      if ( SW[8] != 0)
      {
         TT[8] = APT[0] * ( P[50] + P[96] * PLG[0][2] + P[54] * PLG[0][4] +
                 ( P[125] * PLG[0][1] + P[126] * PLG[0][3] + P[127] * PLG[0][5] ) * CD14 * SWC[4] +
                 ( P[128] * PLG[1][1] + P[129] * PLG[1][3] + P[130] * PLG[1][5] ) * SWC[6]*
                 cos( HR * ( TLOC - P[131] ) ) );
      };
   };
   if ( ( SW[9] != 0     ) && 
        ( LONG > -1000.0 ) )
   {
      // LONGITUDINAL
      if ( SW[10] != 0)
      {
         TT[10]= ( 1.0 + P[80] * DFA * SWC[0] )*
                 ( ( P[64] * PLG[1][2] + P[65] * PLG[1][4] + P[66] * PLG[1][6]
                 + P[103] * PLG[1][1] + P[104] * PLG[1][3] + P[105] * PLG[1][5]
                 + SWC[4] * ( P[109] * PLG[1][1] + P[110] * PLG[1][3] + P[111] * PLG[1][5] ) * 
                 CD14 ) * CLONG + ( P[90] * PLG[1][2] + P[91] * PLG[1][4] + P[92] * PLG[1][6]
                 + P[106] * PLG[1][1] + P[107] * PLG[1][3] + P[108] * PLG[1][5]
                 + SWC[4] * ( P[112] * PLG[1][1] + P[113] * PLG[1][3] + P[114] * PLG[1][5] ) * CD14 ) *
                 SLONG );
      };

      //       UT AND MIXED UT, LONGITUDE
      if ( SW[11] != 0 )
      {
         TT[11] = ( 1.0 + P[95] * PLG[0][1] ) * ( 1.0 + P[81] * DFA * SWC[0] )*
                  ( 1.0 + P[120 - 1] * PLG[0][1] * SWC[4] * CD14 ) *
                  ( ( P[68] * PLG[0][1] + P[69] * PLG[0][3] + P[70] * PLG[0][5] )*
                 cos( SR * ( SEC - P[71] ) ) );
         TT[11] = TT[11] + SWC[10]*
                  ( P[76] * PLG[2][3] + P[77] * PLG[2][5] + P[78] * PLG[2][7] )*
                  cos( SR * ( SEC - P[79] ) + 2.0 * DGTR * LONG )  * ( 1.0 + P[137] * DFA * SWC[0] );
      };

      //       UT, LONGITUDE MAGNETIC ACTIVITY
      if ( SW[12] != 0)
      {
         if ( SW9 != -1.0)
         {
            TT[12] = APDF * SWC[10] * ( 1.0 + P[121 - 1] * PLG[0][1] )*
                     ( ( P[60] * PLG[1][2] + P[61] * PLG[1][4] + P[62] * PLG[1][6] )*
                     cos( DGTR * ( LONG - P[63] ) ))
                     + APDF * SWC[10] * SWC[4]*
                     ( P[115] * PLG[1][1] + P[116] * PLG[1][3] + P[117] * PLG[1][5] )*
                     CD14 * cos( DGTR * ( LONG - P[118] ) )
                     + APDF * SWC[11]*
                     ( P[83] * PLG[0][1] + P[84] * PLG[0][3] + P[85] * PLG[0][5] )*
                     cos( SR * ( SEC - P[75] ) );
         }
         else if ( P[51] != 0 )  
         {
            TT[12] = APT[0] * SWC[10] * ( 1.0 + P[132] * PLG[0][1] )*
                     ( ( P[52] * PLG[1][2] + P[98] * PLG[1][4] + P[67] * PLG[1][6] )*
                     cos( DGTR * ( LONG - P[97] ) ))
                     + APT[0] * SWC[10] * SWC[4]*
                     ( P[133] * PLG[1][1] + P[134] * PLG[1][3] + P[135] * PLG[1][5] )*
                     CD14 * cos( DGTR * ( LONG - P[136] ) )
                     + APT[0] * SWC[11]*
                     ( P[55] * PLG[0][1] + P[56] * PLG[0][3] + P[57] * PLG[0][5] )*
                     cos( SR * ( SEC - P[58] ) );
         };
      };
   };

   TINFG = P[30];

   for ( I = 0; I < NSW; I++ )
      TINFG = TINFG + fabs( SW[I] ) * TT[I];

   return TINFG;
}


void MSISE90::TSELEC( const Real (& SV ) [25] )
{
   Integer I;
   // SET SWITCHES
   // SW FOR MAIN TERMS, SWC FOR CROSS TERMS
   for ( I = 0; I < 25; I++ )
   {
      SAV[I] = SV[I];
      SW[I]  = fmod( SV[I],2.0 );
      if ( ( fabs( SV[I] ) == 1   ) || 
           ( fabs( SV[I] ) == 2.0 ) )
         SWC[I] = 1.0;
      else
         SWC[I] = 0.0;
   };
   ISW = 64999;
   return;
};
 
  
void MSISE90::TRETRV( Real (& SVV ) [25] )
{
   Integer I;
   for ( I = 0; I < 25; I++ )
      SVV[I] = SAV[I];
   return;
}


Real MSISE90::GLOB6S( const Real (& P ) [100] )
{
   // VERSION OF GLOBE FOR LOWER ATMOSPHERE 1/17/90
   Real GLOB6S;
   Real T[14] = {0}; // zero out array
   Real DR    = 1.72142E-2;
   Real DAYL  = -1.0;
   Real P32   = -1000.0;
   Real P18   = -1000.0;
   Real P14   = -1000.0;
   Real P39   = -1000.0;
   Integer I;
   Real CD32 = 0, CD18 = 0, CD14 = 0, CD39 = 0, T71, T72, T81, T82;

   if ( ( DAY != DAYL  ) || 
        ( P32 != P[31] ) ) 
      CD32 = cos( DR * ( DAY - P[31] ) );

   if ( ( DAY != DAYL  ) || 
        ( P18 != P[17] ) ) 
      CD18 = cos( 2.0 * DR * ( DAY - P[17] ) );
   
   if ( ( DAY != DAYL  ) || 
        ( P14 != P[13] ) ) 
      CD14 = cos( DR * ( DAY - P[13] ) );

   if ( ( DAY != DAYL  ) || 
        ( P39 != P[38] ) ) 
      CD39 = cos( 2.0 * DR * ( DAY - P[38] ) );

   DAYL = DAY;
   P32 = P[31];
   P18 = P[17];
   P14 = P[13];
   P39 = P[381];

   // F10.7
   T[0] = P[21] * DFA;
   
   // TIME INDEPENDENT
   T[1] = P[1] * PLG[0][2] + P[2] * PLG[0][4] + P[22] * PLG[0][6] + P[26] * PLG[0][1] + P[27] * PLG[0][3] + P[28] * PLG[0][5];
   
   // SYMMETRICAL ANNUAL
   T[2] = ( P[18] + P[47] * PLG[0][2] + P[29] * PLG[0][4] ) * CD32;
   
   // SYMMETRICAL SEMIANNUAL
   T[3] = ( P[15] + P[16] * PLG[0][2] + P[30] * PLG[0][4] ) * CD18;
   
   // ASYMMETRICAL ANNUAL
   T[4] = ( P[9] * PLG[0][1] + P[10] * PLG[0][3] + P[35] * PLG[0][5] ) * CD14;
   
   // ASYMMETRICAL SEMIANNUAL
   T[5] = ( P[37] * PLG[0][1] ) * CD39;
   
   // DIURNAL
   if ( SW[6] != 0)
   {
      T71  = P[11] * PLG[1][2] * CD14 * SWC[4];
      T72  = P[12] * PLG[1][2] * CD14 * SWC[4];
      T[6] = ( ( P[3] * PLG[1][1] + P[4] * PLG[1][3]+ T71 )  * CTLOC + ( P[6] * PLG[1][1] + P[7] * PLG[1][3] + T72 )  * STLOC );
   }
   
   // SEMIDIURNAL
   if ( SW[7] != 0)
   {
      T81  = ( P[23] * PLG[2][3] + P[46] * PLG[2][5] ) * CD14 * SWC[4]; 
      T82  = ( P[33] * PLG[2][3] + P[48] * PLG[2][5] ) * CD14 * SWC[4];
      T[7] = ( ( P[5] * PLG[2][2] + P[41] * PLG[2][4] + T81 )  * C2TLOC + ( P[8] * PLG[2][2] + P[42] * PLG[2][4] + T82 )  * S2TLOC );
   }
   
   // TERDIURNAL
   if ( SW[13] != 0)
   {
      T[13] = P[39] * PLG[3][3] * S3TLOC + P[40] * PLG[3][3] * C3TLOC;
   }
   
   // MAGNETIC ACTIVITY
   if ( SW[8] != 0)
   {
      if ( SW[8] == 1)
         T[8] = APDF * ( P[32] + P[45] * PLG[0][2] * SWC[1] );

      if ( SW[8] == -1)
         T[8]=( P[50] * APT[2] + P[96] * PLG[0][2] * APT[2] * SWC[1] );
   };
   if ( ( SW[9] != 0     ) && 
        ( SW[10] != 0    ) && 
        ( XLONG > -1000.0 ) )
   {
      // LONGITUDINAL
      T[10]= ( 1.0 + PLG[0][1] * ( P[80] * SWC[4] * cos( DR * ( DAY - P[81] ) )
                +P[85] * SWC[5] * cos( 2.0 * DR * ( DAY - P[86] ) ))
                +P[83] * SWC[2] * cos( DR * ( DAY - P[84] ) )
                +P[87] * SWC[3] * cos( 2.0 * DR * ( DAY - P[88] ) ))
             *( ( P[65 - 1] * PLG[1][2] + P[66 - 1] * PLG[1][4] + P[67 - 1] * PLG[1][6]
                +P[75 - 1] * PLG[1][1] + P[76 - 1] * PLG[1][3] + P[77 - 1] * PLG[1][5]
               ) * CLONG
               +( P[91 - 1] * PLG[1][2] + P[92 - 1] * PLG[1][4] + P[93 - 1] * PLG[1][6]
               +P[78 - 1] * PLG[1][1] + P[79 - 1] * PLG[1][3] + P[80 - 1] * PLG[1][5]
               ) * SLONG );
   }

   GLOB6S = 0.0;

   for ( I = 0; I < 14; I++ )
      GLOB6S = GLOB6S + fabs( SW[I] ) * T[I];

   return GLOB6S;
}

Real MSISE90::DENSU( const Real ALT,
                      const Real DLB,
                      const Real TINF,
                      const Real TLB,
                      const Real XM,
                      const Real ALPHA,
                      Real & TZ,
                      const Real ZLB,
                      const Real S2,
                      const Integer MN1,
                      const Real * ZN1, //
                      Real * TN1,
                      Real * TGN1)
{
   // Calculate Temperature and Density Profiles for MSIS models
   // New lower thermo polynomial 10 / 30 / 89
   Real XS[5], YS[5], Y2OUT[5], DENSU, Z, ZG2, TT, TA, DTA, Z1 = 0, Z2, T1 = 0, T2;
   Real ZG, ZGDIF = 0, YD1, YD2, X = 0, Y, GLB, GAMMA, GAMM, EXPL, DENSA, YI;
   Real RGAS = 831.4;
   Integer K, MN = 0;

   #define ZETA( ZZ, ZL )  ( ( ZZ - ZL )  * ( RE + ZL )  / ( RE + ZZ )  )

   DENSU = 1.0;

   // Joining altitude of Bates and spline
   ZA = ZN1[0];
   if ( ALT > ZA)
      Z = ALT;
   else
      Z = ZA;
   
   // Geopotential altitude difference from ZLB
   ZG2 = ZETA( Z, ZLB );
   
   // Bates temperature
   TT = TINF - ( TINF - TLB )  * exp( - S2 * ZG2 );
   TA = TT;
   TZ = TT;
   DENSU = TZ;
   if ( ALT < ZA )
   {
      // CALCULATE TEMPERATURE BELOW ZA
      // Temperature gradient at ZA from Bates profile
      DTA = ( TINF - TA )  * S2 * pow( (( RE + ZLB )  / ( RE + ZA )  ),2 );
      TGN1[0] = DTA; 
      TN1[0]  = TA;
      if ( ALT > ZN1[MN1 - 1] ) Z = ALT; else Z = ZN1[MN1 - 1];
      MN = MN1;
      Z1 = ZN1[0];
      Z2 = ZN1[MN - 1];
      T1 = TN1[0];
      T2 = TN1[MN - 1];
      // Geopotental difference from Z1
      ZG = ZETA( Z, Z1 );
      ZGDIF = ZETA( Z2, Z1 );
      //Set up spline nodes
      for ( K = 0; K < MN; K++ )
      {
         XS[K] = ZETA( ZN1[K], Z1 )  / ZGDIF;
         YS[K] = 1.0 / TN1[K];
      }
      // End node derivatives
      YD1= -TGN1[0] / ( T1 * T1 ) * ZGDIF;
      YD2= -TGN1[1] / ( T2 * T2 ) * ZGDIF * pow( ( ( RE + Z2 )  / ( RE + Z1 )  ),2 );
      // Calculate spline coefficients
      SPLINE( XS, YS, MN, YD1, YD2, Y2OUT );
      X = ZG / ZGDIF;
      SPLINT( XS, YS, Y2OUT, MN, X,Y );
      // temperature at altitude
      TZ = 1.0 / Y;
      DENSU = TZ;
   }
   if ( XM != 0.0 )
   {
      // CALCULATE DENSITY ABOVE ZA
      GLB = GSURF / pow(( 1.0 + ZLB / RE ) ,2 );
      GAMMA = XM * GLB / ( S2 * RGAS * TINF );
      EXPL = exp( - S2 * GAMMA * ZG2 );
      if ( ( EXPL >  50.0 ) ||
           (   TT <= 0.0  ) )
         EXPL = 50.0;
      // Density at altitude
      DENSA = DLB * pow( ( TLB / TT ), ( 1.0 + ALPHA + GAMMA ) ) * EXPL;
      DENSU = DENSA;
      if ( ALT < ZA )
      {
         // CALCULATE DENSITY BELOW ZA
         GLB = GSURF / pow( ( 1.0 + Z1 / RE ) ,2 );
         GAMM = XM * GLB * ZGDIF / RGAS;
         // integrate spline temperatures
         SPLINI( XS, YS, Y2OUT, MN, X, YI );
         EXPL = GAMM * YI;
         if ( ( EXPL >  50.0 ) ||
              (  TZ <= 0.0  ) )
            EXPL = 50.0;
         // Density at altitude
         DENSU = DENSU * pow( ( T1 / TZ ), ( 1.0 + ALPHA ) ) * exp( - EXPL );
      };
   };
   return DENSU;
}

Real MSISE90::DENSM( const Real ALT,
                      const Real D0,
                      const Real XM,
                      Real & TZ,
                      const Integer MN3,
                      const Real * ZN3, // ZN3[MN3]
                      const Real * TN3, // TN3[MN3]
                      const Real * TGN3,// TGN3[MN3]
                      const Integer MN2,
                      const Real * ZN2, // ZN2[MN2]
                      const Real * TN2, // TN2[MN2]
                      const Real * TGN2)// TGN2[MN2]
{
   // Calculate Temperature and Density Profiles for lower atmos.
   Real DENSM, XS[10], YS[10], Y2OUT[10];
   Real RGAS = 831.4;
   Real Z, Z1, Z2, T1, T2, ZG, ZGDIF, YD1, YD2, X, Y, GLB, GAMM, YI, EXPL;
   Integer MN, K;

   #define ZETA( ZZ, ZL )  ( ( ZZ - ZL )  * ( RE + ZL )  / ( RE + ZZ )  )

   DENSM = D0;

   if ( ALT <= ZN2[0] ) 
   {
      // STRATOSPHERE / MESOSPHERE TEMPERATURE
      if ( ALT > ZN2[MN2 - 1] ) Z = ALT; else Z = ZN2[MN2 - 1];
      MN = MN2;
      Z1 = ZN2[0];
      Z2 = ZN2[MN - 1];
      T1 = TN2[0];
      T2 = TN2[MN - 1];
      ZG = ZETA( Z, Z1 );
      ZGDIF = ZETA( Z2, Z1 );

      // Set up spline nodes
      for ( K = 0; K < MN; K++ )
      {
         XS[K] = ZETA( ZN2[K],Z1 )  / ZGDIF;
         YS[K] = 1.0 / TN2[K];
      };
      YD1 = - TGN2[0] / ( T1 * T1 )  * ZGDIF;
      YD2 = - TGN2[1] / ( T2 * T2 )  * ZGDIF * pow( ( ( RE + Z2 )  / ( RE + Z1 )  ),2 );

      //  Calculate spline coefficients
      SPLINE( XS, YS, MN, YD1, YD2, Y2OUT );
      X = ZG / ZGDIF;
      SPLINT( XS, YS, Y2OUT, MN, X,Y );

      // Temperature at altitude
      TZ = 1.0 / Y;
      if ( XM != 0.0 )  
      {
         // CALCULATE STRATOSPHERE / MESOSPHERE DENSITY 
         GLB = GSURF / pow( ( 1.0 + Z1 / RE ) ,2 );
         GAMM = XM * GLB * ZGDIF / RGAS;

         // Integrate temperature profile
         SPLINI( XS, YS, Y2OUT, MN, X,YI );
         EXPL = GAMM * YI;
         if ( EXPL > 50.0 )  
            EXPL = 50.0;

         // Density at altitude
         DENSM = DENSM * ( T1 / TZ )  * exp( - EXPL );
      }
      if ( ALT <= ZN3[0] )
      {
         // TROPOSPHERE / STRATOSPHERE TEMPERATURE
         Z = ALT;
         MN = MN3;
         Z1 = ZN3[0];
         Z2 = ZN3[MN - 1];
         T1 = TN3[0];
         T2 = TN3[MN - 1];
         ZG = ZETA( Z, Z1 );
         ZGDIF = ZETA( Z2, Z1 );

         // Set up spline nodes
         for ( K = 0; K < MN; K++)
         {
            XS[K] = ZETA( ZN3[K],Z1 )  / ZGDIF;
            YS[K] = 1.0 / TN3[K];
         }
         YD1= - TGN3[0] / ( T1 * T1 )  * ZGDIF;
         YD2= - TGN3[1] / ( T2 * T2 )  * ZGDIF * pow( ( ( RE + Z2 )  / ( RE + Z1 )  ),2 );

         //  Calculate spline coefficients
         SPLINE( XS, YS, MN, YD1, YD2, Y2OUT );
         X = ZG / ZGDIF;
         SPLINT( XS, YS, Y2OUT, MN, X,Y );

         // temperature at altitude
         TZ = 1.0 / Y;
         if ( XM != 0.0)
         {
            // CALCULATE TROPOSPHERIC / STRATOSPHERE DENSITY 
            GLB = GSURF / pow( ( 1.0 + Z1 / RE ) ,2 );
            GAMM = XM * GLB * ZGDIF / RGAS;

            // Integrate temperature profile
            SPLINI( XS, YS, Y2OUT, MN, X,YI );
            EXPL = GAMM * YI;
            if ( EXPL > 50.0)
               EXPL = 50.0;

            // Density at altitude
            DENSM = DENSM * ( T1 / TZ )  * exp( -EXPL );
         };
      };
   };

   if ( XM == 0 ) 
      DENSM = TZ;

   return DENSM;
}

void MSISE90::SPLINE( const Real * X, // X[N]
                      const Real * Y, // Y[N]
                      const Integer N,
                      const Real YP1,
                      const Real YPN,
                      Real * Y2 )  // Y2[N]
{
   // CALCULATE 2ND DERIVATIVES OF CUBIC SPLINE INTERP FUNCTION
   // ADAPTED FROM NUMERICAL RECIPES BY PRESS ET AL
   //     X, Y: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X
   //       N: SIZE OF ARRAYS X, Y
   // YP1, YPN: SPECIFIED DERIVATIVES AT X[0] AND X( N ); VALUES
   //          >= 1E30 SIGNAL SIGNAL SECOND DERIVATIVE ZERO
   //      Y2: OUTPUT ARRAY OF SECOND DERIVATIVES

   #define NMAX 100
   Real U[NMAX], SIG, P, QN, UN;
   Integer I, K;

   if ( YP1 > 0.99E30)
   {
      Y2[0] = 0;
      U[0]  = 0;
   }
   else
   {
      Y2[0] = -0.5;
      U[0]  = ( 3.0 / ( X[1] - X[0] ) ) * ( ( Y[1] - Y[0] ) / ( X[1] - X[0] ) - YP1 );
   };
   
   for ( I = 1; I < N - 1; I++ )
   {
      SIG   = ( X[I] - X[I - 1] ) / ( X[I + 1] - X[I - 1] );
      P     = SIG * Y2[I - 1] + 2.0;
      Y2[I] = ( SIG - 1.0 )  / P;
      U[I]  = ( 6.0 * ( ( Y[I + 1] - Y[I] ) / ( X[I + 1] - X[I] ) - 
                        ( Y[I] - Y[I - 1] ) / ( X[I] - X[I - 1] ) ) / 
                        ( X[I + 1] - X[I - 1] ) - SIG * U[I - 1] ) / P;
   };
   if ( YPN > 0.99E30)
   {
      QN = 0;
      UN = 0;
   }
   else
   {
      QN = 0.5;
      UN = ( 3.0 / ( X[N - 1] - X[N - 2] ) ) * 
           ( YPN - ( Y[N - 1] - Y[N - 2] ) / ( X[N - 1] - X[N - 2] ) );
   };

   Y2[N - 1]=( UN - QN * U[N - 2] ) / ( QN * Y2[N - 2] + 1.0 );
   
   for ( K = N - 2; K >= 0; K-- )
      Y2[K] = Y2[K] * Y2[K + 1] + U[K];

   return;
}

void MSISE90::SPLINT( const Real * XA, // XA[N]
                      const Real * YA, // YA[N]
                      const Real * Y2A,// Y2A[N]
                      const Integer N,
                      const Real X,
                      Real & Y)
{
   // CALCULATE CUBIC SPLINE INTERP VALUE
   // ADAPTED FROM NUMBERICAL RECIPES BY PRESS ET AL.
   // XA, YA: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X
   //   Y2A: ARRAY OF SECOND DERIVATIVES
   //     N: SIZE OF ARRAYS XA, YA, Y2A
   //     X: ABSCISSA FOR INTERPOLATION
   //     Y: OUTPUT VALUE

   Integer KLO = 1;
   Integer KHI = N;
   Integer K;
   Real H, A, B;

   while ( KHI - KLO > 1 )
   {
      K = ( KHI + KLO )  / 2;
      if ( XA[K - 1] > X )
         KHI = K;
      else
         KLO = K;
   };

   H = XA[KHI - 1] - XA[KLO - 1];

   if ( H == 0)
   {
      assert( 0 );
      //WRITE( 6, * ) 'BAD XA INPUT TO SPLINT'
   };

   A = ( XA[KHI - 1] - X )  / H;
   B = ( X - XA[KLO - 1] ) / H;
   Y = A * YA[KLO - 1] + B * YA[KHI - 1] + 
       ( ( A * A * A - A ) * Y2A[KLO - 1] + ( B * B * B - B )  * Y2A[KHI - 1] ) * H * H / 6.0;

   return;
}

void MSISE90::SPLINI( const Real * XA, //XA[N]
                      const Real * YA, //YA[N]
                      const Real * Y2A,//YA2[N]
                      const Integer N,
                      const Real X,
                      Real & YI)
{
   // INTEGRATE CUBIC SPLINE FUNCTION FROM XA[0] TO X
   // XA, YA: ARRAYS OF TABULATED FUNCTION IN ASCENDING ORDER BY X
   //   Y2A: ARRAY OF SECOND DERIVATIVES
   //     N: SIZE OF ARRAYS XA, YA, Y2A
   //     X: ABSCISSA ENDPOINT FOR INTEGRATION
   //     Y: OUTPUT VALUE

   Integer KLO = 1;
   Integer KHI = 2;
   Real XX, H, A, A2, B, B2;

   YI = 0;

   while ( ( X > XA[KLO - 1] ) && 
           ( KHI <= N    ) )
   {
      XX = X;
      if ( KHI < N )
         if ( X < XA[KHI - 1] )
            XX = X;
         else
            XX = XA[KHI - 1];
      H  = XA[KHI - 1] - XA[KLO - 1];
      A  = ( XA[KHI - 1] - XX )  / H;
      B  = ( XX - XA[KLO - 1] ) / H;
      A2 = A * A;
      B2 = B * B;
      YI += ( ( 1.0 - A2 )  * YA[KLO - 1] / 2.0 + 
            B2 * YA[KHI - 1] / 2.0 + 
            ( ( - ( 1.0 + A2 * A2 )  / 4.0 + A2 / 2.0 )  * Y2A[KLO - 1]+
            ( B2 * B2 / 4.0 - B2 / 2.0 )  * Y2A[KHI - 1] ) * H*H / 6.0 )  * H;
      KLO = KLO + 1;
      KHI = KHI + 1;
   }  
   return;
}

Real MSISE90::DNET( Real & DD,
                     const Real DM,
                     const Real ZHM,
                     const Real XMM,
                     const Real XM)
{

   // TURBOPAUSE CORRECTION FOR MSIS MODELS
   // Root mean density
   // 8 / 20 / 80
   // DD - diffusive density
   // DM - full mixed density
   // ZHM - transition scale length
   // XMM - full mixed molecular weight
   // XM  - species molecular weight
   // DNET - combined density

   Real A, YLOG;

   A = ZHM / ( XMM - XM );

   if ( ( DM <= 0.0 ) ||
        ( DD <= 0   ) )
   {
      //WRITE( 6, * ) 'DNET LOG ERROR',DM, DD, XM
      if ( ( DD == 0 ) &&
           ( DM == 0 ) )
         DD = 1.0;

      if ( DM == 0 )
         return DD;

      if ( DD == 0 )
         return DM;
   };

   YLOG = A * log( DM / DD );

   if ( YLOG < -10.0 )
      return DD;

   if ( YLOG > 10.0)
      return DM;

   return ( DD * pow( ( 1.0 + exp( YLOG )  ), ( 1 / A )  ) );
}

Real MSISE90::CCOR( const Real ALT, 
                     const Real R,
                     const Real H1,
                     const Real ZH)
{
   // CHEMISTRY / DISSOCIATION CORRECTION FOR MSIS MODELS
   // ALT - altitude
   // R   - target ratio
   // H1  - transition scale length
   // ZH  - altitude of 1 / 2 R

   Real E, EX;

   E = ( ALT - ZH ) / H1;

   if ( E <= 0.0 )
   {
      if ( E >= -70.0 )
      {
        EX = exp( E );
        return exp( R / ( 1.0 + EX )  );
      }
      else
      {
         return exp( R );
      };
   }
   else
   {
      return 1.0;
   };
}


Real MSISE90::GetDL(int index)
{
   // this method is just to support debug output of common GTS3C
   switch (index)
   {
   case 0:
      return TLB;

   case 1:
      return S;

   case 2:
      return DB04;

   case 3:
      return DB16;

   case 4:
      return DB28;

   case 5:
      return DB32;

   case 6:
      return DB40;

   case 7:
      return DB48;

   case 8:
      return DB01;

   case 9:
      return ZA;

   case 10:
      return T0;

   case 11:
      return Z0;

   case 12:
      return G0;

   case 13:
      return RL;

   case 14:
      return DD;

   case 15:
      return DB14;

   case 16:
      return TR12;

   default:
      return -999.0;

   }
}


